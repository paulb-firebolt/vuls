#!/usr/bin/env python3

import json
import argparse
import os
from datetime import datetime
from jinja2 import Environment, FileSystemLoader
from pathlib import Path


class VulnerabilityReportGenerator:
    """Generate HTML vulnerability reports from JSON data."""

    def __init__(self, template_dir="templates"):
        self.template_dir = template_dir
        self.env = Environment(
            loader=FileSystemLoader(template_dir),
            autoescape=True
        )

        # Add custom filters
        self.env.filters['severity_color'] = self.severity_color
        self.env.filters['severity_badge'] = self.severity_badge
        self.env.filters['format_date'] = self.format_date
        self.env.filters['cvss_color'] = self.cvss_color
        self.env.filters['risk_level'] = self.risk_level

    def severity_color(self, severity):
        """Return CSS color class for severity level."""
        colors = {
            'CRITICAL': 'bg-red-100 text-red-800 border-red-200',
            'HIGH': 'bg-orange-100 text-orange-800 border-orange-200',
            'MEDIUM': 'bg-yellow-100 text-yellow-800 border-yellow-200',
            'LOW': 'bg-blue-100 text-blue-800 border-blue-200',
            'unknown': 'bg-gray-100 text-gray-800 border-gray-200'
        }
        return colors.get(severity.upper(), colors['unknown'])

    def severity_badge(self, severity):
        """Return severity badge HTML."""
        color_class = self.severity_color(severity)
        return f'<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border {color_class}">{severity.upper()}</span>'

    def format_date(self, date_str):
        """Format date string for display."""
        if not date_str:
            return "Unknown"
        try:
            # Parse the date string and format it
            dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            return dt.strftime('%Y-%m-%d')
        except:
            return date_str

    def cvss_color(self, score):
        """Return color class based on CVSS score."""
        if score >= 9.0:
            return 'text-red-600'
        elif score >= 7.0:
            return 'text-orange-600'
        elif score >= 4.0:
            return 'text-yellow-600'
        else:
            return 'text-blue-600'

    def risk_level(self, risk_score):
        """Convert numeric risk score to text level."""
        if risk_score >= 50:
            return 'Critical'
        elif risk_score >= 30:
            return 'High'
        elif risk_score >= 15:
            return 'Medium'
        else:
            return 'Low'

    def load_vulnerability_data(self, json_file):
        """Load vulnerability data from JSON file."""
        try:
            with open(json_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            raise Exception(f"Error loading JSON file: {e}")

    def prepare_chart_data(self, data):
        """Prepare data for charts."""
        # Calculate severity distribution from actual vulnerability data
        severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0, 'unknown': 0}
        for vuln in data.get('vulnerabilities', []):
            severity = vuln.get('severity', 'unknown').upper()
            if severity in severity_counts:
                severity_counts[severity] += 1
            else:
                severity_counts['unknown'] += 1

        # Timeline data - group by month
        timeline_data = {}
        for vuln in data.get('vulnerabilities', []):
            pub_date = vuln.get('published_date', '')
            if pub_date:
                try:
                    dt = datetime.fromisoformat(pub_date.replace('Z', '+00:00'))
                    month_key = dt.strftime('%Y-%m')
                    timeline_data[month_key] = timeline_data.get(month_key, 0) + 1
                except:
                    pass

        # CVSS distribution
        cvss_ranges = {'0-3': 0, '3-5': 0, '5-7': 0, '7-9': 0, '9-10': 0}
        for vuln in data.get('vulnerabilities', []):
            score = vuln.get('cvss_score', 0)
            if score < 3:
                cvss_ranges['0-3'] += 1
            elif score < 5:
                cvss_ranges['3-5'] += 1
            elif score < 7:
                cvss_ranges['5-7'] += 1
            elif score < 9:
                cvss_ranges['7-9'] += 1
            else:
                cvss_ranges['9-10'] += 1

        return {
            'severity_distribution': severity_counts,
            'timeline_data': timeline_data,
            'cvss_distribution': cvss_ranges,
            'high_risk_packages': data.get('high_risk_packages', [])[:10]  # Top 10
        }

    def generate_report(self, json_file, output_file, title="Vulnerability Report", theme="light"):
        """Generate HTML report from JSON data."""
        # Load data
        data = self.load_vulnerability_data(json_file)

        # Prepare chart data
        chart_data = self.prepare_chart_data(data)

        # Add metadata
        report_data = {
            'title': title,
            'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'theme': theme,
            'data': data,
            'chart_data': chart_data,
            'total_packages': len(set(v.get('affected_package', '') for v in data.get('vulnerabilities', []))),
            'scan_summary': {
                'total_vulnerabilities': data.get('total_vulnerabilities', 0),
                'packages_affected': data.get('packages_affected', 0),
                'critical_count': chart_data['severity_distribution'].get('CRITICAL', 0),
                'high_count': chart_data['severity_distribution'].get('HIGH', 0),
                'medium_count': chart_data['severity_distribution'].get('MEDIUM', 0),
                'low_count': chart_data['severity_distribution'].get('LOW', 0),
            }
        }

        # Load template and render
        template = self.env.get_template('vulnerability_report_template.html')
        html_content = template.render(**report_data)

        # Write output
        with open(output_file, 'w') as f:
            f.write(html_content)

        print(f"Report generated successfully: {output_file}")
        return output_file


def main():
    parser = argparse.ArgumentParser(description='Generate HTML vulnerability reports')
    parser.add_argument('--input', '-i', required=True, help='Input JSON file')
    parser.add_argument('--output', '-o', required=True, help='Output HTML file')
    parser.add_argument('--title', '-t', default='Vulnerability Report', help='Report title')
    parser.add_argument('--template-dir', default='templates', help='Template directory')

    args = parser.parse_args()

    # Create generator
    generator = VulnerabilityReportGenerator(args.template_dir)

    # Generate report
    try:
        generator.generate_report(
            json_file=args.input,
            output_file=args.output,
            title=args.title
        )
    except Exception as e:
        print(f"Error generating report: {e}")
        return 1

    return 0


if __name__ == '__main__':
    exit(main())
