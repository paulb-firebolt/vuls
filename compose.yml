services:
  vuls:
    #image: vuls/vuls:latest
    build: build/vuls
    container_name: vuls-scanner
    volumes:
      - ./config/config.toml:/vuls/config.toml:rw
      - ./logs:/vuls/logs:rw
      - ./results:/vuls/results:rw
      - ./db:/vuls/db:rw # Database storage
      - ./.ssh:/root/.ssh:rw
      - /var/run/docker.sock:/var/run/docker.sock # If scanning containers
      - /home/paulb/.config/gcloud:/root/.config/gcloud:rw
      - /home/paulb/.aws:/root/.aws:ro
      - /home/paulb/.cloudflared:/root/.cloudflared:rw
      - ${SSH_AUTH_SOCK}:/ssh-agent # SSH agent socket
    environment:
      - VULS_CONFIG_PATH=/vuls/config.toml
      - SSH_AUTH_SOCK=/ssh-agent
      # AWS environment variables
      - AWS_PROFILE=${AWS_PROFILE:-default}
      - AWS_REGION=${AWS_REGION:-eu-west-2}
      - AWS_CONFIG_FILE=/root/.aws/config
      - AWS_SHARED_CREDENTIALS_FILE=/root/.aws/credentials
      # GCP environment variables
      #- GOOGLE_CLOUD_PROJECT=your-project-id
      - GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/application_default_credentials.json
      - CLOUDSDK_CONFIG=/root/.config/gcloud
      - CF_ACCESS_CLIENT_ID=${CF_ACCESS_CLIENT_ID}
      - CF_ACCESS_CLIENT_SECRET=${CF_ACCESS_CLIENT_SECRET}
    command: [scan, -config=/vuls/config.toml]

  # NVD database fetcher
  vuls-nvd:
    image: vuls/go-cve-dictionary:latest
    container_name: vuls-nvd
    volumes:
      - ./db:/vuls/db:rw
    command: [fetch, nvd, --dbpath, /vuls/db/cve.sqlite3]
    profiles: [fetch]

  # Ubuntu database fetcher
  vuls-ubuntu:
    image: vuls/goval-dictionary:latest
    container_name: vuls-ubuntu
    volumes:
      - ./db:/vuls/db:rw
    command:
      [
        fetch,
        ubuntu,
        "16.04",
        "18.04",
        "20.04",
        "22.04",
        "24.04",
        --dbpath,
        /vuls/db/oval.sqlite3,
      ]
    profiles: [fetch]

  # Debian database fetcher
  vuls-debian:
    image: vuls/goval-dictionary:latest
    container_name: vuls-debian
    volumes:
      - ./db:/vuls/db:rw
    command: [fetch, debian, "10", "11", "12", --dbpath, /vuls/db/oval.sqlite3]
    profiles: [fetch]

  # Red Hat/CentOS database fetcher
  vuls-redhat:
    image: vuls/goval-dictionary:latest
    container_name: vuls-redhat
    volumes:
      - ./db:/vuls/db:rw
    command: [fetch, redhat, "7", "8", "9", --dbpath, /vuls/db/oval.sqlite3]
    profiles: [fetch]

  # Amazon Linux database fetcher
  vuls-amazon:
    image: vuls/goval-dictionary:latest
    container_name: vuls-amazon
    volumes:
      - ./db:/vuls/db:rw
    command: [fetch, amazon, "1", "2", "2023", --dbpath, /vuls/db/oval.sqlite3]
    profiles: [fetch]

  # Alpine database fetcher
  vuls-alpine:
    image: vuls/goval-dictionary:latest
    container_name: vuls-alpine
    volumes:
      - ./db:/vuls/db:rw
    command:
      [
        fetch,
        alpine,
        "3.15",
        "3.16",
        "3.17",
        "3.18",
        "3.19",
        "3.20",
        --dbpath,
        /vuls/db/oval.sqlite3,
      ]
    profiles: [fetch]

  # GOST database fetcher for Ubuntu
  vuls-gost-ubuntu:
    image: vuls/gost:latest
    container_name: vuls-gost-ubuntu
    volumes:
      - ./db:/vuls/db:rw
    command: [fetch, ubuntu, --dbpath, /vuls/db/gost.sqlite3]
    profiles: [fetch]

  # GOST database fetcher for Debian
  vuls-gost-debian:
    image: vuls/gost:latest
    container_name: vuls-gost-debian
    volumes:
      - ./db:/vuls/db:rw
    command: [fetch, debian, --dbpath, /vuls/db/gost.sqlite3]
    profiles: [fetch]

  # GOST database fetcher for Red Hat
  vuls-gost-redhat:
    image: vuls/gost:latest
    container_name: vuls-gost-redhat
    volumes:
      - ./db:/vuls/db:rw
    command: [fetch, redhat, --dbpath, /vuls/db/gost.sqlite3]
    profiles: [fetch]

  # For configuration testing
  vuls-configtest:
    build: build/vuls
    container_name: vuls-configtest
    volumes:
      - ./config/config.toml:/vuls/config.toml:rw
      - ./logs:/vuls/logs:rw
      - ./results:/vuls/results:rw
      - ./db:/vuls/db:rw
      - ./.ssh:/root/.ssh:rw
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/paulb/.config/gcloud:/root/.config/gcloud:ro
      - /home/paulb/.aws:/root/.aws:ro
      - ${SSH_AUTH_SOCK}:/ssh-agent # SSH agent socket
    environment:
      - VULS_CONFIG_PATH=/vuls/config.toml
      - SSH_AUTH_SOCK=/ssh-agent
      - AWS_PROFILE=${AWS_PROFILE:-default}
      - AWS_REGION=${AWS_REGION:-eu-west-2}
      - AWS_CONFIG_FILE=/root/.aws/config
      - AWS_SHARED_CREDENTIALS_FILE=/root/.aws/credentials
      - GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/application_default_credentials.json
      - CLOUDSDK_CONFIG=/root/.config/gcloud
    command: [configtest, -config=/vuls/config.toml]
    profiles: [test]

  # PostgreSQL for application data
  vuls-db:
    image: postgres:15
    container_name: vuls-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vuls}
      - POSTGRES_USER=${POSTGRES_USER:-vuls}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?}
    volumes:
      - vuls_db_data:/var/lib/postgresql/data
    healthcheck:
      test: [CMD-SHELL, pg_isready -U vuls -d vuls]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles: [web, dev]

  # Dragonfly for task queue (Redis-compatible)
  vuls-redis:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.31.0
    container_name: vuls-redis
    command:
      - --logtostderr
      - --alsologtostderr=false
      - --requirepass=${REDIS_PASSWORD?}
      - --rename_command=CONFIG=VULS_CONFIG_CMD_RENAMED
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD?}
    healthcheck:
      test: [CMD, redis-cli, -a, "${REDIS_PASSWORD?}", ping]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    profiles: [web, dev]

  # Main web application
  vuls-web:
    build:
      context: ./web-app
      args:
        BUILD_TYPE: production
    container_name: vuls-web
    ports:
      - 8000:8000
    volumes:
      - ./config:/app/config:ro
      - ./results:/app/results:rw
      - ./db:/app/db:ro
      - ./logs:/app/logs:rw
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-vuls}:${POSTGRES_PASSWORD?}@vuls-db:5432/${POSTGRES_DB:-vuls}
      - REDIS_URL=redis://:${REDIS_PASSWORD?}@vuls-redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY?}
      - EXECUTOR_URL=http://vuls-executor:8080
      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY?}
    depends_on:
      - vuls-db
      - vuls-redis
    profiles: [web]

  # Development web application with hot reload
  vuls-web-dev:
    build:
      context: ./web-app
      args:
        BUILD_TYPE: development
    container_name: vuls-web-dev
    ports:
      - 8000:8000
    volumes:
      - ./config:/app/config:ro
      - ./config:/vuls/config:rw
      - ./results:/app/results:rw
      - ./db:/app/db:ro
      - ./logs:/app/logs:rw
      - ./.ssh:/app/.ssh:rw
      # Mount source code for hot reload
      - ./web-app/app:/app/app:rw
      - ./web-app/static:/app/static:rw
      - ./web-app/pyproject.toml:/app/pyproject.toml:ro
      # Mount alembic files for migrations
      - ./web-app/alembic.ini:/app/alembic.ini:ro
      - ./web-app/alembic:/app/alembic:rw
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-vuls}:${POSTGRES_PASSWORD?}@vuls-db:5432/${POSTGRES_DB:-vuls}
      - REDIS_URL=redis://:${REDIS_PASSWORD?}@vuls-redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY?}
      - EXECUTOR_URL=http://vuls-executor-dev:8080
      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY?}
    depends_on:
      - vuls-db
      - vuls-redis
      - vuls-executor-dev
    profiles: [dev]

  # Celery worker for background tasks
  vuls-worker:
    build:
      context: ./web-app
      args:
        BUILD_TYPE: production
    container_name: vuls-worker
    command: [uv, run, celery, -A, app.tasks, worker, --loglevel=info]
    volumes:
      - ./config:/app/config:rw
      - ./results:/app/results:rw
      - ./db:/app/db:ro
      - ./logs:/app/logs:rw
      - ./.ssh:/root/.ssh:rw
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD?}@vuls-db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD?}@vuls-redis:6379
      - EXECUTOR_URL=http://vuls-executor:8080
      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY?}
    healthcheck:
      test: [CMD-SHELL, uv, run, celery, -A, app.tasks, inspect ping]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - vuls-db
      - vuls-redis
      - vuls-executor
    profiles: [web]

  # Development Celery worker with hot reload via supervisord
  vuls-worker-dev:
    build:
      context: ./web-app
      args:
        BUILD_TYPE: development
    container_name: vuls-worker-dev
    command: [supervisord, -c, /etc/supervisor/supervisord-celery.conf]
    volumes:
      - ./config:/app/config:rw
      - ./results:/app/results:rw
      - ./db:/app/db:ro
      - ./logs:/app/logs:rw
      - ./.ssh:/root/.ssh:rw
      # Mount source code for hot reload
      - ./web-app/app:/app/app:rw
      - ./web-app/pyproject.toml:/app/pyproject.toml:ro
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD?}@vuls-db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD?}@vuls-redis:6379
      - EXECUTOR_URL=http://vuls-executor-dev:8080
      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY?}
    healthcheck:
      test: [CMD-SHELL, uv, run, celery, -A, app.tasks, inspect, ping]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - vuls-db
      - vuls-redis
      - vuls-executor-dev
    profiles: [dev]

  # Celery beat for scheduled tasks
  vuls-scheduler:
    build:
      context: ./web-app
      args:
        BUILD_TYPE: production
    container_name: vuls-scheduler
    command: [uv, run, celery, -A, app.tasks, beat, --loglevel=info]
    volumes:
      - ./config:/app/config:rw
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD?}@vuls-db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD?}@vuls-redis:6379
    healthcheck:
      test:
        [
          CMD-SHELL,
          set -o pipefail && ps aux | grep 'celery.*beat' | grep -v grep || exit 1,
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - vuls-db
      - vuls-redis
    profiles: [web]

  # Development Celery beat with hot reload
  vuls-scheduler-dev:
    build:
      context: ./web-app
      args:
        BUILD_TYPE: development
    container_name: vuls-scheduler-dev
    command: [uv, run, celery, -A, app.tasks, beat, --loglevel=info]
    volumes:
      - ./config:/app/config:rw
      # Mount source code for hot reload
      - ./web-app/app:/app/app:rw
      - ./web-app/pyproject.toml:/app/pyproject.toml:ro
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD?}@vuls-db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD?}@vuls-redis:6379
    healthcheck:
      test:
        [
          CMD-SHELL,
          set -o pipefail && ps aux | grep 'celery.*beat' | grep -v grep || exit 1,
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - vuls-db
      - vuls-redis
    profiles: [dev]

  # Docker executor sidecar for secure Docker operations
  vuls-executor:
    build:
      context: ./docker-executor
      args:
        BUILD_TYPE: production
    container_name: vuls-executor
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/project:rw # Mount compose project directory as /project with write access
    environment:
      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY?}
      - HOST_PROJECT_PATH=${PWD}
      - HOST_USER_HOME=${HOME}
      - CF_ACCESS_CLIENT_ID=${CF_ACCESS_CLIENT_ID}
      - CF_ACCESS_CLIENT_SECRET=${CF_ACCESS_CLIENT_SECRET}
    ports:
      - 8080:8080
    profiles: [web]

  # Development Docker executor with hot reload
  vuls-executor-dev:
    build:
      context: ./docker-executor
      args:
        BUILD_TYPE: development
    container_name: vuls-executor-dev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/project:rw # Mount compose project directory as /project with write access
      # Mount source code for hot reload
      - ./docker-executor:/app:rw
    environment:
      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY?}
      - HOST_PROJECT_PATH=${PWD}
      - HOST_USER_HOME=${HOME}
      - CF_ACCESS_CLIENT_ID=${CF_ACCESS_CLIENT_ID}
      - CF_ACCESS_CLIENT_SECRET=${CF_ACCESS_CLIENT_SECRET}
    ports:
      - 8080:8080
    profiles: [dev]

  # Build target for SSH client
  ssh-client:
    build:
      context: build/ssh-client
      dockerfile: Dockerfile
    image: ssh-client:latest
    profiles: [build] # Only used for building

volumes:
  vuls_db_data:
