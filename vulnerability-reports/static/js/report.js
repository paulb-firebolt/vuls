// Vulnerability Report Interactive Features
class VulnerabilityReport {
    constructor() {
        this.charts = {};
        this.filters = {
            severity: [],
            search: '',
            cvssMin: 0,
            cvssMax: 10,
            dateFrom: '',
            dateTo: ''
        };
        this.allVulnerabilities = [];
        this.filteredVulnerabilities = [];

        this.init();
    }

    init() {
        this.setupEventListeners();
        this.initializeCharts();
        this.loadVulnerabilities();
        this.setupSearch();
        this.setupFilters();
    }

    setupEventListeners() {
        // Theme toggle
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => this.toggleTheme());
        }

        // Filter toggles
        document.querySelectorAll('.severity-filter').forEach(checkbox => {
            checkbox.addEventListener('change', () => this.updateFilters());
        });

        // Search input
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.addEventListener('input', this.debounce(() => this.updateFilters(), 300));
        }

        // CVSS range sliders
        const cvssMinSlider = document.getElementById('cvss-min');
        const cvssMaxSlider = document.getElementById('cvss-max');
        if (cvssMinSlider && cvssMaxSlider) {
            cvssMinSlider.addEventListener('input', () => this.updateCvssRange());
            cvssMaxSlider.addEventListener('input', () => this.updateCvssRange());
        }

        // Clear filters button
        const clearFiltersBtn = document.getElementById('clear-filters');
        if (clearFiltersBtn) {
            clearFiltersBtn.addEventListener('click', () => this.clearFilters());
        }

        // Export buttons
        const exportPdfBtn = document.getElementById('export-pdf');
        const exportCsvBtn = document.getElementById('export-csv');
        if (exportPdfBtn) exportPdfBtn.addEventListener('click', () => this.exportToPdf());
        if (exportCsvBtn) exportCsvBtn.addEventListener('click', () => this.exportToCsv());

        // Vulnerability card toggles - use event delegation
        document.addEventListener('click', (e) => {
            // Check if clicked element or its parent is a toggle button
            const toggleButton = e.target.closest('.vuln-toggle');
            if (toggleButton) {
                this.toggleVulnerabilityCard(toggleButton);
            }
        });

        // Sort functionality
        document.querySelectorAll('.sort-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.sortVulnerabilities(e.target.dataset.sort));
        });

    }

    initializeCharts() {
        // Initialize Chart.js charts
        this.initCvssChart();
        this.initPackageRiskChart();
    }


    initCvssChart() {
        const ctx = document.getElementById('cvss-chart');
        if (!ctx) return;

        const cvssData = window.chartData?.cvss_distribution || {};

        this.charts.cvss = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['0-3', '3-5', '5-7', '7-9', '9-10'],
                datasets: [{
                    label: 'Number of Vulnerabilities',
                    data: [
                        cvssData['0-3'] || 0,
                        cvssData['3-5'] || 0,
                        cvssData['5-7'] || 0,
                        cvssData['7-9'] || 0,
                        cvssData['9-10'] || 0
                    ],
                    backgroundColor: [
                        '#10B981', // Low
                        '#F59E0B', // Medium-Low
                        '#F59E0B', // Medium
                        '#EF4444', // High
                        '#DC2626'  // Critical
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'CVSS Score Distribution'
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    initPackageRiskChart() {
        const ctx = document.getElementById('package-risk-chart');
        if (!ctx) return;

        const packageData = window.chartData?.high_risk_packages || [];

        this.charts.packageRisk = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: packageData.map(pkg => pkg.package),
                datasets: [{
                    label: 'Risk Score',
                    data: packageData.map(pkg => pkg.risk_score),
                    backgroundColor: packageData.map(pkg => {
                        if (pkg.risk_score >= 50) return '#DC2626';
                        if (pkg.risk_score >= 30) return '#EA580C';
                        if (pkg.risk_score >= 15) return '#D97706';
                        return '#2563EB';
                    })
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Top 10 High-Risk Packages'
                    },
                    legend: {
                        display: false
                    }
                },
                indexAxis: 'y',
                scales: {
                    x: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    loadVulnerabilities() {
        // Load vulnerabilities from the page data
        this.allVulnerabilities = window.vulnerabilityData || [];
        this.filteredVulnerabilities = [...this.allVulnerabilities];

        // Sort by CVSS score descending by default (highest risk first)
        this.filteredVulnerabilities.sort((a, b) => (b.cvss_score || 0) - (a.cvss_score || 0));

        this.renderPackageSummary();
        this.renderVulnerabilities();
    }

    updateFilters() {
        // Get current filter values
        this.filters.severity = Array.from(document.querySelectorAll('.severity-filter:checked'))
            .map(cb => cb.value);

        const searchInput = document.getElementById('search-input');
        this.filters.search = searchInput ? searchInput.value.toLowerCase() : '';

        const cvssMin = document.getElementById('cvss-min');
        const cvssMax = document.getElementById('cvss-max');
        this.filters.cvssMin = cvssMin ? parseFloat(cvssMin.value) : 0;
        this.filters.cvssMax = cvssMax ? parseFloat(cvssMax.value) : 10;

        // Apply filters
        this.filteredVulnerabilities = this.allVulnerabilities.filter(vuln => {
            // Severity filter
            if (this.filters.severity.length > 0 &&
                !this.filters.severity.includes(vuln.severity?.toUpperCase())) {
                return false;
            }

            // Search filter
            if (this.filters.search &&
                !vuln.cve_id?.toLowerCase().includes(this.filters.search) &&
                !vuln.affected_package?.toLowerCase().includes(this.filters.search) &&
                !vuln.title?.toLowerCase().includes(this.filters.search)) {
                return false;
            }

            // CVSS filter
            const cvssScore = vuln.cvss_score || 0;
            if (cvssScore < this.filters.cvssMin || cvssScore > this.filters.cvssMax) {
                return false;
            }

            return true;
        });

        // Sort filtered results by CVSS score descending (highest risk first)
        this.filteredVulnerabilities.sort((a, b) => (b.cvss_score || 0) - (a.cvss_score || 0));

        this.renderVulnerabilities();
        this.updateFilterStats();
    }

    updateCvssRange() {
        const cvssMin = document.getElementById('cvss-min');
        const cvssMax = document.getElementById('cvss-max');
        const cvssMinLabel = document.getElementById('cvss-min-label');
        const cvssMaxLabel = document.getElementById('cvss-max-label');

        if (cvssMinLabel) cvssMinLabel.textContent = cvssMin.value;
        if (cvssMaxLabel) cvssMaxLabel.textContent = cvssMax.value;

        this.updateFilters();
    }

    clearFilters() {
        // Reset all filters
        document.querySelectorAll('.severity-filter').forEach(cb => cb.checked = false);

        const searchInput = document.getElementById('search-input');
        if (searchInput) searchInput.value = '';

        const cvssMin = document.getElementById('cvss-min');
        const cvssMax = document.getElementById('cvss-max');
        if (cvssMin) cvssMin.value = 0;
        if (cvssMax) cvssMax.value = 10;

        this.updateCvssRange();
        this.updateFilters();
    }

    renderPackageSummary() {
        const container = document.getElementById('package-summary-container');
        if (!container) return;

        // Group vulnerabilities by package and find highest CVSS score for each
        const packageSummary = {};
        this.allVulnerabilities.forEach(vuln => {
            const pkg = vuln.affected_package;
            if (!packageSummary[pkg] || (vuln.cvss_score || 0) > (packageSummary[pkg].cvss_score || 0)) {
                packageSummary[pkg] = vuln;
            }
        });

        // Convert to array and sort by CVSS score descending
        const sortedPackages = Object.values(packageSummary)
            .sort((a, b) => (b.cvss_score || 0) - (a.cvss_score || 0));

        const html = sortedPackages.map(vuln => this.renderPackageSummaryCard(vuln)).join('');
        container.innerHTML = html;
    }

    renderPackageSummaryCard(vuln) {
        const severityColor = this.getSeverityColor(vuln.severity);
        const cvssColor = this.getCvssColor(vuln.cvss_score);

        // Count total vulnerabilities for this package
        const totalVulns = this.allVulnerabilities.filter(v => v.affected_package === vuln.affected_package).length;

        return `
            <div class="vulnerability-card bg-white rounded-lg shadow-sm border-l-4 ${severityColor.border} p-4">
                <div class="flex justify-between items-center">
                    <div class="flex-1">
                        <div class="flex items-center gap-3 mb-2">
                            <h3 class="text-lg font-semibold text-gray-900">${vuln.affected_package}</h3>
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${severityColor.badge}">
                                ${vuln.severity?.toUpperCase() || 'UNKNOWN'}
                            </span>
                            <span class="text-sm ${cvssColor} font-medium">
                                CVSS: ${vuln.cvss_score || 'N/A'}
                            </span>
                        </div>
                        <div class="flex items-center gap-4 text-sm text-gray-600">
                            <span><strong>Version:</strong> ${vuln.installed_version}</span>
                            <span><strong>Highest CVE:</strong> ${vuln.cve_id}</span>
                            <span><strong>Total Issues:</strong> ${totalVulns}</span>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="text-sm text-gray-500">Update Priority</div>
                        <div class="text-lg font-bold ${cvssColor}">${this.getPriorityLevel(vuln.cvss_score)}</div>
                    </div>
                </div>
            </div>
        `;
    }

    getPriorityLevel(cvssScore) {
        if (cvssScore >= 9.0) return 'CRITICAL';
        if (cvssScore >= 7.0) return 'HIGH';
        if (cvssScore >= 4.0) return 'MEDIUM';
        return 'LOW';
    }

    renderVulnerabilities() {
        const container = document.getElementById('vulnerabilities-container');
        if (!container) return;

        if (this.filteredVulnerabilities.length === 0) {
            container.innerHTML = `
                <div class="text-center py-12">
                    <div class="text-gray-400 text-lg">No vulnerabilities match your filters</div>
                    <button onclick="vulnerabilityReport.clearFilters()"
                            class="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Clear Filters
                    </button>
                </div>
            `;
            return;
        }

        const html = this.filteredVulnerabilities.map(vuln => this.renderVulnerabilityCard(vuln)).join('');
        container.innerHTML = html;
    }

    renderVulnerabilityCard(vuln) {
        const severityColor = this.getSeverityColor(vuln.severity);
        const cvssColor = this.getCvssColor(vuln.cvss_score);

        return `
            <div class="vulnerability-card bg-white rounded-lg shadow-md border-l-4 ${severityColor.border} mb-4">
                <div class="p-6">
                    <div class="flex justify-between items-start mb-4">
                        <div class="flex-1">
                            <div class="flex items-center gap-3 mb-2">
                                <h3 class="text-lg font-semibold text-gray-900">${vuln.cve_id}</h3>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${severityColor.badge}">
                                    ${vuln.severity?.toUpperCase() || 'UNKNOWN'}
                                </span>
                                <span class="text-sm ${cvssColor} font-medium">
                                    CVSS: ${vuln.cvss_score || 'N/A'}
                                </span>
                            </div>
                            <p class="text-sm text-gray-600 mb-2">
                                <strong>Package:</strong> ${vuln.affected_package} (${vuln.installed_version})
                            </p>
                            <p class="text-sm text-gray-600">
                                <strong>Published:</strong> ${this.formatDate(vuln.published_date)}
                            </p>
                        </div>
                        <button class="vuln-toggle text-gray-400 hover:text-gray-600" data-cve="${vuln.cve_id}">
                            <svg class="w-5 h-5 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                    </div>

                    <div class="vuln-details hidden" id="details-${vuln.cve_id}">
                        <div class="border-t pt-4 mt-4">
                            <h4 class="font-medium text-gray-900 mb-2">Description</h4>
                            <p class="text-sm text-gray-700 mb-4">${vuln.summary || vuln.description || 'No description available'}</p>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <h5 class="font-medium text-gray-900 mb-1">CVE Details</h5>
                                    <p class="text-sm text-gray-600">ID: ${vuln.cve_id}</p>
                                    <p class="text-sm text-gray-600">CVSS Score: ${vuln.cvss_score || 'N/A'}</p>
                                    <p class="text-sm text-gray-600">Severity: ${vuln.severity || 'Unknown'}</p>
                                </div>
                                <div>
                                    <h5 class="font-medium text-gray-900 mb-1">Affected System</h5>
                                    <p class="text-sm text-gray-600">Package: ${vuln.affected_package}</p>
                                    <p class="text-sm text-gray-600">Version: ${vuln.installed_version}</p>
                                    <p class="text-sm text-gray-600">Published: ${this.formatDate(vuln.published_date)}</p>
                                </div>
                            </div>

                            <div class="mt-4 flex gap-2">
                                <a href="https://www.cve.org/CVERecord?id=${vuln.cve_id}"
                                   target="_blank"
                                   class="view-cve-btn inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-blue-600 hover:text-white hover:border-blue-600 transition-all duration-200">
                                    View CVE Details
                                    <svg class="ml-1 w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                    </svg>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    toggleVulnerabilityCard(button) {
        const cveId = button.dataset.cve;
        const details = document.getElementById(`details-${cveId}`);
        const icon = button.querySelector('svg');

        if (details.classList.contains('hidden')) {
            details.classList.remove('hidden');
            icon.classList.add('rotate-180');
        } else {
            details.classList.add('hidden');
            icon.classList.remove('rotate-180');
        }
    }

    getSeverityColor(severity) {
        const colors = {
            'CRITICAL': {
                border: 'border-red-500',
                badge: 'bg-red-100 text-red-800 border-red-200'
            },
            'HIGH': {
                border: 'border-orange-500',
                badge: 'bg-orange-100 text-orange-800 border-orange-200'
            },
            'MEDIUM': {
                border: 'border-yellow-500',
                badge: 'bg-yellow-100 text-yellow-800 border-yellow-200'
            },
            'LOW': {
                border: 'border-blue-500',
                badge: 'bg-blue-100 text-blue-800 border-blue-200'
            }
        };
        return colors[severity?.toUpperCase()] || {
            border: 'border-gray-500',
            badge: 'bg-gray-100 text-gray-800 border-gray-200'
        };
    }

    getCvssColor(score) {
        if (score >= 9.0) return 'text-red-600';
        if (score >= 7.0) return 'text-orange-600';
        if (score >= 4.0) return 'text-yellow-600';
        return 'text-blue-600';
    }

    formatDate(dateStr) {
        if (!dateStr) return 'Unknown';
        try {
            return new Date(dateStr).toLocaleDateString();
        } catch {
            return dateStr;
        }
    }

    updateFilterStats() {
        const statsElement = document.getElementById('filter-stats');
        if (statsElement) {
            const total = this.allVulnerabilities.length;
            const filtered = this.filteredVulnerabilities.length;
            statsElement.textContent = `Showing ${filtered} of ${total} vulnerabilities`;
        }
    }

    sortVulnerabilities(sortBy) {
        const sortFunctions = {
            'severity': (a, b) => {
                const severityOrder = { 'CRITICAL': 4, 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1, 'unknown': 0 };
                return (severityOrder[b.severity?.toUpperCase()] || 0) - (severityOrder[a.severity?.toUpperCase()] || 0);
            },
            'cvss': (a, b) => (b.cvss_score || 0) - (a.cvss_score || 0),
            'date': (a, b) => new Date(b.published_date || 0) - new Date(a.published_date || 0),
            'package': (a, b) => (a.affected_package || '').localeCompare(b.affected_package || '')
        };

        if (sortFunctions[sortBy]) {
            this.filteredVulnerabilities.sort(sortFunctions[sortBy]);
            this.renderVulnerabilities();
        }
    }

    toggleTheme() {
        document.documentElement.classList.toggle('dark');
        const isDark = document.documentElement.classList.contains('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }

    exportToPdf() {
        window.print();
    }

    exportToCsv() {
        const headers = ['CVE ID', 'Severity', 'CVSS Score', 'Package', 'Version', 'Published Date', 'Description'];
        const csvContent = [
            headers.join(','),
            ...this.filteredVulnerabilities.map(vuln => [
                vuln.cve_id,
                vuln.severity,
                vuln.cvss_score,
                vuln.affected_package,
                vuln.installed_version,
                this.formatDate(vuln.published_date),
                `"${(vuln.summary || vuln.description || '').replace(/"/g, '""')}"`
            ].join(','))
        ].join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'vulnerability-report.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }


    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
}

// Initialize the report when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.vulnerabilityReport = new VulnerabilityReport();
});
