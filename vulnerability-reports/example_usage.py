#!/usr/bin/env python3
"""
Example usage script for the Vulnerability Report Generator.
This demonstrates how to integrate the report generator with your vulnerability scanning workflow.
"""

import os
import sys
import subprocess
import json
from datetime import datetime

def run_command(command, description):
    """Run a command and handle errors."""
    print(f"🔄 {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"✅ {description} completed successfully")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"❌ {description} failed: {e}")
        print(f"Error output: {e.stderr}")
        return None

def generate_sample_data():
    """Generate sample vulnerability data for demonstration."""
    sample_data = {
        "total_vulnerabilities": 15,
        "packages_affected": 5,
        "vulnerability_breakdown": {
            "CRITICAL": 2,
            "HIGH": 4,
            "MEDIUM": 7,
            "LOW": 2,
            "unknown": 0
        },
        "high_risk_packages": [
            {
                "package": "openssl",
                "total_vulns": 4,
                "critical": 1,
                "high": 2,
                "medium": 1,
                "low": 0,
                "risk_score": 32
            },
            {
                "package": "curl",
                "total_vulns": 3,
                "critical": 0,
                "high": 1,
                "medium": 2,
                "low": 0,
                "risk_score": 15
            },
            {
                "package": "git",
                "total_vulns": 5,
                "critical": 1,
                "high": 1,
                "medium": 2,
                "low": 1,
                "risk_score": 28
            }
        ],
        "vulnerabilities": [
            {
                "cve_id": "CVE-2023-0001",
                "definition_id": "oval:org.example:def:1",
                "title": "CVE-2023-0001 openssl critical vulnerability",
                "description": "A critical buffer overflow vulnerability in OpenSSL that could allow remote code execution.",
                "affected_package": "openssl",
                "installed_version": "1.1.1f-1ubuntu2.16",
                "cvss_score": 9.8,
                "severity": "CRITICAL",
                "summary": "This vulnerability affects the SSL/TLS implementation and could be exploited by remote attackers.",
                "published_date": "2023-01-15T10:30:00Z"
            },
            {
                "cve_id": "CVE-2023-0002",
                "definition_id": "oval:org.example:def:2",
                "title": "CVE-2023-0002 curl authentication bypass",
                "description": "An authentication bypass vulnerability in curl that could allow unauthorized access.",
                "affected_package": "curl",
                "installed_version": "7.68.0-1ubuntu2.14",
                "cvss_score": 7.5,
                "severity": "HIGH",
                "summary": "This vulnerability affects HTTP authentication mechanisms in curl.",
                "published_date": "2023-02-10T14:20:00Z"
            },
            {
                "cve_id": "CVE-2023-0003",
                "definition_id": "oval:org.example:def:3",
                "title": "CVE-2023-0003 git information disclosure",
                "description": "An information disclosure vulnerability in git that could leak sensitive repository data.",
                "affected_package": "git",
                "installed_version": "2.25.1-1ubuntu3.5",
                "cvss_score": 5.3,
                "severity": "MEDIUM",
                "summary": "This vulnerability could expose sensitive information from git repositories.",
                "published_date": "2023-03-05T09:15:00Z"
            }
        ]
    }

    # Save sample data
    sample_file = "sample_vulnerabilities.json"
    with open(sample_file, 'w') as f:
        json.dump(sample_data, f, indent=2)

    print(f"📄 Generated sample data: {sample_file}")
    return sample_file

def main():
    """Main example workflow."""
    print("🚀 Vulnerability Report Generator - Example Usage")
    print("=" * 60)

    # Check if we're in the right directory
    if not os.path.exists("generate_report.py"):
        print("❌ Please run this script from the vulnerability-reports directory")
        sys.exit(1)

    # Generate sample data if no real data is available
    input_file = None
    if os.path.exists("../realistic_vulnerabilities.json"):
        input_file = "../realistic_vulnerabilities.json"
        print("📊 Using existing vulnerability data: realistic_vulnerabilities.json")
    elif os.path.exists("../comprehensive_vulnerabilities.json"):
        input_file = "../comprehensive_vulnerabilities.json"
        print("📊 Using existing vulnerability data: comprehensive_vulnerabilities.json")
    else:
        print("📊 No existing vulnerability data found, generating sample data...")
        input_file = generate_sample_data()

    # Generate timestamp for unique report names
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # Example 1: Basic report
    print("\n📋 Example 1: Basic Report")
    basic_report = f"reports/basic_report_{timestamp}.html"
    command = f"python generate_report.py -i {input_file} -o {basic_report}"
    run_command(command, "Generating basic report")

    # Example 2: Custom titled report with dark theme
    print("\n📋 Example 2: Custom Report with Dark Theme")
    custom_report = f"reports/security_audit_{timestamp}.html"
    command = f'python generate_report.py -i {input_file} -o {custom_report} -t "Security Audit Report - {datetime.now().strftime("%B %Y")}" --theme dark'
    run_command(command, "Generating custom themed report")

    # Example 3: Show file sizes and locations
    print("\n📁 Generated Reports:")
    reports_dir = "reports"
    if os.path.exists(reports_dir):
        for file in os.listdir(reports_dir):
            if file.endswith('.html'):
                file_path = os.path.join(reports_dir, file)
                file_size = os.path.getsize(file_path)
                print(f"   📄 {file} ({file_size:,} bytes)")

    # Example 4: Show how to open the report
    print("\n🌐 To view your reports:")
    print("   • Open any HTML file in your web browser")
    print("   • Use the interactive features:")
    print("     - Filter by severity, CVSS score, or search terms")
    print("     - Sort vulnerabilities by different criteria")
    print("     - Toggle between light and dark themes")
    print("     - Export to PDF or CSV")
    print("     - Expand vulnerability details")

    # Example 5: Integration example
    print("\n🔗 Integration Example:")
    print("   # In your security automation pipeline:")
    print("   1. Run vulnerability scan:")
    print("      python ../comprehensive_vulnerability_checker.py --vuls-result scan.json --output vulns.json")
    print("   2. Generate report:")
    print("      python generate_report.py -i vulns.json -o reports/daily_security_report.html")
    print("   3. Share or archive the HTML report")

    print("\n✨ Example completed successfully!")
    print("🔍 Check the 'reports/' directory for your generated HTML files")

if __name__ == "__main__":
    main()
