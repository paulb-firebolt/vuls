{
  "config": {
    "lang": ["en"],
    "separator": "[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])",
    "pipeline": ["stopWordFilter"]
  },
  "docs": [
    {
      "location": "",
      "title": "Vuls Vulnerability Management System",
      "text": "<p>Welcome to the comprehensive documentation for the Vuls Vulnerability Management System - a powerful, containerized solution for automated vulnerability scanning, analysis, and reporting.</p>"
    },
    {
      "location": "#quick-start",
      "title": "\ud83d\ude80 Quick Start",
      "text": "<p>Get up and running with Vuls in minutes:</p> <pre><code># Clone the repository\ngit clone https://github.com/your-org/vuls-vulnerability-scanner.git\ncd vuls-vulnerability-scanner\n\n# Start the complete stack\ndocker compose --profile web up -d\n\n# Access the web interface\nopen http://localhost:8000\n</code></pre>"
    },
    {
      "location": "#what-is-vuls",
      "title": "\ud83c\udfaf What is Vuls?",
      "text": "<p>Vuls is a comprehensive vulnerability management platform that combines:</p> <ul> <li>Automated Scanning: Regular vulnerability assessments using OVAL and GOST databases</li> <li>Web Interface: Modern, responsive dashboard for managing hosts and scans</li> <li>Advanced Reporting: Interactive HTML reports with charts and filtering</li> <li>Multi-Database Support: Integration with CVE, OVAL, GOST, and custom databases</li> <li>Container-First: Fully containerized with Docker Compose orchestration</li> </ul>"
    },
    {
      "location": "#system-architecture",
      "title": "\ud83c\udfd7\ufe0f System Architecture",
      "text": "<pre><code>graph TB\n    A[Web Interface] --&gt; B[FastAPI Backend]\n    B --&gt; C[PostgreSQL Database]\n    B --&gt; D[Celery Workers]\n    D --&gt; E[Vuls Scanner]\n    E --&gt; F[OVAL Database]\n    E --&gt; G[GOST Database]\n    E --&gt; H[CVE Database]\n\n    I[Target Systems] --&gt; E\n    E --&gt; J[Scan Results]\n    J --&gt; K[Report Generator]\n    K --&gt; L[HTML Reports]</code></pre>"
    },
    {
      "location": "#key-features",
      "title": "\ud83d\udcca Key Features",
      "text": ""
    },
    {
      "location": "#vulnerability-scanning",
      "title": "\ud83d\udd0d Vulnerability Scanning",
      "text": "<ul> <li>Support for Ubuntu, Debian, RHEL, CentOS, and Amazon Linux</li> <li>OVAL and GOST database integration</li> <li>Intelligent package filtering (206+ high-risk packages)</li> <li>Version comparison with Debian-style versioning support</li> </ul>"
    },
    {
      "location": "#web-management",
      "title": "\ud83c\udf10 Web Management",
      "text": "<ul> <li>Modern React-like interface with TailwindCSS</li> <li>Host management with SSH configuration</li> <li>Real-time scan monitoring</li> <li>User authentication and authorization</li> </ul>"
    },
    {
      "location": "#advanced-analytics",
      "title": "\ud83d\udcc8 Advanced Analytics",
      "text": "<ul> <li>Interactive vulnerability dashboards</li> <li>Severity distribution charts</li> <li>Timeline analysis</li> <li>Package risk scoring</li> <li>Export capabilities (PDF, CSV, JSON)</li> </ul>"
    },
    {
      "location": "#container-integration",
      "title": "\ud83d\udc33 Container Integration",
      "text": "<ul> <li>Docker Compose orchestration</li> <li>Service profiles for different deployment scenarios</li> <li>Volume mapping for data persistence</li> <li>Environment-based configuration</li> </ul>"
    },
    {
      "location": "#documentation-sections",
      "title": "\ud83d\udcda Documentation Sections",
      "text": ""
    },
    {
      "location": "#getting-started",
      "title": "Getting Started",
      "text": "<p>Learn how to install, configure, and run your first vulnerability scan.</p>"
    },
    {
      "location": "#user-guide",
      "title": "User Guide",
      "text": "<p>Comprehensive guides for daily operations, including monthly scanning workflows and report generation.</p>"
    },
    {
      "location": "#development",
      "title": "Development",
      "text": "<p>Technical documentation for developers, including architecture details and API references.</p>"
    },
    {
      "location": "#reference",
      "title": "Reference",
      "text": "<p>Database schemas, configuration options, troubleshooting guides, and version history.</p>"
    },
    {
      "location": "#deployment",
      "title": "Deployment",
      "text": "<p>Production deployment guides, Docker setup, and security best practices.</p>"
    },
    {
      "location": "#interactive-reports",
      "title": "\ud83c\udfa8 Interactive Reports",
      "text": "<p>Our vulnerability reports feature:</p> <ul> <li>Real-time Filtering: Search and filter by CVE, package, severity</li> <li>Visual Analytics: Charts showing vulnerability distribution and trends</li> <li>Export Options: PDF, CSV, and JSON export capabilities</li> <li>Mobile Responsive: Works on all devices</li> <li>Dark/Light Themes: User preference support</li> </ul>"
    },
    {
      "location": "#supported-operating-systems",
      "title": "\ud83d\udd27 Supported Operating Systems",
      "text": "OS Versions OVAL Support GOST Support Ubuntu 20.04, 22.04, 24.04 LTS \u2705 \u2705 Debian 10, 11, 12 \u2705 \u274c RHEL/CentOS 7, 8, 9 \u2705 \u274c Amazon Linux 1, 2, 2023 \u2705 \u274c <p>End-of-Life Systems</p> <p>Ubuntu 16.04/18.04 and Debian 8/9 are no longer supported by vulnerability databases. Consider upgrading to supported versions for accurate scanning.</p>"
    },
    {
      "location": "#system-status",
      "title": "\ud83d\udea6 System Status",
      "text": "<p>The system provides comprehensive monitoring:</p> <ul> <li>Database Health: OVAL, GOST, and CVE database status</li> <li>Scan Progress: Real-time scan execution monitoring</li> <li>Host Connectivity: SSH and cloud proxy connection status</li> <li>Report Generation: Background report processing status</li> </ul>"
    },
    {
      "location": "#contributing",
      "title": "\ud83e\udd1d Contributing",
      "text": "<p>We welcome contributions! See our Contributing Guide for:</p> <ul> <li>Development environment setup</li> <li>Code style guidelines</li> <li>Testing procedures</li> <li>Pull request process</li> </ul>"
    },
    {
      "location": "#support",
      "title": "\ud83d\udcde Support",
      "text": "<ul> <li>Documentation: Browse the sections above for detailed guides</li> <li>Issues: Report bugs and feature requests on GitHub</li> <li>Discussions: Join community discussions for help and ideas</li> </ul>"
    },
    {
      "location": "#security",
      "title": "\ud83d\udd12 Security",
      "text": "<p>Security is our priority:</p> <ul> <li>JWT-based authentication</li> <li>Encrypted database connections</li> <li>Secure SSH key management</li> <li>Container isolation</li> <li>Regular security updates</li> </ul> <p>Ready to get started? Head to the Installation Guide to set up your vulnerability management system.</p>"
    },
    {
      "location": "deployment/",
      "title": "Deployment Guide",
      "text": "<p>This guide covers deploying the Vuls Web application with the complete scheduling system, including the secure Docker Executor Sidecar architecture.</p>"
    },
    {
      "location": "deployment/#architecture-overview",
      "title": "Architecture Overview",
      "text": "<p>The Vuls Web application uses a microservices architecture with the following components:</p>"
    },
    {
      "location": "deployment/#core-services",
      "title": "Core Services",
      "text": "<ul> <li>Web Application (<code>vuls-web-dev</code>) - Main web interface and API</li> <li>PostgreSQL Database (<code>vuls-db</code>) - Application data storage</li> <li>Redis (<code>vuls-redis</code>) - Message broker and cache</li> <li>Celery Worker (<code>vuls-worker</code>) - Background task processing</li> <li>Celery Beat Scheduler (<code>vuls-scheduler</code>) - Cron-based task scheduling</li> <li>Docker Executor Sidecar (<code>vuls-executor</code>) - Secure Docker operations</li> </ul>"
    },
    {
      "location": "deployment/#security-architecture",
      "title": "Security Architecture",
      "text": "<p>The system implements a sidecar pattern for enhanced security:</p> <ul> <li>Isolated Execution - All Docker operations run in a separate container</li> <li>API-Based Communication - Secure API communication using API keys</li> <li>Function-Based Endpoints - Only predefined operations allowed</li> <li>Non-Root Execution - All containers run with minimal privileges</li> </ul>"
    },
    {
      "location": "deployment/#prerequisites",
      "title": "Prerequisites",
      "text": "<ul> <li>Docker and Docker Compose</li> <li>Sufficient disk space for vulnerability databases (10+ GB recommended)</li> <li>Network access for downloading vulnerability data</li> <li>SSH access to target hosts (for scanning)</li> </ul>"
    },
    {
      "location": "deployment/#quick-start",
      "title": "Quick Start",
      "text": ""
    },
    {
      "location": "deployment/#1-clone-and-setup",
      "title": "1. Clone and Setup",
      "text": "<pre><code>git clone &lt;repository-url&gt;\ncd vuls\n</code></pre>"
    },
    {
      "location": "deployment/#2-configure-environment",
      "title": "2. Configure Environment",
      "text": "<p>Create a <code>.env</code> file with secure configuration:</p> <pre><code># Generate a secure API key\nEXECUTOR_API_KEY=$(openssl rand -hex 32)\necho \"EXECUTOR_API_KEY=$EXECUTOR_API_KEY\" &gt; .env\n</code></pre>"
    },
    {
      "location": "deployment/#3-start-development-environment",
      "title": "3. Start Development Environment",
      "text": "<pre><code># Start all services including scheduler\ndocker compose --profile dev up -d\n\n# Check service status\ndocker compose --profile dev ps\n</code></pre>"
    },
    {
      "location": "deployment/#4-initialize-database",
      "title": "4. Initialize Database",
      "text": "<pre><code># The database will be automatically initialized on first startup\n# Check logs to ensure successful initialization\ndocker compose logs vuls-web-dev\n</code></pre>"
    },
    {
      "location": "deployment/#5-access-the-application",
      "title": "5. Access the Application",
      "text": "<ul> <li>Web Interface: http://localhost:8000</li> <li>Scheduler: http://localhost:8000/scheduler</li> <li>API Documentation: http://localhost:8000/docs</li> </ul>"
    },
    {
      "location": "deployment/#production-deployment",
      "title": "Production Deployment",
      "text": ""
    },
    {
      "location": "deployment/#1-environment-configuration",
      "title": "1. Environment Configuration",
      "text": "<p>Create a production <code>.env</code> file:</p> <pre><code># Security\nEXECUTOR_API_KEY=your-secure-api-key-here\nJWT_SECRET_KEY=your-jwt-secret-key-here\n\n# Database\nDATABASE_URL=postgresql+psycopg://vuls:your-db-password@vuls-db:5432/vuls\n\n# Redis\nREDIS_URL=redis://vuls-redis:6379\n\n# Optional: External database\n# DATABASE_URL=postgresql+psycopg://user:pass@external-db:5432/vuls\n</code></pre>"
    },
    {
      "location": "deployment/#2-production-compose-override",
      "title": "2. Production Compose Override",
      "text": "<p>Create <code>docker-compose.prod.yml</code>:</p> <pre><code>version: \"3.8\"\n\nservices:\n  vuls-web:\n    build: ./web-app\n    container_name: vuls-web-prod\n    ports:\n      - \"80:8000\"\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n      - REDIS_URL=${REDIS_URL}\n      - JWT_SECRET_KEY=${JWT_SECRET_KEY}\n    restart: unless-stopped\n\n  vuls-worker:\n    restart: unless-stopped\n    environment:\n      - EXECUTOR_URL=http://vuls-executor:8080\n      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY}\n\n  vuls-scheduler:\n    restart: unless-stopped\n\n  vuls-executor:\n    restart: unless-stopped\n    environment:\n      - EXECUTOR_API_KEY=${EXECUTOR_API_KEY}\n\n  vuls-db:\n    restart: unless-stopped\n    volumes:\n      - vuls_db_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=your-secure-db-password\n\n  vuls-redis:\n    restart: unless-stopped\n</code></pre>"
    },
    {
      "location": "deployment/#3-start-production-services",
      "title": "3. Start Production Services",
      "text": "<pre><code># Start production environment\ndocker compose -f compose.yml -f docker-compose.prod.yml --profile web up -d\n\n# Verify all services are running\ndocker compose ps\n</code></pre>"
    },
    {
      "location": "deployment/#service-configuration",
      "title": "Service Configuration",
      "text": ""
    },
    {
      "location": "deployment/#docker-executor-sidecar",
      "title": "Docker Executor Sidecar",
      "text": "<p>The executor sidecar requires specific configuration for secure operation:</p>"
    },
    {
      "location": "deployment/#environment-variables",
      "title": "Environment Variables",
      "text": "<pre><code># Required\nEXECUTOR_API_KEY=your-secure-api-key\n\n# Optional\nEXECUTOR_PORT=8080\nEXECUTOR_HOST=0.0.0.0\n</code></pre>"
    },
    {
      "location": "deployment/#volume-mounts",
      "title": "Volume Mounts",
      "text": "<pre><code>volumes:\n  - /var/run/docker.sock:/var/run/docker.sock # Docker socket access\n  - .:/compose:ro # Compose project directory\n</code></pre>"
    },
    {
      "location": "deployment/#security-considerations",
      "title": "Security Considerations",
      "text": "<ul> <li>The executor runs as a non-root user with Docker group permissions</li> <li>Only predefined API endpoints are exposed</li> <li>All communication is secured with API keys</li> <li>No shell access or arbitrary command execution</li> </ul>"
    },
    {
      "location": "deployment/#celery-configuration",
      "title": "Celery Configuration",
      "text": ""
    },
    {
      "location": "deployment/#worker-configuration",
      "title": "Worker Configuration",
      "text": "<pre><code>environment:\n  - DATABASE_URL=${DATABASE_URL}\n  - REDIS_URL=${REDIS_URL}\n  - EXECUTOR_URL=http://vuls-executor:8080\n  - EXECUTOR_API_KEY=${EXECUTOR_API_KEY}\n</code></pre>"
    },
    {
      "location": "deployment/#scheduler-configuration",
      "title": "Scheduler Configuration",
      "text": "<pre><code>environment:\n  - DATABASE_URL=${DATABASE_URL}\n  - REDIS_URL=${REDIS_URL}\n</code></pre>"
    },
    {
      "location": "deployment/#monitoring-and-maintenance",
      "title": "Monitoring and Maintenance",
      "text": ""
    },
    {
      "location": "deployment/#health-checks",
      "title": "Health Checks",
      "text": "<p>Monitor service health using:</p> <pre><code># Check all services\ndocker compose ps\n\n# Check specific service logs\ndocker compose logs vuls-worker\ndocker compose logs vuls-executor\ndocker compose logs vuls-scheduler\n\n# Check executor health\ncurl http://localhost:8080/health\n</code></pre>"
    },
    {
      "location": "deployment/#database-maintenance",
      "title": "Database Maintenance",
      "text": "<pre><code># Backup database\ndocker exec vuls-db pg_dump -U vuls vuls &gt; backup.sql\n\n# Restore database\ndocker exec -i vuls-db psql -U vuls vuls &lt; backup.sql\n</code></pre>"
    },
    {
      "location": "deployment/#log-management",
      "title": "Log Management",
      "text": "<p>Logs are available through Docker:</p> <pre><code># View real-time logs\ndocker compose logs -f vuls-worker\n\n# View specific service logs\ndocker compose logs vuls-executor --tail 100\n</code></pre>"
    },
    {
      "location": "deployment/#security-considerations_1",
      "title": "Security Considerations",
      "text": ""
    },
    {
      "location": "deployment/#api-key-management",
      "title": "API Key Management",
      "text": "<ul> <li>Generate strong, unique API keys for production</li> <li>Rotate API keys regularly</li> <li>Store keys securely (environment variables, secrets management)</li> <li>Never commit API keys to version control</li> </ul>"
    },
    {
      "location": "deployment/#network-security",
      "title": "Network Security",
      "text": "<ul> <li>Use reverse proxy (nginx, traefik) for production</li> <li>Enable HTTPS/TLS encryption</li> <li>Restrict network access to necessary ports only</li> <li>Use firewall rules to limit access</li> </ul>"
    },
    {
      "location": "deployment/#container-security",
      "title": "Container Security",
      "text": "<ul> <li>All containers run as non-root users</li> <li>Minimal base images used</li> <li>Regular security updates applied</li> <li>No unnecessary privileges granted</li> </ul>"
    },
    {
      "location": "deployment/#database-security",
      "title": "Database Security",
      "text": "<ul> <li>Use strong database passwords</li> <li>Enable database encryption at rest</li> <li>Regular database backups</li> <li>Restrict database network access</li> </ul>"
    },
    { "location": "deployment/#scaling", "title": "Scaling", "text": "" },
    {
      "location": "deployment/#horizontal-scaling",
      "title": "Horizontal Scaling",
      "text": "<p>Scale Celery workers for increased throughput:</p> <pre><code># Scale workers\ndocker compose up -d --scale vuls-worker=3\n\n# Monitor worker performance\ndocker compose logs vuls-worker\n</code></pre>"
    },
    {
      "location": "deployment/#resource-allocation",
      "title": "Resource Allocation",
      "text": "<p>Adjust resource limits in compose files:</p> <pre><code>services:\n  vuls-worker:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n          cpus: \"1.0\"\n        reservations:\n          memory: 1G\n          cpus: \"0.5\"\n</code></pre>"
    },
    {
      "location": "deployment/#backup-and-recovery",
      "title": "Backup and Recovery",
      "text": ""
    },
    {
      "location": "deployment/#database-backup",
      "title": "Database Backup",
      "text": "<pre><code># Automated backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\ndocker exec vuls-db pg_dump -U vuls vuls | gzip &gt; \"backup_${DATE}.sql.gz\"\n</code></pre>"
    },
    {
      "location": "deployment/#configuration-backup",
      "title": "Configuration Backup",
      "text": "<pre><code># Backup configuration files\ntar -czf config_backup.tar.gz config/ .env compose.yml\n</code></pre>"
    },
    {
      "location": "deployment/#recovery-procedure",
      "title": "Recovery Procedure",
      "text": "<ol> <li>Stop all services</li> <li>Restore database from backup</li> <li>Restore configuration files</li> <li>Restart services</li> <li>Verify system functionality</li> </ol>"
    },
    {
      "location": "deployment/#troubleshooting",
      "title": "Troubleshooting",
      "text": ""
    },
    {
      "location": "deployment/#common-issues",
      "title": "Common Issues",
      "text": ""
    },
    {
      "location": "deployment/#services-not-starting",
      "title": "Services Not Starting",
      "text": "<pre><code># Check service status\ndocker compose ps\n\n# Check logs for errors\ndocker compose logs\n\n# Restart specific service\ndocker compose restart vuls-worker\n</code></pre>"
    },
    {
      "location": "deployment/#database-connection-issues",
      "title": "Database Connection Issues",
      "text": "<pre><code># Check database connectivity\ndocker exec vuls-web-dev python -c \"\nfrom app.config import settings\nprint('Database URL:', settings.database_url)\n\"\n\n# Test database connection\ndocker exec vuls-db psql -U vuls -c \"SELECT version();\"\n</code></pre>"
    },
    {
      "location": "deployment/#executor-sidecar-issues",
      "title": "Executor Sidecar Issues",
      "text": "<pre><code># Check executor health\ncurl http://localhost:8080/health\n\n# Check executor logs\ndocker compose logs vuls-executor\n\n# Verify API key configuration\ndocker exec vuls-worker env | grep EXECUTOR\n</code></pre>"
    },
    {
      "location": "deployment/#task-execution-failures",
      "title": "Task Execution Failures",
      "text": "<pre><code># Check worker logs\ndocker compose logs vuls-worker\n\n# Check Redis connectivity\ndocker exec vuls-worker python -c \"\nimport redis\nr = redis.from_url('redis://vuls-redis:6379')\nprint('Redis ping:', r.ping())\n\"\n\n# Monitor task queue\ndocker exec vuls-worker celery -A app.tasks inspect active\n</code></pre>"
    },
    {
      "location": "deployment/#performance-optimization",
      "title": "Performance Optimization",
      "text": ""
    },
    {
      "location": "deployment/#database-performance",
      "title": "Database Performance",
      "text": "<ul> <li>Regular VACUUM and ANALYZE operations</li> <li>Appropriate indexing for query patterns</li> <li>Connection pooling configuration</li> <li>Query optimization</li> </ul>"
    },
    {
      "location": "deployment/#worker-performance",
      "title": "Worker Performance",
      "text": "<ul> <li>Adjust worker concurrency based on CPU cores</li> <li>Monitor memory usage and adjust limits</li> <li>Use appropriate task routing</li> <li>Implement task result expiration</li> </ul>"
    },
    {
      "location": "deployment/#storage-optimization",
      "title": "Storage Optimization",
      "text": "<ul> <li>Regular cleanup of old task results</li> <li>Compress vulnerability database files</li> <li>Use appropriate storage drivers</li> <li>Monitor disk usage</li> </ul>"
    },
    {
      "location": "deployment/#support",
      "title": "Support",
      "text": "<p>For additional support:</p> <ol> <li>Check the troubleshooting section above</li> <li>Review service logs for error messages</li> <li>Consult the user guide documentation</li> <li>Contact your system administrator</li> </ol>"
    },
    {
      "location": "deployment/#updates-and-maintenance",
      "title": "Updates and Maintenance",
      "text": ""
    },
    {
      "location": "deployment/#updating-the-application",
      "title": "Updating the Application",
      "text": "<pre><code># Pull latest changes\ngit pull origin main\n\n# Rebuild and restart services\ndocker compose --profile dev up -d --build\n\n# Check for any migration requirements\ndocker compose logs vuls-web-dev | grep -i migration\n</code></pre>"
    },
    {
      "location": "deployment/#security-updates",
      "title": "Security Updates",
      "text": "<ul> <li>Regularly update base Docker images</li> <li>Apply security patches to the host system</li> <li>Update dependency packages</li> <li>Review and rotate API keys</li> </ul>"
    },
    {
      "location": "deployment/#monitoring",
      "title": "Monitoring",
      "text": "<p>Set up monitoring for:</p> <ul> <li>Service availability and health</li> <li>Resource usage (CPU, memory, disk)</li> <li>Task execution success rates</li> <li>Database performance metrics</li> <li>Security events and access logs</li> </ul>"
    },
    {
      "location": "development/",
      "title": "Development",
      "text": "<p>This section provides technical documentation for developers working on the Vuls Vulnerability Management System.</p>"
    },
    {
      "location": "development/#overview",
      "title": "Overview",
      "text": "<p>The Vuls system is built with modern technologies and follows best practices for containerized applications. Whether you're contributing to the core system, developing integrations, or customizing the platform, this section will guide you through the development process.</p>"
    },
    {
      "location": "development/#what-youll-find-here",
      "title": "What You'll Find Here",
      "text": ""
    },
    {
      "location": "development/#architecture",
      "title": "Architecture",
      "text": "<p>Comprehensive overview of the system architecture, including:</p> <ul> <li>System components and their interactions</li> <li>Database design and relationships</li> <li>Container orchestration with Docker Compose</li> <li>API design patterns and conventions</li> <li>Security architecture and authentication flows</li> </ul>"
    },
    {
      "location": "development/#web-application-development",
      "title": "Web Application Development",
      "text": "<p>Detailed guide for developing the web interface:</p> <ul> <li>Development environment setup with hot reload</li> <li>FastAPI backend development</li> <li>Frontend development with TailwindCSS and Alpine.js</li> <li>Database models and migrations</li> <li>Authentication and authorization implementation</li> </ul>"
    },
    {
      "location": "development/#api-reference",
      "title": "API Reference",
      "text": "<p>Complete API documentation:</p> <ul> <li>RESTful endpoint specifications</li> <li>Authentication and authorization</li> <li>Request/response formats</li> <li>Error handling and status codes</li> <li>Integration examples and SDKs</li> </ul>"
    },
    {
      "location": "development/#contributing",
      "title": "Contributing",
      "text": "<p>Guidelines for contributing to the project:</p> <ul> <li>Development workflow and Git practices</li> <li>Code style and formatting standards</li> <li>Testing procedures and requirements</li> <li>Pull request process and review guidelines</li> <li>Community guidelines and communication</li> </ul>"
    },
    {
      "location": "development/#task-scheduler-fix",
      "title": "Task Scheduler Fix",
      "text": "<p>Documentation of the Docker executor implementation fix:</p> <ul> <li>Problem analysis and root cause identification</li> <li>Solution implementation with direct Docker run commands</li> <li>Dynamic path resolution for containerized environments</li> <li>Testing and verification procedures</li> <li>Troubleshooting guide for SSH connectivity issues</li> </ul>"
    },
    {
      "location": "development/#real-time-websocket-system",
      "title": "Real-Time WebSocket System",
      "text": "<p>Documentation of the real-time notification system:</p> <ul> <li>WebSocket architecture and Redis pub/sub implementation</li> <li>Real-time task completion notifications</li> <li>Performance improvements over polling-based updates</li> <li>Configuration and troubleshooting guide</li> <li>Security considerations and future enhancements</li> </ul>"
    },
    {
      "location": "development/#technology-stack",
      "title": "Technology Stack",
      "text": ""
    },
    {
      "location": "development/#backend-technologies",
      "title": "Backend Technologies",
      "text": "<ul> <li>FastAPI: Modern, fast web framework for building APIs</li> <li>SQLAlchemy: SQL toolkit and Object-Relational Mapping (ORM)</li> <li>PostgreSQL: Primary application database</li> <li>SQLite: Vulnerability databases (OVAL, GOST, CVE)</li> <li>Celery: Distributed task queue for background processing</li> <li>Redis: Message broker and caching</li> </ul>"
    },
    {
      "location": "development/#frontend-technologies",
      "title": "Frontend Technologies",
      "text": "<ul> <li>TailwindCSS: Utility-first CSS framework</li> <li>Alpine.js: Lightweight JavaScript framework</li> <li>Chart.js: Interactive charts and visualizations</li> <li>Jinja2: Template engine for server-side rendering</li> </ul>"
    },
    {
      "location": "development/#infrastructure",
      "title": "Infrastructure",
      "text": "<ul> <li>Docker: Containerization platform</li> <li>Docker Compose: Multi-container orchestration</li> <li>uv: Fast Python package manager</li> <li>MkDocs Material: Documentation site generator</li> </ul>"
    },
    {
      "location": "development/#development-principles",
      "title": "Development Principles",
      "text": ""
    },
    {
      "location": "development/#code-quality",
      "title": "Code Quality",
      "text": "<ul> <li>Type Hints: Full Python type annotation</li> <li>Linting: Automated code quality checks</li> <li>Testing: Comprehensive test coverage</li> <li>Documentation: Inline and external documentation</li> </ul>"
    },
    {
      "location": "development/#security-first",
      "title": "Security First",
      "text": "<ul> <li>Input Validation: Strict input sanitization</li> <li>Authentication: JWT-based secure authentication</li> <li>Authorization: Role-based access control</li> <li>Secrets Management: Secure handling of sensitive data</li> </ul>"
    },
    {
      "location": "development/#performance",
      "title": "Performance",
      "text": "<ul> <li>Async Operations: Non-blocking I/O operations</li> <li>Database Optimization: Efficient queries and indexing</li> <li>Caching: Strategic use of caching layers</li> <li>Resource Management: Efficient container resource usage</li> </ul>"
    },
    {
      "location": "development/#maintainability",
      "title": "Maintainability",
      "text": "<ul> <li>Modular Design: Clear separation of concerns</li> <li>Configuration Management: Environment-based configuration</li> <li>Logging: Comprehensive logging and monitoring</li> <li>Error Handling: Graceful error handling and recovery</li> </ul>"
    },
    {
      "location": "development/#development-workflow",
      "title": "Development Workflow",
      "text": ""
    },
    {
      "location": "development/#1-environment-setup",
      "title": "1. Environment Setup",
      "text": "<pre><code># Clone the repository\ngit clone https://github.com/your-org/vuls-vulnerability-scanner.git\ncd vuls-vulnerability-scanner\n\n# Set up development environment\n./web-app/start-dev.sh\n\n# Install development dependencies\nuv sync --dev\n</code></pre>"
    },
    {
      "location": "development/#2-development-process",
      "title": "2. Development Process",
      "text": "<pre><code># Create feature branch\ngit checkout -b feature/new-functionality\n\n# Make changes with hot reload\n# Edit files in web-app/app/ or docs/\n\n# Test changes\nuv run pytest\n\n# Commit changes\ngit add .\ngit commit -m \"feat: add new functionality\"\n\n# Push and create pull request\ngit push origin feature/new-functionality\n</code></pre>"
    },
    {
      "location": "development/#3-testing",
      "title": "3. Testing",
      "text": "<pre><code># Run unit tests\nuv run pytest tests/\n\n# Run integration tests\nuv run pytest tests/integration/\n\n# Run with coverage\nuv run pytest --cov=app tests/\n\n# Run specific test file\nuv run pytest tests/test_vulnerabilities.py\n</code></pre>"
    },
    {
      "location": "development/#architecture-overview",
      "title": "Architecture Overview",
      "text": "<pre><code>graph TB\n    subgraph \"Frontend Layer\"\n        A[Web Interface]\n        B[API Client]\n    end\n\n    subgraph \"Application Layer\"\n        C[FastAPI Backend]\n        D[Authentication]\n        E[API Endpoints]\n    end\n\n    subgraph \"Business Logic Layer\"\n        F[Vulnerability Scanner]\n        G[Report Generator]\n        H[Host Manager]\n    end\n\n    subgraph \"Data Layer\"\n        I[PostgreSQL]\n        J[SQLite Databases]\n        K[File Storage]\n    end\n\n    subgraph \"Infrastructure Layer\"\n        L[Docker Containers]\n        M[Background Workers]\n        N[Message Queue]\n    end\n\n    A --&gt; C\n    B --&gt; C\n    C --&gt; D\n    C --&gt; E\n    E --&gt; F\n    E --&gt; G\n    E --&gt; H\n    F --&gt; J\n    G --&gt; I\n    H --&gt; I\n    C --&gt; L\n    F --&gt; M\n    M --&gt; N</code></pre>"
    },
    {
      "location": "development/#key-components",
      "title": "Key Components",
      "text": ""
    },
    {
      "location": "development/#vulnerability-scanner-engine",
      "title": "Vulnerability Scanner Engine",
      "text": "<ul> <li>OVAL Integration: Operating system vulnerability definitions</li> <li>GOST Integration: Go Security Tracker for Ubuntu-specific data</li> <li>CVE Database: Common Vulnerabilities and Exposures</li> <li>Version Comparison: Intelligent package version analysis</li> </ul>"
    },
    {
      "location": "development/#web-application-framework",
      "title": "Web Application Framework",
      "text": "<ul> <li>RESTful API: Clean, consistent API design</li> <li>Real-time Updates: WebSocket integration for live updates</li> <li>Responsive UI: Mobile-friendly interface design</li> <li>Interactive Reports: Dynamic charts and filtering</li> </ul>"
    },
    {
      "location": "development/#database-architecture",
      "title": "Database Architecture",
      "text": "<ul> <li>Application Data: User accounts, hosts, scan metadata</li> <li>Vulnerability Data: CVE details, OVAL definitions, GOST data</li> <li>Relationships: Proper foreign key constraints and indexing</li> <li>Migrations: Version-controlled schema changes</li> </ul>"
    },
    {
      "location": "development/#background-processing",
      "title": "Background Processing",
      "text": "<ul> <li>Scan Orchestration: Automated vulnerability scanning</li> <li>Report Generation: Background report processing</li> <li>Database Updates: Scheduled vulnerability database updates</li> <li>Cleanup Tasks: Automated maintenance and archival</li> </ul>"
    },
    {
      "location": "development/#development-tools",
      "title": "Development Tools",
      "text": ""
    },
    {
      "location": "development/#code-quality-tools",
      "title": "Code Quality Tools",
      "text": "<pre><code># Format code\nuv run black .\nuv run isort .\n\n# Lint code\nuv run flake8 .\nuv run mypy .\n\n# Security scanning\nuv run bandit -r app/\n</code></pre>"
    },
    {
      "location": "development/#database-tools",
      "title": "Database Tools",
      "text": "<pre><code># Create migration\nuv run alembic revision --autogenerate -m \"description\"\n\n# Apply migrations\nuv run alembic upgrade head\n\n# Database shell\ndocker exec -it vuls-db psql -U vuls -d vuls\n</code></pre>"
    },
    {
      "location": "development/#documentation-tools",
      "title": "Documentation Tools",
      "text": "<pre><code># Serve documentation locally\nuv run mkdocs serve\n\n# Build documentation\nuv run mkdocs build\n\n# Deploy documentation\nuv run mkdocs gh-deploy\n</code></pre>"
    },
    {
      "location": "development/#integration-points",
      "title": "Integration Points",
      "text": ""
    },
    {
      "location": "development/#external-systems",
      "title": "External Systems",
      "text": "<ul> <li>SIEM Integration: Forward vulnerability data to security systems</li> <li>Ticketing Systems: Create tickets for vulnerability remediation</li> <li>Configuration Management: Track system changes and updates</li> <li>Monitoring Systems: Health checks and performance metrics</li> </ul>"
    },
    {
      "location": "development/#api-integrations",
      "title": "API Integrations",
      "text": "<ul> <li>REST API: Full programmatic access to functionality</li> <li>Webhooks: Event-driven notifications and updates</li> <li>Bulk Operations: Efficient handling of large datasets</li> <li>Rate Limiting: Protect against abuse and overload</li> </ul>"
    },
    {
      "location": "development/#performance-considerations",
      "title": "Performance Considerations",
      "text": ""
    },
    {
      "location": "development/#scalability",
      "title": "Scalability",
      "text": "<ul> <li>Horizontal Scaling: Multiple worker containers</li> <li>Database Optimization: Proper indexing and query optimization</li> <li>Caching Strategy: Redis for frequently accessed data</li> <li>Load Balancing: Distribute requests across instances</li> </ul>"
    },
    {
      "location": "development/#resource-management",
      "title": "Resource Management",
      "text": "<ul> <li>Memory Usage: Efficient data structures and garbage collection</li> <li>CPU Utilization: Async operations and worker pools</li> <li>Disk I/O: Optimized database queries and file operations</li> <li>Network: Efficient API design and data transfer</li> </ul>"
    },
    {
      "location": "development/#security-considerations",
      "title": "Security Considerations",
      "text": ""
    },
    {
      "location": "development/#application-security",
      "title": "Application Security",
      "text": "<ul> <li>Input Validation: Comprehensive input sanitization</li> <li>SQL Injection Prevention: Parameterized queries and ORM usage</li> <li>XSS Protection: Template auto-escaping and CSP headers</li> <li>CSRF Protection: Token-based request validation</li> </ul>"
    },
    {
      "location": "development/#infrastructure-security",
      "title": "Infrastructure Security",
      "text": "<ul> <li>Container Security: Minimal base images and security scanning</li> <li>Network Security: Proper firewall rules and network isolation</li> <li>Secrets Management: Environment variables and secret stores</li> <li>Access Control: Role-based permissions and audit logging</li> </ul>"
    },
    {
      "location": "development/#getting-started",
      "title": "Getting Started",
      "text": "<p>Ready to start developing? Here's your next steps:</p> <ol> <li>Set up your development environment - Get the development stack running</li> <li>Understand the architecture - Learn how the system works</li> <li>Review the API documentation - Understand the available endpoints</li> <li>Read the contributing guidelines - Learn our development practices</li> </ol>"
    },
    {
      "location": "development/#community",
      "title": "Community",
      "text": "<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Discussions: Ask questions and share ideas</li> <li>Pull Requests: Contribute code and documentation</li> <li>Code Reviews: Participate in the review process</li> </ul> <p>Ready to contribute? Start with the Web Application Development Guide to set up your development environment.</p>"
    },
    {
      "location": "development/alembic-migration-setup/",
      "title": "Alembic Database Migration Setup",
      "text": "<p>This document explains how Alembic has been retrospectively added to the Vuls Web application to manage database migrations.</p>"
    },
    {
      "location": "development/alembic-migration-setup/#overview",
      "title": "Overview",
      "text": "<p>Alembic is a database migration tool for SQLAlchemy that allows you to manage database schema changes over time. It has been successfully added to this project even though the database already contained data.</p>"
    },
    {
      "location": "development/alembic-migration-setup/#what-was-done",
      "title": "What Was Done",
      "text": ""
    },
    {
      "location": "development/alembic-migration-setup/#initial-setup",
      "title": "Initial Setup",
      "text": "<ul> <li>Alembic was already configured in <code>alembic.ini</code> with the correct database connection</li> <li>The <code>alembic/</code> directory was initialized with migration scripts</li> <li>The <code>env.py</code> file was configured to import your SQLAlchemy models</li> </ul>"
    },
    {
      "location": "development/alembic-migration-setup/#baseline-migration",
      "title": "Baseline Migration",
      "text": "<ul> <li>Created an initial migration (<code>20a5eb9f1fd1_initial_migration_baseline_from_.py</code>) that captures the current database state</li> <li>This migration contains only <code>pass</code> statements because your models and database schema were already in sync</li> <li>The database was \"stamped\" with this migration version using <code>alembic stamp head</code></li> </ul>"
    },
    {
      "location": "development/alembic-migration-setup/#verification",
      "title": "Verification",
      "text": "<ul> <li>Alembic now tracks the current database version in the <code>alembic_version</code> table</li> <li>Future migrations will be applied incrementally from this baseline</li> </ul>"
    },
    {
      "location": "development/alembic-migration-setup/#usage",
      "title": "Usage",
      "text": ""
    },
    {
      "location": "development/alembic-migration-setup/#creating-new-migrations",
      "title": "Creating New Migrations",
      "text": "<p>When you modify your SQLAlchemy models, create a new migration:</p> <pre><code>cd web-app\ndocker run --rm -v $(pwd):/app -w /app --network vuls_default \\\n  -e DATABASE_URL=postgresql+psycopg://vuls:SuperSecretKey@vuls-db:5432/vuls \\\n  $(docker build -q -f Dockerfile.dev .) \\\n  bash -c \"uv run alembic revision --autogenerate -m 'Description of your changes'\"\n</code></pre>"
    },
    {
      "location": "development/alembic-migration-setup/#applying-migrations",
      "title": "Applying Migrations",
      "text": "<p>To apply pending migrations to the database:</p> <pre><code># Apply all pending migrations\ndocker run --rm -v $(pwd):/app -w /app --network vuls_default \\\n  -e DATABASE_URL=postgresql+psycopg://vuls:SuperSecretKey@vuls-db:5432/vuls \\\n  $(docker build -q -f Dockerfile.dev .) \\\n  bash -c \"uv run alembic upgrade head\"\n</code></pre>"
    },
    {
      "location": "development/alembic-migration-setup/#rolling-back-migrations",
      "title": "Rolling Back Migrations",
      "text": "<p>To rollback to a previous migration:</p> <pre><code># Rollback to previous migration\ndocker run --rm -v $(pwd):/app -w /app --network vuls_default \\\n  -e DATABASE_URL=postgresql+psycopg://vuls:SuperSecretKey@vuls-db:5432/vuls \\\n  $(docker build -q -f Dockerfile.dev .) \\\n  bash -c \"uv run alembic downgrade -1\"\n</code></pre>"
    },
    {
      "location": "development/alembic-migration-setup/#checking-migration-status",
      "title": "Checking Migration Status",
      "text": "<pre><code># Show current migration version\ndocker run --rm -v $(pwd):/app -w /app --network vuls_default \\\n  -e DATABASE_URL=postgresql+psycopg://vuls:SuperSecretKey@vuls-db:5432/vuls \\\n  $(docker build -q -f Dockerfile.dev .) \\\n  bash -c \"uv run alembic current\"\n</code></pre>"
    },
    {
      "location": "development/alembic-migration-setup/#best-practices",
      "title": "Best Practices",
      "text": ""
    },
    {
      "location": "development/alembic-migration-setup/#always-review-generated-migrations",
      "title": "Always Review Generated Migrations",
      "text": "<ul> <li>Alembic's autogenerate feature is powerful but not perfect</li> <li>Always review the generated migration files before applying them</li> <li>Check for correct column types, foreign key constraints, and index creation/deletion</li> </ul>"
    },
    {
      "location": "development/alembic-migration-setup/#test-migrations",
      "title": "Test Migrations",
      "text": "<ul> <li>Test migrations on a copy of production data</li> <li>Ensure both upgrade and downgrade paths work</li> <li>Verify that data is preserved correctly</li> </ul>"
    },
    {
      "location": "development/alembic-migration-setup/#version-control",
      "title": "Version Control",
      "text": "<ul> <li>Always commit migration files to version control</li> <li>Never edit applied migration files</li> <li>If you need to fix a migration, create a new one</li> </ul>"
    },
    {
      "location": "development/alembic-migration-setup/#current-status",
      "title": "Current Status",
      "text": "<ul> <li>Baseline Migration: <code>20a5eb9f1fd1_initial_migration_baseline_from_</code></li> <li>Database Version: Up to date with models</li> <li>Alembic Version Table: <code>alembic_version</code> tracks current migration</li> <li>All existing data: Preserved and unaffected</li> </ul> <p>The database is now fully managed by Alembic and ready for future schema changes.</p>"
    },
    {
      "location": "development/dev-containers/",
      "title": "Development Containers",
      "text": "<p>This document explains the development container setup that provides hot reload functionality for faster development cycles.</p>"
    },
    {
      "location": "development/dev-containers/#overview",
      "title": "Overview",
      "text": "<p>The project uses a single Dockerfile per service with build arguments to create both production and development versions of containers. Development containers are designed to reload automatically when code changes are detected, eliminating the need for manual rebuilds and restarts during development.</p>"
    },
    {
      "location": "development/dev-containers/#container-types",
      "title": "Container Types",
      "text": ""
    },
    {
      "location": "development/dev-containers/#production-containers-profile-web",
      "title": "Production Containers (Profile: <code>web</code>)",
      "text": "<ul> <li><code>vuls-web</code>: Main web application</li> <li><code>vuls-worker</code>: Celery background task worker</li> <li><code>vuls-scheduler</code>: Celery beat scheduler</li> <li><code>vuls-executor</code>: Docker executor service</li> </ul>"
    },
    {
      "location": "development/dev-containers/#development-containers-profile-dev",
      "title": "Development Containers (Profile: <code>dev</code>)",
      "text": "<ul> <li><code>vuls-web-dev</code>: Web application with hot reload</li> <li><code>vuls-worker-dev</code>: Celery worker with hot reload</li> <li><code>vuls-scheduler-dev</code>: Celery scheduler with hot reload</li> <li><code>vuls-executor-dev</code>: Docker executor with hot reload</li> </ul>"
    },
    {
      "location": "development/dev-containers/#key-differences",
      "title": "Key Differences",
      "text": ""
    },
    {
      "location": "development/dev-containers/#development-features",
      "title": "Development Features",
      "text": "<ol> <li>Hot Reload: Code changes trigger automatic restarts</li> <li>Source Code Mounting: Local source code is mounted into containers</li> <li>Development Dependencies: Additional tools like watchdog for file monitoring</li> <li>Solo Pool: Celery worker uses solo pool for better debugging</li> </ol>"
    },
    {
      "location": "development/dev-containers/#volume-mounts",
      "title": "Volume Mounts",
      "text": "<p>Development containers mount source code directories:</p> <ul> <li><code>./web-app/app:/app/app:rw</code> - Python application code</li> <li><code>./docker-executor:/app:rw</code> - Executor service code</li> <li><code>./web-app/static:/app/static:rw</code> - Static files</li> </ul>"
    },
    {
      "location": "development/dev-containers/#usage",
      "title": "Usage",
      "text": ""
    },
    {
      "location": "development/dev-containers/#start-development-environment",
      "title": "Start Development Environment",
      "text": "<pre><code># Start all development containers\ndocker compose --profile dev up -d\n\n# Start specific development services\ndocker compose --profile dev up vuls-web-dev vuls-worker-dev -d\n\n# Alternative: Set default profile for session\nexport COMPOSE_PROFILES=dev\ndocker compose up -d  # Will use dev profile by default\n</code></pre>"
    },
    {
      "location": "development/dev-containers/#start-production-environment",
      "title": "Start Production Environment",
      "text": "<pre><code># Start all production containers\ndocker compose --profile web up -d\n\n# Alternative: Set default profile for session\nexport COMPOSE_PROFILES=web\ndocker compose up -d  # Will use web profile by default\n</code></pre>"
    },
    {
      "location": "development/dev-containers/#switch-between-environments",
      "title": "Switch Between Environments",
      "text": "<pre><code># Stop development environment\ndocker compose --profile dev down\n\n# Start production environment\ndocker compose --profile web up -d\n\n# Or using environment variable\nexport COMPOSE_PROFILES=web\ndocker compose down &amp;&amp; docker compose up -d\n</code></pre>"
    },
    {
      "location": "development/dev-containers/#development-workflow",
      "title": "Development Workflow",
      "text": "<ol> <li>Code Changes: Edit files in your local development environment</li> <li>Automatic Reload: Development containers detect changes and restart automatically</li> <li>No Rebuild Required: Changes are reflected immediately without rebuilding images</li> <li>Database Persistence: Database and Redis data persist across container restarts</li> </ol>"
    },
    {
      "location": "development/dev-containers/#container-specific-notes",
      "title": "Container-Specific Notes",
      "text": ""
    },
    {
      "location": "development/dev-containers/#web-application-vuls-web-dev",
      "title": "Web Application (<code>vuls-web-dev</code>)",
      "text": "<ul> <li>Uses single Dockerfile with <code>BUILD_TYPE=development</code> argument</li> <li>Enables <code>--reload</code> flag for uvicorn hot reload</li> <li>Mounts source code for hot reload</li> <li>Includes alembic files for database migrations</li> </ul>"
    },
    {
      "location": "development/dev-containers/#celery-worker-vuls-worker-dev",
      "title": "Celery Worker (<code>vuls-worker-dev</code>)",
      "text": "<ul> <li>Uses solo pool for better debugging</li> <li>Connects to development executor service</li> <li>Automatically reloads when task code changes</li> <li>Built with <code>BUILD_TYPE=development</code> argument</li> </ul>"
    },
    {
      "location": "development/dev-containers/#celery-scheduler-vuls-scheduler-dev",
      "title": "Celery Scheduler (<code>vuls-scheduler-dev</code>)",
      "text": "<ul> <li>Monitors scheduled task definitions</li> <li>Reloads when scheduler configuration changes</li> <li>Built with <code>BUILD_TYPE=development</code> argument</li> </ul>"
    },
    {
      "location": "development/dev-containers/#docker-executor-vuls-executor-dev",
      "title": "Docker Executor (<code>vuls-executor-dev</code>)",
      "text": "<ul> <li>Uses watchdog for Python file monitoring</li> <li>Automatically restarts on code changes</li> <li>Maintains same Docker socket access as production</li> <li>Built with <code>BUILD_TYPE=development</code> argument</li> </ul>"
    },
    {
      "location": "development/dev-containers/#best-practices",
      "title": "Best Practices",
      "text": ""
    },
    {
      "location": "development/dev-containers/#when-to-use-development-containers",
      "title": "When to Use Development Containers",
      "text": "<ul> <li>\u2705 Active development and debugging</li> <li>\u2705 Testing new features</li> <li>\u2705 Rapid iteration cycles</li> <li>\u2705 Local development environment</li> </ul>"
    },
    {
      "location": "development/dev-containers/#when-to-use-production-containers",
      "title": "When to Use Production Containers",
      "text": "<ul> <li>\u2705 Performance testing</li> <li>\u2705 Production-like testing</li> <li>\u2705 Final integration testing</li> <li>\u2705 Deployment preparation</li> </ul>"
    },
    {
      "location": "development/dev-containers/#development-tips",
      "title": "Development Tips",
      "text": "<ol> <li>Monitor Logs: Use <code>docker compose logs -f &lt;service&gt;</code> to watch for reload events</li> <li>Database Migrations: Run migrations in development containers for testing</li> <li>Port Conflicts: Ensure no conflicts between dev and prod containers on same ports</li> <li>Resource Usage: Development containers may use more resources due to file watching</li> <li>Profile Environment Variable: Set <code>export COMPOSE_PROFILES=dev</code> to avoid typing <code>--profile dev</code> repeatedly</li> </ol>"
    },
    {
      "location": "development/dev-containers/#profile-environment-variable",
      "title": "Profile Environment Variable",
      "text": "<p>For convenience during development, you can set the default profile:</p> <pre><code># Set development as default profile for your session\nexport COMPOSE_PROFILES=dev\n\n# Now you can use shorter commands\ndocker compose up -d\ndocker compose down\ndocker compose logs -f vuls-web-dev\n\n# To switch to production temporarily\ndocker compose --profile web up -d\n\n# Or change the default\nexport COMPOSE_PROFILES=web\n</code></pre>"
    },
    {
      "location": "development/dev-containers/#troubleshooting",
      "title": "Troubleshooting",
      "text": ""
    },
    {
      "location": "development/dev-containers/#container-wont-start",
      "title": "Container Won't Start",
      "text": "<pre><code># Check container logs\ndocker compose logs vuls-web-dev\n\n# Rebuild development image\ndocker compose build vuls-web-dev\n</code></pre>"
    },
    {
      "location": "development/dev-containers/#hot-reload-not-working",
      "title": "Hot Reload Not Working",
      "text": "<ol> <li>Verify source code is properly mounted</li> <li>Check file permissions on mounted volumes</li> <li>Ensure watchdog is running in container logs</li> </ol>"
    },
    {
      "location": "development/dev-containers/#performance-issues",
      "title": "Performance Issues",
      "text": "<ul> <li>Development containers use more CPU due to file watching</li> <li>Consider excluding large directories from file monitoring</li> <li>Use production containers for performance testing</li> </ul>"
    },
    {
      "location": "development/dev-containers/#architecture",
      "title": "Architecture",
      "text": ""
    },
    {
      "location": "development/dev-containers/#single-dockerfile-approach",
      "title": "Single Dockerfile Approach",
      "text": "<p>The project uses a consolidated approach with a single Dockerfile per service that supports both production and development builds through build arguments:</p> <pre><code># Build argument to determine if this is a dev build\nARG BUILD_TYPE=production\n\n# Install development dependencies only if BUILD_TYPE=development\nRUN if [ \"$BUILD_TYPE\" = \"development\" ]; then \\\n    pip install --no-cache-dir watchdog; \\\n    fi\n\n# Run with conditional reload based on build type\nCMD if [ \"$BUILD_TYPE\" = \"development\" ]; then \\\n    exec uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload; \\\n    else \\\n    exec uvicorn app.main:app --host 0.0.0.0 --port 8000; \\\n    fi\n</code></pre>"
    },
    {
      "location": "development/dev-containers/#build-arguments-in-compose",
      "title": "Build Arguments in Compose",
      "text": "<p>Services specify their build type through compose configuration:</p> <pre><code># Production build\nvuls-web:\n  build:\n    context: ./web-app\n    args:\n      BUILD_TYPE: production\n\n# Development build\nvuls-web-dev:\n  build:\n    context: ./web-app\n    args:\n      BUILD_TYPE: development\n</code></pre>"
    },
    {
      "location": "development/dev-containers/#benefits-of-this-approach",
      "title": "Benefits of This Approach",
      "text": "<ol> <li>DRY Principle: Single source of truth for each service</li> <li>Easier Maintenance: Changes only need to be made in one place</li> <li>Consistency: Ensures dev and prod environments stay in sync</li> <li>Reduced Complexity: Fewer files to manage</li> <li>Better CI/CD: Single Dockerfile can build both variants</li> </ol>"
    },
    {
      "location": "development/dev-containers/#configuration",
      "title": "Configuration",
      "text": ""
    },
    {
      "location": "development/dev-containers/#environment-variables",
      "title": "Environment Variables",
      "text": "<p>Development containers inherit the same environment variables as production containers, ensuring consistency between environments.</p>"
    },
    {
      "location": "development/dev-containers/#networking",
      "title": "Networking",
      "text": "<p>Development containers use the same network configuration as production, allowing seamless switching between environments.</p>"
    },
    {
      "location": "development/dev-containers/#data-persistence",
      "title": "Data Persistence",
      "text": "<p>Database and Redis data volumes are shared between development and production containers, maintaining data consistency.</p>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/",
      "title": "Enhanced Vulnerability Analysis Integration",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#overview",
      "title": "Overview",
      "text": "<p>The enhanced vulnerability analysis system integrates your comprehensive vulnerability checker with the web application, providing automated processing of scan results using OVAL, GOST, and CVE databases.</p>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#architecture",
      "title": "Architecture",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#core-components",
      "title": "Core Components",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#1-enhanced-vulnerability-service",
      "title": "1. Enhanced Vulnerability Service",
      "text": "<ul> <li>File: <code>web-app/app/services/enhanced_vulnerability_service.py</code></li> <li>Purpose: Integrates the <code>ComprehensiveVulnerabilityChecker</code> class</li> <li>Features:</li> <li>OVAL, GOST, and CVE database integration</li> <li>Intelligent package filtering and version comparison</li> <li>Source deduplication (OVAL, GOST, BASIC)</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#2-worker-based-processing",
      "title": "2. Worker-Based Processing",
      "text": "<ul> <li>File: <code>web-app/app/tasks/vulnerability_analysis_tasks.py</code></li> <li>Purpose: Automated background processing</li> <li>Features:</li> <li>Celery task <code>enhanced_vulnerability_analysis</code></li> <li>Runs automatically after successful scans</li> <li>WebSocket notifications on completion</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#3-database-models",
      "title": "3. Database Models",
      "text": "<ul> <li>Vulnerability Model: Enhanced with source tracking</li> <li>VulnerabilityAnalysis Model: Summary data storage</li> <li>Scan Model: Analysis tracking and status</li> <li>Host Model: Latest scan properties</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#4-api-endpoints",
      "title": "4. API Endpoints",
      "text": "<ul> <li>File: <code>web-app/app/api/vulnerabilities.py</code></li> <li>Endpoints:</li> <li><code>/api/hosts/{host_id}/vulnerabilities</code> - Host-specific vulnerabilities</li> <li><code>/api/scans/{scan_id}/vulnerabilities</code> - Scan vulnerabilities</li> <li><code>/api/scans/{scan_id}/vulnerability-report</code> - HTML reports</li> <li><code>/api/vulnerability-statistics</code> - Overall statistics</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#web-interface",
      "title": "Web Interface",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#html-pages",
      "title": "HTML Pages",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#dashboard",
      "title": "Dashboard (<code>/</code>)",
      "text": "<ul> <li>Real-time vulnerability statistics</li> <li>Host overview with analysis status</li> <li>Navigation to detailed pages</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#hosts-page-hosts",
      "title": "Hosts Page (<code>/hosts</code>)",
      "text": "<ul> <li>Interactive host management</li> <li>Vulnerability counts per host</li> <li>Enhanced analysis indicators</li> <li>Scan initiation capabilities</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#scans-page-scans",
      "title": "Scans Page (<code>/scans</code>)",
      "text": "<ul> <li>Comprehensive scan listing</li> <li>Status filtering (completed, running, failed, pending)</li> <li>Analysis type filtering (enhanced, basic)</li> <li>Direct links to reports</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#reports-page-reports",
      "title": "Reports Page (<code>/reports</code>)",
      "text": "<ul> <li>Host-specific report generation</li> <li>Summary report options</li> <li>Report statistics and management</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#host-vulnerability-details-hostshost_idvulnerabilities",
      "title": "Host Vulnerability Details (<code>/hosts/{host_id}/vulnerabilities</code>)",
      "text": "<ul> <li>Detailed vulnerability analysis per host</li> <li>Interactive filtering by severity and source</li> <li>Historical scan tracking</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#template-architecture",
      "title": "Template Architecture",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#separated-templates",
      "title": "Separated Templates",
      "text": "<ul> <li>Templates: <code>web-app/app/templates/</code></li> <li>Services: <code>web-app/app/services/vulnerability_report_service.py</code></li> <li>Benefits: Clean separation of presentation and business logic</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#dynamic-reports",
      "title": "Dynamic Reports",
      "text": "<ul> <li>Professional HTML reports with TailwindCSS</li> <li>Interactive charts using Chart.js</li> <li>Print-friendly styling</li> <li>Dark/light mode support</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#integration-flow",
      "title": "Integration Flow",
      "text": "<pre><code>graph TD\n    A[Scan Request] --&gt; B[Celery Task]\n    B --&gt; C[Docker Executor]\n    C --&gt; D[Vuls Container Scan]\n    D --&gt; E[Basic Results Processing]\n    E --&gt; F[Database Storage]\n    F --&gt; G[Enhanced Analysis Task]\n    G --&gt; H[OVAL + GOST Processing]\n    H --&gt; I[Enhanced Results Storage]\n    I --&gt; J[WebSocket Notification]\n    J --&gt; K[UI Updates]\n    K --&gt; L[Dynamic Reports Available]</code></pre>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#database-schema",
      "title": "Database Schema",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#enhanced-columns-added",
      "title": "Enhanced Columns Added",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#scans-table",
      "title": "Scans Table",
      "text": "<pre><code>ALTER TABLE scans ADD COLUMN enhanced_analysis_completed BOOLEAN DEFAULT FALSE;\nALTER TABLE scans ADD COLUMN enhanced_analysis_started_at TIMESTAMP WITH TIME ZONE;\nALTER TABLE scans ADD COLUMN enhanced_analysis_completed_at TIMESTAMP WITH TIME ZONE;\n</code></pre>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#vulnerabilities-table",
      "title": "Vulnerabilities Table",
      "text": "<ul> <li><code>source</code> column for tracking vulnerability source (OVAL, GOST, BASIC)</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#vulnerabilityanalysis-table",
      "title": "VulnerabilityAnalysis Table",
      "text": "<ul> <li>Summary data for enhanced analysis results</li> <li>Source breakdown and severity statistics</li> <li>High-risk package identification</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#configuration",
      "title": "Configuration",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#database-paths",
      "title": "Database Paths",
      "text": "<p>The system uses mounted database paths:</p> <ul> <li>OVAL DB: <code>/app/db/oval.sqlite3</code></li> <li>GOST DB: <code>/app/db/gost.sqlite3</code></li> <li>CVE DB: <code>/app/db/cve.sqlite3</code></li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#environment-variables",
      "title": "Environment Variables",
      "text": "<ul> <li>Database connection configured via <code>DATABASE_URL</code></li> <li>Redis connection for WebSocket notifications</li> <li>Celery configuration for background tasks</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#usage",
      "title": "Usage",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#automatic-processing",
      "title": "Automatic Processing",
      "text": "<ol> <li>Scan completes successfully</li> <li>Enhanced analysis task automatically triggered</li> <li>OVAL and GOST databases processed</li> <li>Results stored with source tracking</li> <li>WebSocket notification sent to UI</li> <li>Reports become available</li> </ol>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#manual-access",
      "title": "Manual Access",
      "text": "<ol> <li>Dashboard: Visit <code>/</code> for overview</li> <li>Host Management: Use <code>/hosts</code> for host operations</li> <li>Scan History: View <code>/scans</code> for scan management</li> <li>Report Generation: Access <code>/reports</code> for report options</li> </ol>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#api-integration",
      "title": "API Integration",
      "text": "<ul> <li>RESTful endpoints for programmatic access</li> <li>JSON responses for all data</li> <li>Filtering capabilities for targeted queries</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#features",
      "title": "Features",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#real-time-updates",
      "title": "Real-time Updates",
      "text": "<ul> <li>WebSocket notifications when analysis completes</li> <li>Live dashboard statistics</li> <li>Status indicators for enhanced vs basic analysis</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#professional-reports",
      "title": "Professional Reports",
      "text": "<ul> <li>Dynamic HTML generation from database data</li> <li>Charts and visualizations</li> <li>Comprehensive vulnerability details</li> <li>Export capabilities</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#enhanced-analysis",
      "title": "Enhanced Analysis",
      "text": "<ul> <li>Comprehensive package vulnerability detection</li> <li>Version comparison and validation</li> <li>Source deduplication and prioritization</li> <li>Risk scoring and categorization</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#development-notes",
      "title": "Development Notes",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#code-organization",
      "title": "Code Organization",
      "text": "<ul> <li>Services separated from templates</li> <li>DRY principles applied throughout</li> <li>Logical file organization by functionality</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#darklight-mode-support",
      "title": "Dark/Light Mode Support",
      "text": "<ul> <li>All interfaces support theme switching</li> <li>Consistent styling across components</li> <li>Responsive design for all screen sizes</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-analysis/#hot-reload-support",
      "title": "Hot Reload Support",
      "text": "<ul> <li>Development container reloads on code changes</li> <li>No restart required for template updates</li> <li>Efficient development workflow</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/",
      "title": "Enhanced Vulnerability Analysis Integration - Complete",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#overview",
      "title": "Overview",
      "text": "<p>Successfully integrated the standalone <code>comprehensive_vulnerability_checker.py</code> script with the existing vulnerability scanning workflow. The system now automatically processes real Vuls scan results and provides comprehensive vulnerability analysis using both OVAL and GOST databases.</p>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#key-integration-components",
      "title": "Key Integration Components",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#1-real-vuls-data-processing",
      "title": "1. Real Vuls Data Processing",
      "text": "<ul> <li>Problem: Scan tasks were creating placeholder files instead of using actual Vuls JSON output</li> <li>Solution: Modified <code>run_vuls_scan()</code> in <code>scan_tasks.py</code> to look for real Vuls results in job-specific directories</li> <li>Path Structure: <code>results/{job_id[:8]}/timestamp/host.json</code></li> <li>Result: Now processes real 354KB scan files with 805 packages instead of empty placeholders</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#2-enhanced-vulnerability-service",
      "title": "2. Enhanced Vulnerability Service",
      "text": "<ul> <li>Location: <code>web-app/app/services/enhanced_vulnerability_service.py</code></li> <li>Features:</li> <li>Uses both OVAL and GOST databases for comprehensive vulnerability detection</li> <li>Intelligent package filtering (focuses on high-risk packages like SSH, SSL, crypto libraries)</li> <li>Accurate version comparison for vulnerability assessment</li> <li>Deduplication of results from multiple sources</li> <li>Permission error handling for container environments</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#3-automatic-enhanced-analysis-trigger",
      "title": "3. Automatic Enhanced Analysis Trigger",
      "text": "<ul> <li>Integration Point: Enhanced analysis automatically runs after every successful Vuls scan</li> <li>Task: <code>enhanced_vulnerability_analysis</code> in <code>vulnerability_analysis_tasks.py</code></li> <li>Storage: Results stored in database with detailed vulnerability records and analysis summaries</li> <li>Notifications: WebSocket notifications when enhanced analysis completes</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#4-permission-issue-resolution",
      "title": "4. Permission Issue Resolution",
      "text": "<ul> <li>Problem: Vuls container runs as root, creating files with root ownership that worker container can't read</li> <li>Solution: Added <code>fix_scan_result_permissions()</code> function in docker-executor</li> <li>Implementation: Automatically fixes file permissions (644) and directory permissions (755) after each scan</li> <li>Result: Worker container can now read Vuls JSON files for enhanced analysis</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#5-database-schema-support",
      "title": "5. Database Schema Support",
      "text": "<ul> <li>Models: Enhanced <code>Vulnerability</code> and <code>VulnerabilityAnalysis</code> models</li> <li>Fields: Added source tracking (OVAL/GOST), severity breakdown, and analysis metadata</li> <li>Relationships: Proper linking between scans, hosts, and vulnerabilities</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#test-results",
      "title": "Test Results",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#integration-test-results",
      "title": "Integration Test Results",
      "text": "<pre><code>\u2705 Found 805 packages from real Vuls scan data\n\u2705 Detected 409 vulnerabilities using OVAL and GOST databases\n\u2705 Affected 21 packages with comprehensive severity breakdown\n\u2705 Severity Distribution: 46 Critical, 171 High, 152 Medium, 28 Low, 12 Unknown\n\u2705 Source Coverage: 409 from GOST database (OVAL: 0 for this dataset)\n</code></pre>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#performance-metrics",
      "title": "Performance Metrics",
      "text": "<ul> <li>Package Analysis: 805 packages processed</li> <li>Vulnerability Detection: 409 vulnerabilities found</li> <li>Database Sources: OVAL and GOST integration</li> <li>Processing Time: ~30 seconds for comprehensive analysis</li> <li>Storage: Detailed vulnerability records with metadata</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#workflow-integration",
      "title": "Workflow Integration",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#before-integration",
      "title": "Before Integration",
      "text": "<ol> <li>Vuls scan runs \u2192 Creates placeholder JSON with no data</li> <li>Basic scan processing \u2192 Stores minimal vulnerability info</li> <li>Enhanced analysis \u2192 Finds 0 vulnerabilities (no real data)</li> <li>Result \u2192 Empty vulnerability reports</li> </ol>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#after-integration",
      "title": "After Integration",
      "text": "<ol> <li>Vuls scan runs \u2192 Creates real JSON files with package data</li> <li>Docker-executor \u2192 Fixes file permissions automatically</li> <li>Basic scan processing \u2192 Stores scan metadata</li> <li>Enhanced analysis \u2192 Processes real package data using OVAL/GOST</li> <li>Result \u2192 Comprehensive vulnerability reports with 409+ vulnerabilities</li> </ol>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#key-files-modified",
      "title": "Key Files Modified",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#core-integration-files",
      "title": "Core Integration Files",
      "text": "<ul> <li><code>web-app/app/tasks/scan_tasks.py</code> - Updated to use real Vuls JSON files</li> <li><code>web-app/app/services/enhanced_vulnerability_service.py</code> - New comprehensive vulnerability checker</li> <li><code>web-app/app/tasks/vulnerability_analysis_tasks.py</code> - Enhanced analysis task with error handling</li> <li><code>docker-executor/main.py</code> - Added permission fixing after scans</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#database-models",
      "title": "Database Models",
      "text": "<ul> <li><code>web-app/app/models/vulnerability.py</code> - Enhanced with source tracking and metadata</li> <li><code>web-app/app/models/scan.py</code> - Added enhanced analysis tracking fields</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#api-and-templates",
      "title": "API and Templates",
      "text": "<ul> <li><code>web-app/app/api/vulnerabilities.py</code> - Enhanced vulnerability endpoints</li> <li><code>web-app/app/templates/vulnerability_report.html</code> - Comprehensive reporting template</li> <li><code>web-app/app/services/vulnerability_report_service.py</code> - Enhanced report generation</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#configuration",
      "title": "Configuration",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#database-paths-container-environment",
      "title": "Database Paths (Container Environment)",
      "text": "<pre><code>oval_db_path=\"/app/db/oval.sqlite3\"\ngost_db_path=\"/app/db/gost.sqlite3\"\ncve_db_path=\"/app/db/cve.sqlite3\"\n</code></pre>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#results-directory-structure",
      "title": "Results Directory Structure",
      "text": "<pre><code>results/\n\u251c\u2500\u2500 {job_id[:8]}/\n\u2502   \u2514\u2500\u2500 {timestamp}/\n\u2502       \u2514\u2500\u2500 {hostname}.json  # Real Vuls scan data\n</code></pre>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#error-handling",
      "title": "Error Handling",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#permission-issues",
      "title": "Permission Issues",
      "text": "<ul> <li>Graceful handling of permission denied errors</li> <li>Automatic permission fixing in docker-executor</li> <li>Fallback to warning status if no packages found</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#file-access",
      "title": "File Access",
      "text": "<ul> <li>Existence checks before file operations</li> <li>Proper error logging and user feedback</li> <li>Graceful degradation when files unavailable</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#future-enhancements",
      "title": "Future Enhancements",
      "text": ""
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#potential-improvements",
      "title": "Potential Improvements",
      "text": "<ol> <li>Multi-host Scan Support: Process multiple JSON files for multi-host scans</li> <li>Historical Analysis: Track vulnerability trends over time</li> <li>Custom Risk Scoring: Implement organization-specific risk calculations</li> <li>Integration with External Tools: Connect with SIEM or ticketing systems</li> <li>Performance Optimization: Parallel processing for large package sets</li> </ol>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#monitoring",
      "title": "Monitoring",
      "text": "<ul> <li>Enhanced analysis completion rates</li> <li>Performance metrics tracking</li> <li>Error rate monitoring</li> <li>Database query optimization</li> </ul>"
    },
    {
      "location": "development/enhanced-vulnerability-integration-complete/#conclusion",
      "title": "Conclusion",
      "text": "<p>The enhanced vulnerability analysis integration is now complete and production-ready. The system successfully:</p> <ul> <li>\u2705 Processes real Vuls scan data (805 packages)</li> <li>\u2705 Finds comprehensive vulnerabilities (409 found vs 0 before)</li> <li>\u2705 Uses multiple vulnerability databases (OVAL + GOST)</li> <li>\u2705 Handles permission issues automatically</li> <li>\u2705 Provides detailed reporting and notifications</li> <li>\u2705 Integrates seamlessly with existing workflow</li> </ul> <p>Users now receive actionable vulnerability intelligence automatically after each scan, with detailed severity breakdowns and comprehensive package analysis.</p>"
    },
    {
      "location": "development/lynis-integration-complete/",
      "title": "Lynis Security Audit Integration - Complete Implementation",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#overview",
      "title": "Overview",
      "text": "<p>This document describes the complete implementation of Lynis security audit integration into the Vuls vulnerability scanning system. Lynis is a security auditing tool that performs comprehensive security scans on Unix/Linux systems.</p>"
    },
    {
      "location": "development/lynis-integration-complete/#architecture",
      "title": "Architecture",
      "text": "<p>The Lynis integration follows the same pattern as the existing Vuls vulnerability scanning:</p> <ol> <li>Database Models - Store scan results and findings</li> <li>Services - Business logic for managing scans and parsing results</li> <li>Celery Tasks - Background processing for remote scans</li> <li>Docker Executor - Secure execution of remote operations</li> <li>SSH Client Container - Dedicated container for remote connections</li> </ol>"
    },
    {
      "location": "development/lynis-integration-complete/#components-implemented",
      "title": "Components Implemented",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#1-database-models",
      "title": "1. Database Models",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#lynisscan-web-appappmodelslynis_scanpy",
      "title": "LynisScan (<code>web-app/app/models/lynis_scan.py</code>)",
      "text": "<ul> <li>Stores scan metadata and status</li> <li>Tracks hardening index (0-100 score)</li> <li>Links to host and findings</li> <li>Includes system information (OS, kernel version)</li> <li>Tracks Lynis version and git information</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#lyniscontrol-web-appappmodelslynis_controlpy",
      "title": "LynisControl (<code>web-app/app/models/lynis_control.py</code>)",
      "text": "<ul> <li>Represents security controls tested by Lynis</li> <li>Categorizes controls (AUTH, BOOT, FILE, etc.)</li> <li>Stores control descriptions</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#lynisfinding-web-appappmodelslynis_findingpy",
      "title": "LynisFinding (<code>web-app/app/models/lynis_finding.py</code>)",
      "text": "<ul> <li>Individual security findings from scans</li> <li>Types: WARNING, SUGGESTION, FINDING</li> <li>Status: OK, FOUND, NOT_FOUND, SKIPPED</li> <li>Links findings to controls and scans</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#2-services",
      "title": "2. Services",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#lynisservice-web-appappserviceslynis_servicepy",
      "title": "LynisService (<code>web-app/app/services/lynis_service.py</code>)",
      "text": "<ul> <li>Report Parsing: Parses Lynis report files (.dat format)</li> <li>Scan Management: Creates and updates scan records</li> <li>Finding Processing: Extracts and categorizes findings</li> <li>Control Management: Auto-creates security controls</li> <li>Summary Generation: Provides scan summaries and statistics</li> </ul> <p>Key methods:</p> <ul> <li><code>create_scan()</code> - Initialize new scan</li> <li><code>parse_lynis_report()</code> - Parse report file</li> <li><code>update_scan_with_results()</code> - Store parsed results</li> <li><code>get_findings_summary()</code> - Generate summary statistics</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#3-celery-tasks",
      "title": "3. Celery Tasks",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#lynis-tasks-web-appapptaskslynis_taskspy",
      "title": "Lynis Tasks (<code>web-app/app/tasks/lynis_tasks.py</code>)",
      "text": "<ul> <li><code>run_lynis_scan()</code> - Main scan orchestration task</li> <li><code>cleanup_old_lynis_reports()</code> - Maintenance task for old reports</li> </ul> <p>The main scan task:</p> <ol> <li>Creates scan record</li> <li>Builds Lynis installation script</li> <li>Sends to Docker executor</li> <li>Monitors progress</li> <li>Parses results when complete</li> <li>Updates database with findings</li> </ol>"
    },
    {
      "location": "development/lynis-integration-complete/#4-docker-executor-integration",
      "title": "4. Docker Executor Integration",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#ssh-client-container-buildssh-clientdockerfile",
      "title": "SSH Client Container (<code>build/ssh-client/Dockerfile</code>)",
      "text": "<ul> <li>Ubuntu-based container with SSH client tools</li> <li>AWS CLI for Session Manager support</li> <li>Google Cloud CLI for IAP tunnel support</li> <li>Cloudflared for tunnel support</li> <li>Supports multiple connection methods</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#executor-endpoints-docker-executormainpy",
      "title": "Executor Endpoints (<code>docker-executor/main.py</code>)",
      "text": "<ul> <li><code>POST /lynis/scan</code> - Start Lynis security audit</li> <li><code>execute_lynis_scan()</code> - Execute scan on remote host</li> <li><code>_build_ssh_command_for_lynis()</code> - Build connection commands</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#5-database-migration",
      "title": "5. Database Migration",
      "text": "<p>Created Alembic migration to add new tables:</p> <ul> <li><code>lynis_scans</code> - Main scan records</li> <li><code>lynis_controls</code> - Security control definitions</li> <li><code>lynis_findings</code> - Individual findings</li> <li>Updated <code>hosts</code> table with Lynis relationships</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#scan-process-flow",
      "title": "Scan Process Flow",
      "text": "<ol> <li>Initiation: User triggers Lynis scan for a host</li> <li>Task Creation: Celery task <code>run_lynis_scan</code> is queued</li> <li>Scan Record: Database record created with \"running\" status</li> <li>Script Generation: Lynis installation script built based on target OS</li> <li>Executor Request: Task sends request to Docker executor</li> <li>SSH Connection: Executor uses SSH client container to connect</li> <li>Remote Execution:</li> <li>Upload installation script</li> <li>Install Lynis on target system</li> <li>Run security audit</li> <li>Download report file</li> <li>Report Processing: Parse .dat report file</li> <li>Database Update: Store findings and update scan status</li> <li>Completion: Scan marked as completed with results</li> </ol>"
    },
    {
      "location": "development/lynis-integration-complete/#security-features",
      "title": "Security Features",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#connection-methods",
      "title": "Connection Methods",
      "text": "<ul> <li>Standard SSH: Key-based authentication</li> <li>AWS Session Manager: For EC2 instances</li> <li>GCP IAP Tunnels: For GCE instances</li> <li>Cloudflare Tunnels: For tunnel-connected hosts</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#security-controls",
      "title": "Security Controls",
      "text": "<ul> <li>SSH key management with proper permissions</li> <li>Isolated execution in containers</li> <li>No persistent connections</li> <li>Audit trail of all operations</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#report-format-support",
      "title": "Report Format Support",
      "text": "<p>Lynis generates reports in <code>.dat</code> format with key=value pairs:</p> <pre><code>lynis_version=3.0.9\nscan_date=2025-01-29 10:30:00\nhardening_index=85\nos_name=Ubuntu\nos_version=22.04\nwarning[AUTH-9262]=Weak password policy detected\nsuggestion[BOOT-5122]=Enable secure boot\n</code></pre> <p>The parser extracts:</p> <ul> <li>Scan metadata (version, date, scores)</li> <li>System information (OS, kernel)</li> <li>Security findings (warnings, suggestions)</li> <li>Control test results</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#integration-points",
      "title": "Integration Points",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#host-model-updates",
      "title": "Host Model Updates",
      "text": "<ul> <li>Added <code>lynis_scans</code> relationship</li> <li>Added <code>latest_lynis_scan</code> property</li> <li>Added <code>latest_lynis_findings</code> property</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#compose-configuration",
      "title": "Compose Configuration",
      "text": "<ul> <li>Added SSH client build target</li> <li>Updated volume mounts for alembic files</li> <li>Network connectivity for containers</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#usage-examples",
      "title": "Usage Examples",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#starting-a-scan",
      "title": "Starting a Scan",
      "text": "<pre><code>from app.tasks.lynis_tasks import run_lynis_scan\n\n# Start scan for host ID 1\ntask = run_lynis_scan.delay(host_id=1, scan_options={\n    'quick_scan': True,\n    'tests': ['AUTH', 'BOOT']\n})\n</code></pre>"
    },
    {
      "location": "development/lynis-integration-complete/#accessing-results",
      "title": "Accessing Results",
      "text": "<pre><code>from app.services.lynis_service import LynisService\n\nservice = LynisService(db)\nscan = service.get_latest_scan_for_host(host_id=1)\nsummary = service.get_findings_summary(scan.id)\n\nprint(f\"Hardening Index: {scan.hardening_index}\")\nprint(f\"Warnings: {summary['warnings']}\")\nprint(f\"Suggestions: {summary['suggestions']}\")\n</code></pre>"
    },
    {
      "location": "development/lynis-integration-complete/#future-enhancements",
      "title": "Future Enhancements",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#planned-features",
      "title": "Planned Features",
      "text": "<ol> <li>Web UI Integration - Dashboard views for Lynis results</li> <li>Scheduled Scans - Automated periodic security audits</li> <li>Compliance Reporting - Map findings to compliance frameworks</li> <li>Remediation Guidance - Actionable fix recommendations</li> <li>Trend Analysis - Track security posture over time</li> <li>Custom Controls - Organization-specific security checks</li> </ol>"
    },
    {
      "location": "development/lynis-integration-complete/#api-endpoints-future",
      "title": "API Endpoints (Future)",
      "text": "<ul> <li><code>GET /api/lynis/scans</code> - List scans</li> <li><code>GET /api/lynis/scans/{id}</code> - Get scan details</li> <li><code>POST /api/lynis/scans</code> - Start new scan</li> <li><code>GET /api/lynis/findings</code> - Search findings</li> <li><code>GET /api/lynis/controls</code> - List security controls</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#maintenance",
      "title": "Maintenance",
      "text": ""
    },
    {
      "location": "development/lynis-integration-complete/#regular-tasks",
      "title": "Regular Tasks",
      "text": "<ul> <li>Run <code>cleanup_old_lynis_reports</code> to remove old report files</li> <li>Monitor scan success rates and failure patterns</li> <li>Update Lynis version in installation script</li> <li>Review and update security control definitions</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#monitoring",
      "title": "Monitoring",
      "text": "<ul> <li>Track scan completion rates</li> <li>Monitor executor resource usage</li> <li>Alert on repeated scan failures</li> <li>Review security findings trends</li> </ul>"
    },
    {
      "location": "development/lynis-integration-complete/#conclusion",
      "title": "Conclusion",
      "text": "<p>The Lynis integration provides comprehensive security auditing capabilities that complement the existing vulnerability scanning. It follows established patterns in the codebase and provides a solid foundation for security compliance and monitoring.</p> <p>The implementation is production-ready with proper error handling, security controls, and scalability considerations. It integrates seamlessly with the existing infrastructure while adding powerful new security assessment capabilities.</p>"
    },
    {
      "location": "development/task-scheduler-fix/",
      "title": "Task Scheduler Fix - Docker Executor Implementation",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#problem-summary",
      "title": "Problem Summary",
      "text": "<p>The task scheduler was failing with the error:</p> <pre><code>Task failed: [Errno 2] No such file or directory: 'docker'\n</code></pre> <p>This prevented vulnerability scans from being executed through the web application's task scheduling system.</p>"
    },
    {
      "location": "development/task-scheduler-fix/#architecture-overview",
      "title": "Architecture Overview",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#docker-socket-mounting-vs-docker-in-docker",
      "title": "Docker Socket Mounting vs Docker-in-Docker",
      "text": "<p>Our system uses Docker socket mounting, not Docker-in-Docker (DinD). This is an important distinction:</p> <p>What We're NOT Doing (Docker-in-Docker):</p> <ul> <li>Running a Docker daemon inside a Docker container</li> <li>Nested virtualization with performance overhead</li> <li>Complex privileged container setups</li> </ul> <p>What We ARE Doing (Docker Socket Mounting):</p> <ul> <li>Mounting the host's Docker socket into the executor container</li> <li>Using the host's Docker daemon from within a container</li> <li>Creating sibling containers on the host system</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#container-architecture",
      "title": "Container Architecture",
      "text": "<pre><code>Host System (/home/paulb/docker/vuls)\n\u251c\u2500\u2500 Docker Daemon (dockerd)\n\u251c\u2500\u2500 Docker Socket (/var/run/docker.sock)\n\u251c\u2500\u2500 Project Files (config/, logs/, results/, etc.)\n\u2502\n\u251c\u2500\u2500 vuls-executor container\n\u2502   \u251c\u2500\u2500 docker CLI client\n\u2502   \u251c\u2500\u2500 /var/run/docker.sock (mounted from host)\n\u2502   \u2514\u2500\u2500 /project (mounted project directory)\n\u2502\n\u251c\u2500\u2500 vuls-worker container (Celery worker)\n\u251c\u2500\u2500 vuls-web-dev container (FastAPI app)\n\u251c\u2500\u2500 vuls-db container (PostgreSQL)\n\u251c\u2500\u2500 vuls-redis container (Redis)\n\u2502\n\u2514\u2500\u2500 NEW: vuls scan container (created dynamically by executor)\n    \u251c\u2500\u2500 Mounts: /home/paulb/docker/vuls/config/config.toml:/vuls/config.toml\n    \u251c\u2500\u2500 Mounts: /home/paulb/docker/vuls/logs:/vuls/logs\n    \u2514\u2500\u2500 Connects to: vuls_default network\n</code></pre>"
    },
    {
      "location": "development/task-scheduler-fix/#how-the-executor-works",
      "title": "How the Executor Works",
      "text": "<ol> <li>Web App \u2192 Celery Worker: Schedules scan task</li> <li>Celery Worker \u2192 Executor API: HTTP request to start scan</li> <li>Executor Container: Receives scan request</li> <li>Executor \u2192 Host Docker Daemon: Creates new vuls container via socket</li> <li>New Vuls Container: Runs scan with proper volume mounts</li> <li>Results: Written to host filesystem, accessible by web app</li> </ol>"
    },
    {
      "location": "development/task-scheduler-fix/#benefits-of-this-approach",
      "title": "Benefits of This Approach",
      "text": "<ul> <li>Security: No privileged containers or DinD complexity</li> <li>Performance: No nested virtualization overhead</li> <li>Simplicity: Standard Docker patterns and networking</li> <li>Resource Sharing: All containers share host Docker network</li> <li>Isolation: Each scan runs in a fresh, isolated container</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#root-cause-analysis",
      "title": "Root Cause Analysis",
      "text": "<p>The issue was that the executor service was trying to run <code>docker compose</code> commands, but the volume path resolution was incorrect when running via the mounted Docker socket. The relative paths in compose.yml were being resolved incorrectly, causing config file mount failures.</p>"
    },
    {
      "location": "development/task-scheduler-fix/#the-path-resolution-problem",
      "title": "The Path Resolution Problem",
      "text": "<p>When the executor ran:</p> <pre><code>docker compose -f /project/compose.yml run vuls scan server_name\n</code></pre> <p>The compose file contained relative paths:</p> <pre><code>volumes:\n  - ./config/config.toml:/vuls/config.toml:rw\n</code></pre> <p>What happened:</p> <ol> <li>Executor mounted project directory as <code>/project</code></li> <li>Executor ran <code>docker compose -f /project/compose.yml run vuls scan server_name</code></li> <li>The new vuls container tried to mount <code>./config/config.toml:/vuls/config.toml</code></li> <li>The <code>./</code> resolved to <code>/project/config/config.toml</code> from executor's perspective</li> <li>But the host Docker daemon couldn't find this path on the host system</li> <li>Result: \"read /vuls/config.toml: is a directory\" errors</li> </ol>"
    },
    {
      "location": "development/task-scheduler-fix/#why-this-happens-with-docker-socket-mounting",
      "title": "Why This Happens with Docker Socket Mounting",
      "text": "<p>When you mount the Docker socket, the executor container can talk to the host's Docker daemon, but:</p> <ul> <li>The executor sees paths from its own filesystem perspective (<code>/project/...</code>)</li> <li>The Docker daemon sees paths from the host filesystem perspective (<code>/home/paulb/docker/vuls/...</code>)</li> <li>Relative paths in compose files get resolved incorrectly across this boundary</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#solution-implemented",
      "title": "Solution Implemented",
      "text": "<p>Replaced the docker compose approach with direct Docker run commands using absolute host paths.</p>"
    },
    {
      "location": "development/task-scheduler-fix/#key-changes",
      "title": "Key Changes",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#1-updated-composeyml",
      "title": "1. Updated compose.yml",
      "text": "<p>Added environment variables to executor service for dynamic path resolution:</p> <pre><code>vuls-executor:\n  environment:\n    - EXECUTOR_API_KEY=${EXECUTOR_API_KEY:-change-me-in-production}\n    - HOST_PROJECT_PATH=${PWD}\n    - HOST_USER_HOME=${HOME}\n</code></pre> <p>Also added missing environment variables to vuls-web-dev service:</p> <pre><code>vuls-web-dev:\n  environment:\n    - EXECUTOR_URL=http://vuls-executor:8080\n    - EXECUTOR_API_KEY=${EXECUTOR_API_KEY:-change-me-in-production}\n</code></pre>"
    },
    {
      "location": "development/task-scheduler-fix/#2-modified-docker-executormainpy",
      "title": "2. Modified docker-executor/main.py",
      "text": "<p>Replaced <code>docker compose run</code> with direct <code>docker run</code> commands using absolute host paths:</p> <pre><code># Build direct docker run command with absolute host paths\ncmd = [\n    \"docker\", \"run\", \"--rm\",\n    # Volume mounts using host paths\n    \"-v\", f\"{HOST_PROJECT_PATH}/config/config.toml:/vuls/config.toml:rw\",\n    \"-v\", f\"{HOST_PROJECT_PATH}/logs:/vuls/logs:rw\",\n    \"-v\", f\"{HOST_PROJECT_PATH}/results:/vuls/results:rw\",\n    \"-v\", f\"{HOST_PROJECT_PATH}/db:/vuls/db:rw\",\n    \"-v\", f\"{HOST_PROJECT_PATH}/.ssh:/root/.ssh:rw\",\n    \"-v\", \"/var/run/docker.sock:/var/run/docker.sock\",\n    # Credential mounts\n    \"-v\", f\"{HOST_USER_HOME}/.config/gcloud:/root/.config/gcloud:rw\",\n    \"-v\", f\"{HOST_USER_HOME}/.aws:/root/.aws:ro\",\n    # Environment variables\n    \"-e\", \"VULS_CONFIG_PATH=/vuls/config.toml\",\n    \"-e\", \"AWS_PROFILE=default\",\n    \"-e\", \"AWS_REGION=eu-west-2\",\n    # ... other environment variables\n    # Network connectivity\n    \"--network\", \"vuls_default\",\n    # Use the vuls image\n    \"vuls-vuls:latest\",\n    # Command\n    \"scan\", \"-config=/vuls/config.toml\", request.server_name\n]\n</code></pre>"
    },
    {
      "location": "development/task-scheduler-fix/#3-fixed-command-structure",
      "title": "3. Fixed Command Structure",
      "text": "<p>Corrected the vuls command line argument order and removed invalid flags:</p> <ul> <li>\u2705 <code>scan -config=/vuls/config.toml server_name</code> (correct)</li> <li>\u274c <code>scan server_name -config=/vuls/config.toml -fast-scan</code> (incorrect)</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#4-hostname-mapping-verification",
      "title": "4. Hostname Mapping Verification",
      "text": "<p>Confirmed that the hostname mapping works correctly:</p> <ul> <li>Database stores <code>host.name</code> (e.g., <code>anisette_v3</code>) and <code>host.hostname</code> (e.g., <code>anisette-v3</code>)</li> <li>Scan tasks pass <code>host.name</code> to executor (matches config section <code>[servers.anisette_v3]</code>)</li> <li>Vuls looks up config section and connects to <code>host = \"anisette-v3\"</code></li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#testing-and-verification",
      "title": "Testing and Verification",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#test-command",
      "title": "Test Command",
      "text": "<pre><code>from app.tasks.scan_tasks import run_vulnerability_scan\nresult = run_vulnerability_scan(host_id=2, scan_type='fast')\n</code></pre>"
    },
    {
      "location": "development/task-scheduler-fix/#results-before-fix",
      "title": "Results Before Fix",
      "text": "<pre><code>Task failed: [Errno 2] No such file or directory: 'docker'\n</code></pre>"
    },
    {
      "location": "development/task-scheduler-fix/#results-after-fix",
      "title": "Results After Fix",
      "text": "<pre><code>Scan result: {'status': 'error', 'error': 'Scan failed with code 1: ...\nFailed to test first SSH Connection. err:\nUnable to connect via SSH. ...\ncmd: /usr/bin/ssh ... -l ubuntu -p 22 anisette-v3\nexitstatus: 255'}\n</code></pre> <p>The error changed from a system-level Docker error to a legitimate SSH connectivity error, confirming the fix worked.</p>"
    },
    {
      "location": "development/task-scheduler-fix/#benefits-of-direct-docker-run-approach",
      "title": "Benefits of Direct Docker Run Approach",
      "text": "<ol> <li>Path Resolution: No issues with relative paths in compose files</li> <li>Explicit Control: Full control over volume mounts and environment variables</li> <li>Debugging: Easier to debug command execution</li> <li>Portability: Works across different environments with dynamic path resolution</li> <li>Security: Precise control over what gets mounted and exposed</li> </ol>"
    },
    {
      "location": "development/task-scheduler-fix/#current-status",
      "title": "Current Status",
      "text": "<p>\u2705 Task scheduler is fully functional \u2705 Docker executor communicates properly with worker \u2705 Config files are read correctly \u2705 Hostname mapping works correctly (name \u2192 hostname) \u2705 Scans execute and attempt SSH connections to target hosts \u2705 Proper error reporting for legitimate connectivity issues</p>"
    },
    {
      "location": "development/task-scheduler-fix/#concurrent-scan-support",
      "title": "Concurrent Scan Support",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#container-naming-strategy",
      "title": "Container Naming Strategy",
      "text": "<p>Each scan gets a unique container name to prevent conflicts:</p> <pre><code>container_name = f\"vuls-scan-{job_id[:8]}-{request.server_name}\"\n# Example: vuls-scan-a1b2c3d4-anisette_v3\n</code></pre>"
    },
    {
      "location": "development/task-scheduler-fix/#concurrency-benefits",
      "title": "Concurrency Benefits",
      "text": "<ul> <li>Multiple simultaneous scans: No naming conflicts between containers</li> <li>Isolation: Each scan runs in its own container with fresh environment</li> <li>Resource sharing: All scans share the same mounted volumes and databases</li> <li>Cleanup: <code>--rm</code> flag ensures containers are automatically removed after completion</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#potential-concurrency-considerations",
      "title": "Potential Concurrency Considerations",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#file-system-access",
      "title": "File System Access",
      "text": "<p>\u2705 Safe: Multiple containers can safely read from:</p> <ul> <li>Config files (read-only access)</li> <li>Vulnerability databases (read-only during scans)</li> <li>SSH keys (read-only access)</li> </ul> <p>\u26a0\ufe0f Consider: Multiple containers writing to:</p> <ul> <li>Log files: Each scan writes to the same log directory</li> <li>Results files: Vuls typically creates unique result files per scan</li> <li>Temporary files: Should be isolated per container</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#database-access",
      "title": "Database Access",
      "text": "<p>\u2705 Safe: SQLite databases are read-only during scans</p> <ul> <li>CVE database: Read-only access</li> <li>OVAL database: Read-only access</li> <li>GOST database: Read-only access</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#network-resources",
      "title": "Network Resources",
      "text": "<p>\u2705 Safe: Each container gets its own network namespace</p> <ul> <li>SSH connections: Independent per container</li> <li>Network timeouts: Isolated per scan</li> <li>Port usage: No conflicts as containers don't expose ports</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#memory-and-cpu",
      "title": "Memory and CPU",
      "text": "<p>\u26a0\ufe0f Monitor: Multiple concurrent scans will:</p> <ul> <li>Increase memory usage (each container uses ~100-500MB)</li> <li>Increase CPU usage (scanning is CPU-intensive)</li> <li>Consider limiting concurrent scans based on system resources</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#recommended-limits",
      "title": "Recommended Limits",
      "text": "<p>For production deployment, consider:</p> <ul> <li>Max concurrent scans: 3-5 depending on system resources</li> <li>Queue management: Use Celery's concurrency settings</li> <li>Resource monitoring: Monitor memory and CPU usage</li> <li>Timeout handling: Ensure scans don't run indefinitely</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#future-considerations",
      "title": "Future Considerations",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#for-production-deployment",
      "title": "For Production Deployment",
      "text": "<ul> <li>SSH key management for target host access</li> <li>Network connectivity configuration for scanning external hosts</li> <li>Credential handling for cloud-based scans</li> <li>Username configuration for SSH connections</li> <li>Concurrent scan limits and resource management</li> <li>Log file rotation and management</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#for-development",
      "title": "For Development",
      "text": "<ul> <li>Consider adding debug flags for troubleshooting SSH connections</li> <li>Implement config validation before scan execution</li> <li>Add retry mechanisms for transient connectivity issues</li> <li>Add concurrent scan monitoring and metrics</li> <li>Implement scan queue management</li> </ul>"
    },
    {
      "location": "development/task-scheduler-fix/#troubleshooting",
      "title": "Troubleshooting",
      "text": ""
    },
    {
      "location": "development/task-scheduler-fix/#if-scans-still-fail-after-this-fix",
      "title": "If scans still fail after this fix:",
      "text": "<ol> <li>Check SSH connectivity: <code>ssh -l username hostname</code></li> <li>Verify config.toml has correct hostnames</li> <li>Ensure SSH keys are properly mounted</li> <li>Check network connectivity from Docker containers</li> <li>Verify username is configured for hosts</li> </ol>"
    },
    {
      "location": "development/task-scheduler-fix/#common-ssh-issues",
      "title": "Common SSH Issues:",
      "text": "<ul> <li>Missing username in host configuration</li> <li>SSH keys not accessible or wrong permissions</li> <li>Host not reachable from Docker network</li> <li>SSH service not running on target host</li> <li>Firewall blocking SSH connections</li> </ul>"
    },
    {
      "location": "development/upgrades/",
      "title": "Upgrade Notes",
      "text": ""
    },
    {
      "location": "development/upgrades/#psycopg2-to-psycopg3-migration-2025-06-27",
      "title": "psycopg2 to psycopg3 Migration (2025-06-27)",
      "text": ""
    },
    {
      "location": "development/upgrades/#changes-made",
      "title": "Changes Made",
      "text": "<ol> <li>Dependencies Updated</li> <li>Replaced <code>psycopg2-binary&gt;=2.9.10</code> with <code>psycopg[binary]&gt;=3.1.0</code> in <code>pyproject.toml</code></li> <li> <p>psycopg3 version 3.2.9 was installed</p> </li> <li> <p>Database URL Updated</p> </li> <li>Changed database URL dialect from <code>postgresql://</code> to <code>postgresql+psycopg://</code></li> <li>Updated in <code>web-app/app/config.py</code> (default configuration)</li> <li> <p>Updated in <code>compose.yml</code> (all service environment variables)</p> </li> <li> <p>Compatibility</p> </li> <li>No code changes required as SQLAlchemy handles the driver abstraction</li> <li>All existing models and database operations remain unchanged</li> <li>Docker configuration remains the same (libpq-dev still required)</li> </ol>"
    },
    {
      "location": "development/upgrades/#benefits-of-psycopg3",
      "title": "Benefits of psycopg3",
      "text": "<ul> <li>Better performance and memory usage</li> <li>Improved async support</li> <li>Better type annotations</li> <li>More modern codebase</li> <li>Active development and support</li> </ul>"
    },
    {
      "location": "development/upgrades/#testing",
      "title": "Testing",
      "text": "<ul> <li>All models import successfully</li> <li>Database engine creation works correctly</li> <li>SQLAlchemy integration verified</li> <li>No breaking changes to existing functionality</li> </ul>"
    },
    {
      "location": "development/upgrades/#rollback-instructions",
      "title": "Rollback Instructions",
      "text": "<p>If rollback is needed:</p> <ol> <li>Change <code>psycopg[binary]&gt;=3.1.0</code> back to <code>psycopg2-binary&gt;=2.9.10</code> in <code>pyproject.toml</code></li> <li>Change all <code>postgresql+psycopg://</code> URLs back to <code>postgresql://</code></li> <li>Run <code>uv sync</code> to reinstall dependencies</li> </ol>"
    },
    {
      "location": "development/vulnerability-version-analysis/",
      "title": "Vulnerability Version Analysis - False Positive Investigation",
      "text": ""
    },
    {
      "location": "development/vulnerability-version-analysis/#overview",
      "title": "Overview",
      "text": "<p>This document analyzes the vulnerability analysis system's version matching logic to identify and address potential false positives, particularly for curl vulnerabilities on the anisette_v3 server.</p>"
    },
    {
      "location": "development/vulnerability-version-analysis/#issues-identified",
      "title": "Issues Identified",
      "text": ""
    },
    {
      "location": "development/vulnerability-version-analysis/#1-critical-version-comparison-problems",
      "title": "1. Critical Version Comparison Problems",
      "text": "<p>The original vulnerability analysis had several critical issues with Debian version comparison:</p>"
    },
    {
      "location": "development/vulnerability-version-analysis/#problem-1-debian-security-updates-ignored",
      "title": "Problem 1: Debian Security Updates Ignored",
      "text": "<ul> <li>Issue: Debian security updates (e.g., <code>+deb12u12</code>) were stripped during version comparison</li> <li>Impact: False negatives - missing that newer Debian patches fix vulnerabilities</li> <li>Example: <code>7.88.1-10+deb12u12</code> vs <code>7.88.1-10+deb12u5</code> both became <code>7.88.1</code></li> <li>Result: System couldn't detect that u12 is newer than u5</li> </ul>"
    },
    {
      "location": "development/vulnerability-version-analysis/#problem-2-epoch-versions-not-handled",
      "title": "Problem 2: Epoch Versions Not Handled",
      "text": "<ul> <li>Issue: Debian epoch versions (e.g., <code>1:7.88.1</code>) were not parsed correctly</li> <li>Impact: Incorrect version comparisons with epoch versions</li> <li>Example: <code>1:7.88.1</code> vs <code>7.89.0</code> - epoch should make 1:7.88.1 newer</li> </ul>"
    },
    {
      "location": "development/vulnerability-version-analysis/#problem-3-pre-release-version-inconsistency",
      "title": "Problem 3: Pre-release Version Inconsistency",
      "text": "<ul> <li>Issue: Pre-release versions with <code>~</code> were not handled consistently</li> <li>Impact: False positives/negatives with pre-release versions</li> <li>Example: <code>7.88.0~rc1</code> vs <code>7.88.0</code> comparison was unreliable</li> </ul>"
    },
    {
      "location": "development/vulnerability-version-analysis/#problem-4-default-to-vulnerable-on-parse-errors",
      "title": "Problem 4: Default to Vulnerable on Parse Errors",
      "text": "<ul> <li>Issue: When version parsing failed, system defaulted to \"vulnerable\"</li> <li>Impact: False positives when version strings couldn't be parsed</li> <li>Result: Many false alarms for packages with complex version strings</li> </ul>"
    },
    {
      "location": "development/vulnerability-version-analysis/#2-test-results-comparison",
      "title": "2. Test Results Comparison",
      "text": ""
    },
    {
      "location": "development/vulnerability-version-analysis/#original-system-results",
      "title": "Original System Results",
      "text": "<pre><code>\u2717 Installed version is older patch\n   Installed: 7.88.1-10+deb12u5 -&gt; 7.88.1\n   Fixed:     7.88.1-10+deb12u12 -&gt; 7.88.1\n   Expected:  Vulnerable\n   Got:       Safe\n   \u26a0\ufe0f  MISMATCH! This could be a false positive/negative\n\n\u2717 Older Debian patch\n   Installed: 7.74.0-1.3+deb11u7 -&gt; 7.74.0\n   Fixed:     7.74.0-1.3+deb11u11 -&gt; 7.74.0\n   Expected:  Vulnerable\n   Got:       Safe\n   \u26a0\ufe0f  MISMATCH! This could be a false positive/negative\n</code></pre>"
    },
    {
      "location": "development/vulnerability-version-analysis/#improved-system-results",
      "title": "Improved System Results",
      "text": "<pre><code>\u2713 Newer security patch installed\n\u2713 Older security patch installed\n\u2713 Major version difference\n\u2713 Newer major version\n\u2713 Epoch version handling\n\u2713 Pre-release version\n</code></pre>"
    },
    {
      "location": "development/vulnerability-version-analysis/#solution-implemented",
      "title": "Solution Implemented",
      "text": ""
    },
    {
      "location": "development/vulnerability-version-analysis/#1-enhanced-debian-version-parsing",
      "title": "1. Enhanced Debian Version Parsing",
      "text": "<pre><code>def parse_debian_version(self, version_str: str) -&gt; Dict[str, str]:\n    \"\"\"\n    Parse a Debian version string into its components.\n    Format: [epoch:]upstream_version[-debian_revision][+build_info]\n    \"\"\"\n    # Handles epoch, upstream, debian revision, and build info separately\n</code></pre>"
    },
    {
      "location": "development/vulnerability-version-analysis/#2-proper-version-component-comparison",
      "title": "2. Proper Version Component Comparison",
      "text": "<p>The improved system compares versions in the correct order:</p> <ol> <li>Epoch (if present)</li> <li>Upstream version (using packaging library)</li> <li>Debian revision (numeric comparison)</li> <li>Security updates (extract and compare u-numbers)</li> </ol>"
    },
    {
      "location": "development/vulnerability-version-analysis/#3-security-update-number-extraction",
      "title": "3. Security Update Number Extraction",
      "text": "<pre><code>def _extract_security_update_number(self, build_info: str) -&gt; Optional[int]:\n    \"\"\"Extract security update number from build info (e.g., deb12u12 -&gt; 12).\"\"\"\n    match = re.search(r\"deb\\d+u(\\d+)\", build_info)\n    if match:\n        return int(match.group(1))\n    return None\n</code></pre>"
    },
    {
      "location": "development/vulnerability-version-analysis/#4-vulnerability-validation-and-confidence-scoring",
      "title": "4. Vulnerability Validation and Confidence Scoring",
      "text": "<p>Added validation to filter out false positives:</p> <pre><code>def validate_vulnerability_match(self, vulnerability: Dict) -&gt; bool:\n    \"\"\"Validate if a vulnerability match is likely to be accurate.\"\"\"\n    # Checks for common false positive patterns\n\ndef generate_vulnerability_confidence_score(self, vulnerability: Dict) -&gt; float:\n    \"\"\"Generate a confidence score for a vulnerability match (0.0 to 1.0).\"\"\"\n    # Provides confidence scoring for each vulnerability\n</code></pre>"
    },
    {
      "location": "development/vulnerability-version-analysis/#curl-vulnerability-analysis",
      "title": "Curl Vulnerability Analysis",
      "text": ""
    },
    {
      "location": "development/vulnerability-version-analysis/#common-curl-false-positive-scenarios",
      "title": "Common Curl False Positive Scenarios",
      "text": "<ol> <li>Backported Security Fixes</li> <li>Debian often backports security fixes to older versions</li> <li>CVE databases may list upstream version requirements</li> <li> <p>Debian version may appear vulnerable but actually has the fix</p> </li> <li> <p>Complex Version Strings</p> </li> <li>Curl versions like <code>7.88.1-10+deb12u12</code> are complex</li> <li>Original system stripped important security update info</li> <li> <p>Led to incorrect vulnerability assessments</p> </li> <li> <p>Version Mismatch Between Databases</p> </li> <li>OVAL database may have different version format than installed packages</li> <li>GOST database may not have precise fixed version info</li> <li>Cross-referencing needed for accuracy</li> </ol>"
    },
    {
      "location": "development/vulnerability-version-analysis/#recommendations-for-curl-analysis",
      "title": "Recommendations for Curl Analysis",
      "text": "<ol> <li>Use Improved Version Comparison</li> <li>Implement the enhanced Debian version parsing</li> <li>Properly handle security update numbers</li> <li> <p>Consider epoch versions</p> </li> <li> <p>Cross-Reference Multiple Sources</p> </li> <li>Check both OVAL and GOST databases</li> <li>Validate against Debian Security Tracker</li> <li> <p>Use confidence scoring to prioritize results</p> </li> <li> <p>Manual Verification for High-Impact</p> </li> <li>For critical vulnerabilities, manually verify</li> <li>Check Debian security advisories</li> <li>Confirm actual package contents</li> </ol>"
    },
    {
      "location": "development/vulnerability-version-analysis/#implementation-status",
      "title": "Implementation Status",
      "text": ""
    },
    {
      "location": "development/vulnerability-version-analysis/#files-updated",
      "title": "Files Updated",
      "text": "<ul> <li><code>improved_vulnerability_service.py</code> - New enhanced service</li> <li><code>test_version_comparison.py</code> - Test suite for version logic</li> <li><code>docs/development/vulnerability-version-analysis.md</code> - This analysis</li> </ul>"
    },
    {
      "location": "development/vulnerability-version-analysis/#next-steps",
      "title": "Next Steps",
      "text": "<ol> <li>Integrate improved service into main application</li> <li>Update existing vulnerability analysis tasks</li> <li>Add logging for version comparison decisions</li> <li>Implement Debian Security Tracker integration</li> <li>Create whitelist for known false positives</li> </ol>"
    },
    {
      "location": "development/vulnerability-version-analysis/#testing-recommendations",
      "title": "Testing Recommendations",
      "text": ""
    },
    {
      "location": "development/vulnerability-version-analysis/#for-curl-specifically",
      "title": "For Curl Specifically",
      "text": "<ol> <li>Test with known curl versions from anisette_v3 server</li> <li>Verify against known CVEs affecting curl</li> <li>Check Debian security advisories for curl</li> <li>Compare results with manual vulnerability assessment</li> </ol>"
    },
    {
      "location": "development/vulnerability-version-analysis/#general-testing",
      "title": "General Testing",
      "text": "<ol> <li>Run test suite on various Debian version formats</li> <li>Test with packages that have backported fixes</li> <li>Validate against known vulnerability databases</li> <li>Monitor for false positive/negative rates</li> </ol>"
    },
    {
      "location": "development/vulnerability-version-analysis/#conclusion",
      "title": "Conclusion",
      "text": "<p>The original vulnerability analysis system had significant issues with Debian version comparison that could lead to both false positives and false negatives. The improved system addresses these issues by:</p> <ol> <li>Properly parsing all components of Debian version strings</li> <li>Correctly comparing security update numbers</li> <li>Handling epoch versions and pre-release versions</li> <li>Adding validation and confidence scoring</li> <li>Providing better logging and debugging information</li> </ol> <p>For the curl vulnerability on anisette_v3 server, the improved system should provide more accurate results by properly handling Debian security updates and version comparisons.</p>"
    },
    {
      "location": "development/websocket-implementation-complete/",
      "title": "WebSocket Implementation Complete",
      "text": ""
    },
    {
      "location": "development/websocket-implementation-complete/#summary",
      "title": "Summary",
      "text": "<p>The scheduler page has been successfully migrated from polling-based updates to a complete WebSocket-driven real-time notification system.</p>"
    },
    {
      "location": "development/websocket-implementation-complete/#what-was-accomplished",
      "title": "\u2705 What Was Accomplished",
      "text": ""
    },
    {
      "location": "development/websocket-implementation-complete/#1-polling-removal",
      "title": "1. Polling Removal",
      "text": "<ul> <li>Removed all <code>setInterval</code> polling from scheduler page</li> <li>Eliminated <code>monitorTaskExecution()</code> function</li> <li>Removed periodic API calls for task status updates</li> <li>Updated fallback behavior to show error messages instead of polling</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#2-websocket-integration",
      "title": "2. WebSocket Integration",
      "text": "<ul> <li>Enhanced existing WebSocket infrastructure</li> <li>Integrated Redis pub/sub with WebSocket notifications</li> <li>Added real-time task completion notifications</li> <li>Implemented automatic reconnection handling</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#3-task-notification-system",
      "title": "3. Task Notification System",
      "text": "<ul> <li>Updated <code>update_task_status()</code> to publish Redis notifications</li> <li>Added comprehensive logging and error handling</li> <li>Integrated with existing Celery task system</li> <li>Ensured notifications work for both scan and database update tasks</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#4-comprehensive-testing",
      "title": "4. Comprehensive Testing",
      "text": "<ul> <li>Created test suite in <code>web-app/app/tests/</code></li> <li>Verified Redis connection and pub/sub functionality</li> <li>Tested WebSocket connection and communication</li> <li>Validated end-to-end notification delivery</li> <li>Confirmed task completion notification flow</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#test-results",
      "title": "\u2705 Test Results",
      "text": "<p>All tests pass successfully:</p> <pre><code># Redis functionality\ndocker exec vuls-web-dev uv run python -m app.tests.test_redis\n\u2705 Redis connection successful\n\u2705 Notification published successfully\n\u2705 Redis pub/sub has 1 subscriber\n\n# WebSocket connection\ndocker exec vuls-web-dev uv run python -m app.tests.test_websocket_client\n\u2705 WebSocket connected successfully!\n\u2705 Ping/pong communication working\n\n# End-to-end notification delivery\ndocker exec vuls-web-dev uv run python -m app.tests.test_end_to_end\n\u2705 WebSocket connected\n\u2705 Notification published\n\u2705 Message delivered via WebSocket\n\u2705 Complete notification data received\n</code></pre>"
    },
    {
      "location": "development/websocket-implementation-complete/#system-architecture",
      "title": "\u2705 System Architecture",
      "text": ""
    },
    {
      "location": "development/websocket-implementation-complete/#before-polling-based",
      "title": "Before (Polling-based)",
      "text": "<pre><code>Browser \u2192 Periodic API calls \u2192 Server\n        \u2190 JSON responses    \u2190\n</code></pre>"
    },
    {
      "location": "development/websocket-implementation-complete/#after-websocket-based",
      "title": "After (WebSocket-based)",
      "text": "<pre><code>Browser \u2190\u2192 WebSocket \u2190\u2192 Server\n              \u2191\n         Redis Pub/Sub\n              \u2191\n        Task Completion\n</code></pre>"
    },
    {
      "location": "development/websocket-implementation-complete/#performance-benefits",
      "title": "\u2705 Performance Benefits",
      "text": "<ul> <li>Eliminated server load from periodic API polling</li> <li>Real-time updates with instant task completion notifications</li> <li>Reduced bandwidth usage compared to polling</li> <li>Scalable architecture using efficient WebSocket connections</li> <li>Better user experience with immediate feedback</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#files-modified",
      "title": "\u2705 Files Modified",
      "text": ""
    },
    {
      "location": "development/websocket-implementation-complete/#core-application-files",
      "title": "Core Application Files",
      "text": "<ul> <li><code>web-app/app/templates/scheduler.html</code> - Removed polling, kept WebSocket</li> <li><code>web-app/app/tasks/task_utils.py</code> - Added notification publishing</li> <li><code>web-app/app/api/websocket.py</code> - Enhanced error handling</li> <li><code>web-app/app/utils/notification_service.py</code> - Improved logging</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#documentation",
      "title": "Documentation",
      "text": "<ul> <li><code>docs/development/websocket-migration-summary.md</code> - Complete migration guide</li> <li><code>docs/development/websocket-troubleshooting.md</code> - Troubleshooting guide</li> <li><code>docs/development/websocket-implementation-complete.md</code> - This summary</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#testing",
      "title": "Testing",
      "text": "<ul> <li><code>web-app/app/tests/test_redis.py</code> - Redis functionality tests</li> <li><code>web-app/app/tests/test_websocket_client.py</code> - WebSocket connection tests</li> <li><code>web-app/app/tests/test_end_to_end.py</code> - End-to-end notification tests</li> <li><code>web-app/app/tests/test_task_completion.py</code> - Task completion flow tests</li> <li><code>web-app/app/tests/README.md</code> - Test documentation</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#current-status",
      "title": "\u2705 Current Status",
      "text": "<p>The scheduler page is now 100% WebSocket-driven with:</p> <ul> <li>\u274c No polling intervals</li> <li>\u274c No periodic API calls</li> <li>\u2705 Real-time task notifications</li> <li>\u2705 Automatic UI updates</li> <li>\u2705 Manual refresh backup options</li> <li>\u2705 Comprehensive error handling</li> <li>\u2705 Automatic reconnection</li> <li>\u2705 Thorough test coverage</li> </ul>"
    },
    {
      "location": "development/websocket-implementation-complete/#verification",
      "title": "\u2705 Verification",
      "text": "<p>To verify the system is working:</p> <ol> <li>Check containers are running:</li> </ol> <pre><code>docker ps | grep -E \"(redis|web-dev|worker)\"\n</code></pre> <ol> <li>Run test suite:</li> </ol> <pre><code>docker exec vuls-web-dev uv run python -m app.tests.test_redis\ndocker exec vuls-web-dev uv run python -m app.tests.test_end_to_end\n</code></pre> <ol> <li>Test in browser:</li> <li>Open scheduler page</li> <li>Run a task</li> <li>Verify real-time notifications appear</li> <li>Check browser console for WebSocket messages</li> </ol>"
    },
    {
      "location": "development/websocket-implementation-complete/#migration-complete",
      "title": "\u2705 Migration Complete",
      "text": "<p>The WebSocket implementation is complete and fully functional. The scheduler page now provides real-time updates without any polling mechanisms, delivering a superior user experience with better performance and scalability.</p>"
    },
    {
      "location": "development/websocket-migration-summary/",
      "title": "WebSocket Migration Summary",
      "text": ""
    },
    {
      "location": "development/websocket-migration-summary/#overview",
      "title": "Overview",
      "text": "<p>Successfully migrated the scheduler page from polling-based updates to WebSocket-only real-time updates.</p>"
    },
    {
      "location": "development/websocket-migration-summary/#changes-made",
      "title": "Changes Made",
      "text": ""
    },
    {
      "location": "development/websocket-migration-summary/#1-scheduler-template-web-appapptemplatesschedulerhtml",
      "title": "1. Scheduler Template (<code>web-app/app/templates/scheduler.html</code>)",
      "text": "<p>Removed:</p> <ul> <li><code>monitorTaskExecution()</code> function that used polling intervals</li> <li>Fallback polling intervals (<code>setInterval</code> calls)</li> <li>Task monitoring via periodic API calls</li> </ul> <p>Updated:</p> <ul> <li><code>startPolling()</code> function now shows error message instead of starting polling</li> <li>Removed all <code>setInterval</code> calls for automatic updates</li> <li>Task execution monitoring now relies entirely on WebSocket notifications</li> </ul> <p>Kept:</p> <ul> <li>WebSocket connection with automatic reconnection</li> <li>Manual refresh buttons for user-initiated updates</li> <li>Real-time task update handling via <code>handleTaskUpdate()</code></li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#2-task-status-updates-web-appapptaskstask_utilspy",
      "title": "2. Task Status Updates (<code>web-app/app/tasks/task_utils.py</code>)",
      "text": "<p>Added:</p> <ul> <li>WebSocket notification publishing in <code>update_task_status()</code></li> <li>Automatic notification sending for task completion (success/failed)</li> <li>Integration with Redis pub/sub system via <code>publish_task_notification()</code></li> </ul> <p>Enhanced:</p> <ul> <li>Added <code>last_run_at</code> timestamp update for scheduled tasks</li> <li>Improved logging for WebSocket notification publishing</li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#3-websocket-infrastructure",
      "title": "3. WebSocket Infrastructure",
      "text": "<p>Existing Components (Verified Working):</p> <ul> <li><code>web-app/app/api/websocket.py</code> - WebSocket endpoint and connection manager</li> <li><code>web-app/app/utils/notification_service.py</code> - Redis pub/sub notification system</li> <li><code>web-app/app/tasks/scan_tasks.py</code> - Already sends notifications via Redis</li> <li><code>web-app/app/tasks/db_update_tasks.py</code> - Uses <code>update_task_status()</code> for notifications</li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#4-testing-tool",
      "title": "4. Testing Tool",
      "text": "<p>Created:</p> <ul> <li><code>web-app/test_websocket.py</code> - WebSocket connection test script</li> <li>Can verify real-time notifications are working</li> <li>Monitors task updates and connection health</li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#how-it-works",
      "title": "How It Works",
      "text": "<ol> <li>Task Execution:</li> <li>User clicks \"Run Now\" on a task</li> <li>Task starts and WebSocket shows \"Running...\" state</li> <li> <p>No polling occurs during execution</p> </li> <li> <p>Task Completion:</p> </li> <li>Task completes (success or failure)</li> <li><code>update_task_status()</code> is called</li> <li>Redis notification is published</li> <li>WebSocket receives notification via pub/sub</li> <li>UI updates automatically with completion status</li> <li> <p>Toast notification shows result</p> </li> <li> <p>Real-time Updates:</p> </li> <li>All updates come through WebSocket connection</li> <li>Automatic reconnection if connection drops</li> <li>Manual refresh buttons available as backup</li> </ol>"
    },
    {
      "location": "development/websocket-migration-summary/#benefits",
      "title": "Benefits",
      "text": "<ul> <li>Reduced Server Load: No more periodic API calls</li> <li>Real-time Updates: Instant notifications when tasks complete</li> <li>Better User Experience: Immediate feedback without delays</li> <li>Scalable: WebSocket connections are more efficient than polling</li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#fallback-behavior",
      "title": "Fallback Behavior",
      "text": "<ul> <li>If WebSocket connection fails after max retries, user sees error message</li> <li>Manual refresh buttons still work for getting current state</li> <li>No automatic polling fallback to prevent mixed update mechanisms</li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#testing",
      "title": "Testing",
      "text": "<p>Use the provided test script to verify WebSocket functionality:</p> <pre><code>cd web-app\npython test_websocket.py\n</code></pre> <p>This will:</p> <ul> <li>Connect to the WebSocket endpoint</li> <li>Listen for task update notifications</li> <li>Show real-time task completion events</li> <li>Verify the connection is working properly</li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#migration-complete",
      "title": "Migration Complete \u2705",
      "text": "<p>The scheduler page now operates entirely on WebSocket updates with no polling mechanisms. All task status changes are delivered in real-time through the WebSocket connection.</p>"
    },
    {
      "location": "development/websocket-migration-summary/#verification-and-testing",
      "title": "Verification and Testing",
      "text": "<p>The migration has been thoroughly tested with comprehensive test suite:</p> <p>Test Results:</p> <ul> <li>\u2705 Redis connection and pub/sub functionality</li> <li>\u2705 WebSocket connection and communication</li> <li>\u2705 End-to-end notification delivery</li> <li>\u2705 Task completion notification flow</li> </ul> <p>Test Location: <code>web-app/app/tests/</code></p> <p>Run Tests:</p> <pre><code># Test Redis functionality\ndocker exec vuls-web-dev uv run python -m app.tests.test_redis\n\n# Test WebSocket connection\ndocker exec vuls-web-dev uv run python -m app.tests.test_websocket_client\n\n# Test end-to-end notification delivery\ndocker exec vuls-web-dev uv run python -m app.tests.test_end_to_end\n</code></pre> <p>All tests pass, confirming the WebSocket notification system is working correctly.</p>"
    },
    {
      "location": "development/websocket-migration-summary/#performance-benefits",
      "title": "Performance Benefits",
      "text": "<ul> <li>Eliminated server load from periodic API polling</li> <li>Real-time updates with instant task completion notifications</li> <li>Scalable architecture using efficient WebSocket connections</li> <li>Reduced bandwidth usage compared to polling</li> </ul>"
    },
    {
      "location": "development/websocket-migration-summary/#system-status",
      "title": "System Status",
      "text": "<p>The scheduler page is now 100% WebSocket-driven with:</p> <ul> <li>No polling intervals</li> <li>No periodic API calls</li> <li>Real-time task notifications</li> <li>Automatic UI updates</li> <li>Manual refresh backup options</li> <li>Comprehensive error handling</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/",
      "title": "Real-Time WebSocket Notification System",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#overview",
      "title": "Overview",
      "text": "<p>The task scheduler has been upgraded from polling-based updates to a real-time WebSocket notification system. This provides instant feedback when scans complete, eliminating the 30-second polling delays and creating a modern, responsive user experience.</p>"
    },
    {
      "location": "development/websocket-realtime-system/#architecture",
      "title": "Architecture",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#system-components",
      "title": "System Components",
      "text": "<pre><code>graph TB\n    A[Web Browser] --&gt;|WebSocket| B[FastAPI Web App]\n    B --&gt;|Redis Subscribe| C[Redis Pub/Sub]\n    D[Celery Worker] --&gt;|Redis Publish| C\n    D --&gt;|Docker API| E[Docker Executor]\n    E --&gt;|Container| F[Vuls Scanner]\n\n    B --&gt;|WebSocket Manager| G[Connection Manager]\n    G --&gt;|Broadcast| A\n\n    H[Notification Service] --&gt;|Subscribe| C\n    H --&gt;|Forward| G</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#data-flow",
      "title": "Data Flow",
      "text": "<ol> <li>User triggers scan \u2192 Web interface sends request</li> <li>Celery worker starts scan \u2192 Calls Docker executor service</li> <li>Scan completes \u2192 Worker publishes Redis notification</li> <li>Web app receives notification \u2192 Redis subscriber forwards to WebSocket manager</li> <li>WebSocket broadcasts \u2192 All connected clients receive instant update</li> <li>UI updates immediately \u2192 Toast notification + recent activity refresh</li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#implementation-details",
      "title": "Implementation Details",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#redis-pubsub-notification-service",
      "title": "Redis Pub/Sub Notification Service",
      "text": "<p>File: <code>web-app/app/utils/notification_service.py</code></p> <pre><code>def publish_task_notification(task_id: int, task_run_id: int, status: str, task_name: str = None, result_data: dict = None):\n    \"\"\"Publish a task notification via Redis pub/sub\"\"\"\n    notification = {\n        \"type\": \"task_update\",\n        \"data\": {\n            \"task_id\": task_id,\n            \"task_run_id\": task_run_id,\n            \"status\": status,\n            \"task_name\": task_name,\n            \"result_data\": result_data or {},\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n    }\n    redis_client.publish(NOTIFICATION_CHANNEL, json.dumps(notification))\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#websocket-connection-manager",
      "title": "WebSocket Connection Manager",
      "text": "<p>File: <code>web-app/app/api/websocket.py</code></p> <pre><code>class ConnectionManager:\n    def __init__(self):\n        self.active_connections: Dict[str, WebSocket] = {}\n\n    async def broadcast(self, message: Dict[str, Any]):\n        \"\"\"Broadcast message to all connected WebSocket clients\"\"\"\n        disconnected = []\n        for user_id, connection in self.active_connections.items():\n            try:\n                await connection.send_text(json.dumps(message))\n            except Exception as e:\n                disconnected.append(user_id)\n\n        # Clean up disconnected connections\n        for user_id in disconnected:\n            self.disconnect(user_id)\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#celery-task-integration",
      "title": "Celery Task Integration",
      "text": "<p>File: <code>web-app/app/tasks/scan_tasks.py</code></p> <pre><code>def send_task_notification(task_id: int, task_run_id: int, status: str, task_name: str = None, result_data: dict = None):\n    \"\"\"Send task notification via Redis pub/sub\"\"\"\n    from ..utils.notification_service import publish_task_notification\n    publish_task_notification(task_id, task_run_id, status, task_name, result_data)\n\n# Called when scan completes\nsend_task_notification(\n    task_id=0,\n    task_run_id=task_run_id,\n    status=\"success\",\n    task_name=f\"Scan {host.name}\",\n    result_data=result_data\n)\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#frontend-websocket-client",
      "title": "Frontend WebSocket Client",
      "text": "<p>File: <code>web-app/app/templates/scheduler.html</code></p> <pre><code>function connectWebSocket() {\n  const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n  const wsUrl = `${protocol}//${window.location.host}/api/ws`;\n\n  ws = new WebSocket(wsUrl);\n\n  ws.onmessage = function (event) {\n    // Handle ping/pong responses\n    if (event.data === \"pong\" || event.data.startsWith(\"Echo:\")) {\n      return;\n    }\n\n    const message = JSON.parse(event.data);\n    if (message.type === \"task_update\") {\n      handleTaskUpdate(message.data);\n    }\n  };\n}\n\nfunction handleTaskUpdate(data) {\n  // Show notification for task completion\n  if (data.status === \"success\") {\n    showNotification(\n      `Task completed successfully: ${data.task_name}`,\n      \"success\",\n    );\n  } else if (data.status === \"failed\") {\n    showNotification(`Task failed: ${data.task_name}`, \"error\");\n  }\n\n  // Refresh the UI components immediately\n  loadTasks();\n  loadRecentActivity();\n  loadRunningJobs();\n}\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#configuration",
      "title": "Configuration",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#redis-configuration",
      "title": "Redis Configuration",
      "text": "<p>File: <code>web-app/app/config.py</code></p> <pre><code>class Settings(BaseSettings):\n    # Redis configuration for pub/sub\n    redis_url: str = \"redis://vuls-redis:6379\"\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#websocket-dependencies",
      "title": "WebSocket Dependencies",
      "text": "<p>File: <code>web-app/pyproject.toml</code></p> <pre><code>dependencies = [\n    \"websockets&gt;=12.0\",  # Added for WebSocket support\n    # ... other dependencies\n]\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#application-startup",
      "title": "Application Startup",
      "text": "<p>File: <code>web-app/app/main.py</code></p> <pre><code>@app.on_event(\"startup\")\nasync def startup_event():\n    \"\"\"Initialize Redis notification subscriber on startup\"\"\"\n    from .utils.notification_service import NotificationSubscriber\n    from .api.websocket import manager\n\n    subscriber = NotificationSubscriber(manager)\n    await subscriber.start_listening()\n    print(\"Redis notification subscriber started\")\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#message-format",
      "title": "Message Format",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#websocket-message-structure",
      "title": "WebSocket Message Structure",
      "text": "<pre><code>{\n  \"type\": \"task_update\",\n  \"data\": {\n    \"task_id\": 0,\n    \"task_run_id\": 15,\n    \"status\": \"success\",\n    \"task_name\": \"Scan anisette_v3\",\n    \"result_data\": {\n      \"scan_id\": 23,\n      \"vulnerabilities\": 0,\n      \"critical\": 0,\n      \"high\": 0,\n      \"medium\": 0,\n      \"low\": 0\n    },\n    \"timestamp\": \"2025-06-27T15:49:26.760966\"\n  }\n}\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#status-types",
      "title": "Status Types",
      "text": "<ul> <li><code>success</code>: Scan completed successfully</li> <li><code>failed</code>: Scan failed with error</li> <li><code>started</code>: Scan has begun (future enhancement)</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#benefits",
      "title": "Benefits",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#user-experience",
      "title": "User Experience",
      "text": "<ul> <li>Instant feedback: No more 30-second polling delays</li> <li>Real-time updates: UI refreshes immediately when scans complete</li> <li>Modern interface: WebSocket-powered live notifications</li> <li>Better responsiveness: Immediate toast notifications</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#technical-advantages",
      "title": "Technical Advantages",
      "text": "<ul> <li>Reduced server load: No constant polling requests</li> <li>Scalable architecture: Redis pub/sub handles multiple clients efficiently</li> <li>Separation of concerns: Clean separation between worker and web app</li> <li>Reliable delivery: Redis ensures message delivery between services</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#performance-improvements",
      "title": "Performance Improvements",
      "text": "<ul> <li>Before: 30-second polling intervals, delayed updates</li> <li>After: Instant updates, sub-second notification delivery</li> <li>Network efficiency: Fewer HTTP requests, persistent WebSocket connections</li> <li>Resource optimization: No unnecessary polling overhead</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#monitoring-and-debugging",
      "title": "Monitoring and Debugging",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#websocket-connection-status",
      "title": "WebSocket Connection Status",
      "text": "<p>Check WebSocket connections in browser developer tools:</p> <pre><code>// In browser console\nconsole.log(\"WebSocket state:\", ws.readyState);\n// 0: CONNECTING, 1: OPEN, 2: CLOSING, 3: CLOSED\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#redis-pubsub-monitoring",
      "title": "Redis Pub/Sub Monitoring",
      "text": "<p>Monitor Redis notifications:</p> <pre><code># Connect to Redis container\ndocker exec -it vuls-redis redis-cli\n\n# Monitor pub/sub messages\nMONITOR\n\n# Or subscribe to notification channel\nSUBSCRIBE task_notifications\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#application-logs",
      "title": "Application Logs",
      "text": "<p>Check notification system logs:</p> <pre><code># Web application logs\ndocker logs vuls-web-dev | grep -E \"(notification|Redis|WebSocket)\"\n\n# Worker logs\ndocker logs vuls-worker | grep -E \"(Published|notification)\"\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#example-log-messages",
      "title": "Example Log Messages",
      "text": "<p>Successful notification flow:</p> <pre><code># Worker publishes notification\n[2025-06-27 15:46:08,312: INFO/ForkPoolWorker-16] Published task notification: success for task_run_id 14\n\n# Web app receives and forwards\nRedis notification subscriber started\nForwarded notification to WebSocket clients: success\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#error-handling-and-fallback",
      "title": "Error Handling and Fallback",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#automatic-reconnection",
      "title": "Automatic Reconnection",
      "text": "<p>The frontend implements automatic WebSocket reconnection:</p> <pre><code>ws.onclose = function (event) {\n  if (wsReconnectAttempts &lt; maxReconnectAttempts) {\n    wsReconnectAttempts++;\n    setTimeout(connectWebSocket, 2000 * wsReconnectAttempts);\n  } else {\n    // Fall back to polling if WebSocket fails\n    startPolling();\n  }\n};\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#graceful-degradation",
      "title": "Graceful Degradation",
      "text": "<p>If WebSocket connection fails:</p> <ol> <li>Automatic reconnection: Up to 5 attempts with exponential backoff</li> <li>Polling fallback: Reverts to 30-second polling if WebSocket unavailable</li> <li>User notification: Console logs indicate connection status</li> <li>Seamless operation: UI continues to function normally</li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#redis-connection-handling",
      "title": "Redis Connection Handling",
      "text": "<p>Redis connection failures are handled gracefully:</p> <pre><code>try:\n    redis_client.publish(NOTIFICATION_CHANNEL, json.dumps(notification))\n    logger.info(f\"Published task notification: {status}\")\nexcept Exception as e:\n    logger.error(f\"Error publishing task notification: {e}\")\n    # Task continues normally, just without real-time notification\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#testing",
      "title": "Testing",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#manual-testing",
      "title": "Manual Testing",
      "text": "<ol> <li>Open scheduler page in browser</li> <li>Open developer tools \u2192 Network tab \u2192 WS filter</li> <li>Trigger a scan via the interface</li> <li>Observe WebSocket messages in real-time</li> <li>Verify UI updates happen immediately</li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#websocket-message-testing",
      "title": "WebSocket Message Testing",
      "text": "<p>Test WebSocket notifications directly:</p> <pre><code># From worker container\ndocker exec vuls-worker uv run python -c \"\nfrom app.tasks.scan_tasks import send_task_notification\nsend_task_notification(999, 888, 'success', 'Test Notification', {'test': 'data'})\n\"\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#integration-testing",
      "title": "Integration Testing",
      "text": "<p>Verify complete flow:</p> <pre><code># Trigger actual scan and monitor notifications\nfrom app.tasks.scan_tasks import run_vulnerability_scan\nresult = run_vulnerability_scan(host_id=2, scan_type='fast', task_run_id=999)\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#troubleshooting",
      "title": "Troubleshooting",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#common-issues",
      "title": "Common Issues",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#websocket-connection-fails",
      "title": "WebSocket Connection Fails",
      "text": "<p>Symptoms: No real-time updates, console shows connection errors</p> <p>Solutions:</p> <ol> <li>Check if web application is running: <code>docker ps | grep vuls-web</code></li> <li>Verify WebSocket endpoint: <code>curl -i -N -H \"Connection: Upgrade\" -H \"Upgrade: websocket\" http://localhost:8000/api/ws</code></li> <li>Check browser console for connection errors</li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#redis-notifications-not-publishing",
      "title": "Redis Notifications Not Publishing",
      "text": "<p>Symptoms: WebSocket connects but no messages received</p> <p>Solutions:</p> <ol> <li>Check Redis container: <code>docker ps | grep vuls-redis</code></li> <li>Verify Redis connectivity: <code>docker exec vuls-worker redis-cli -h vuls-redis ping</code></li> <li>Check worker logs for publish errors: <code>docker logs vuls-worker | grep notification</code></li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#ui-not-updating-despite-websocket-messages",
      "title": "UI Not Updating Despite WebSocket Messages",
      "text": "<p>Symptoms: WebSocket messages received but UI doesn't refresh</p> <p>Solutions:</p> <ol> <li>Check browser console for JavaScript errors</li> <li>Verify <code>handleTaskUpdate</code> function is called</li> <li>Check if polling fallback is interfering</li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#debug-commands",
      "title": "Debug Commands",
      "text": "<pre><code># Check WebSocket endpoint health\ncurl -f http://localhost:8000/health\n\n# Monitor Redis pub/sub activity\ndocker exec vuls-redis redis-cli MONITOR\n\n# Test Redis connectivity from worker\ndocker exec vuls-worker uv run python -c \"\nimport redis\nr = redis.from_url('redis://vuls-redis:6379')\nprint(r.ping())\n\"\n\n# Check WebSocket connections\ndocker logs vuls-web-dev | grep WebSocket\n</code></pre>"
    },
    {
      "location": "development/websocket-realtime-system/#future-enhancements",
      "title": "Future Enhancements",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#planned-improvements",
      "title": "Planned Improvements",
      "text": "<ol> <li>User Authentication: Associate WebSocket connections with specific users</li> <li>Scan Progress Updates: Real-time progress indicators during scans</li> <li>Multiple Notification Types: Support for different event types</li> <li>Message Persistence: Store notifications for offline users</li> <li>Rate Limiting: Prevent notification spam</li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#scalability-considerations",
      "title": "Scalability Considerations",
      "text": "<ol> <li>Multiple Web App Instances: Redis pub/sub scales across multiple app instances</li> <li>WebSocket Load Balancing: Sticky sessions for WebSocket connections</li> <li>Redis Clustering: Scale Redis for high-throughput notifications</li> <li>Message Queuing: Buffer notifications during high load</li> </ol>"
    },
    {
      "location": "development/websocket-realtime-system/#security-considerations",
      "title": "Security Considerations",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#websocket-security",
      "title": "WebSocket Security",
      "text": "<ul> <li>Origin Validation: Verify WebSocket connection origins</li> <li>Authentication: Implement user-based WebSocket authentication</li> <li>Rate Limiting: Prevent WebSocket abuse</li> <li>Message Validation: Sanitize all WebSocket messages</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#redis-security",
      "title": "Redis Security",
      "text": "<ul> <li>Network Isolation: Redis accessible only within Docker network</li> <li>Authentication: Consider Redis AUTH for production</li> <li>Encryption: Use TLS for Redis connections in production</li> <li>Access Control: Limit Redis access to authorized services</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#performance-metrics",
      "title": "Performance Metrics",
      "text": ""
    },
    {
      "location": "development/websocket-realtime-system/#before-polling-system",
      "title": "Before (Polling System)",
      "text": "<ul> <li>Update Delay: 30 seconds maximum</li> <li>Network Requests: Constant polling every 30 seconds</li> <li>Server Load: Continuous HTTP requests from all clients</li> <li>User Experience: Delayed feedback, stale information</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#after-websocket-system",
      "title": "After (WebSocket System)",
      "text": "<ul> <li>Update Delay: &lt; 1 second (typically 100-500ms)</li> <li>Network Requests: Single WebSocket connection per client</li> <li>Server Load: Minimal, event-driven updates only</li> <li>User Experience: Instant feedback, real-time information</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#measured-performance",
      "title": "Measured Performance",
      "text": "<ul> <li>Notification Delivery: ~200-500ms from scan completion to UI update</li> <li>WebSocket Overhead: ~1KB per connection</li> <li>Redis Pub/Sub Latency: &lt; 10ms within Docker network</li> <li>Browser Responsiveness: Immediate UI updates, no polling delays</li> </ul>"
    },
    {
      "location": "development/websocket-realtime-system/#conclusion",
      "title": "Conclusion",
      "text": "<p>The real-time WebSocket notification system transforms the task scheduler from a polling-based interface to a modern, responsive application. Users now receive instant feedback when scans complete, creating a much better user experience while reducing server load and improving system efficiency.</p> <p>The architecture is designed for scalability, reliability, and maintainability, with proper error handling and fallback mechanisms to ensure the system continues to function even if WebSocket connections fail.</p>"
    },
    {
      "location": "development/websocket-troubleshooting/",
      "title": "WebSocket Troubleshooting Guide",
      "text": ""
    },
    {
      "location": "development/websocket-troubleshooting/#issue-websocket-messages-not-received",
      "title": "Issue: WebSocket Messages Not Received",
      "text": "<p>If you're not seeing WebSocket messages when tasks complete, follow these troubleshooting steps:</p>"
    },
    {
      "location": "development/websocket-troubleshooting/#1-check-redis-connection",
      "title": "1. Check Redis Connection",
      "text": "<p>First, verify that Redis is running and accessible:</p> <pre><code>docker exec vuls-web-dev uv run python -m app.tests.test_redis\n</code></pre> <p>Expected output:</p> <pre><code>\u2705 Redis connection successful\n\u2705 Notification published successfully\n\ud83d\udce1 Published to Redis, subscribers: 1\n</code></pre>"
    },
    {
      "location": "development/websocket-troubleshooting/#2-test-websocket-connection",
      "title": "2. Test WebSocket Connection",
      "text": "<p>Test the WebSocket connection:</p> <pre><code>docker exec vuls-web-dev uv run python -m app.tests.test_websocket_client\n</code></pre> <p>Expected output:</p> <pre><code>\u2705 WebSocket connected successfully!\n\ud83d\udce4 Sent ping\n\ud83d\udce5 Received pong - connection working!\n</code></pre>"
    },
    {
      "location": "development/websocket-troubleshooting/#3-test-end-to-end-notification",
      "title": "3. Test End-to-End Notification",
      "text": "<p>Test the complete notification flow:</p> <pre><code>docker exec vuls-web-dev uv run python -m app.tests.test_end_to_end\n</code></pre> <p>Expected output:</p> <pre><code>\u2705 WebSocket connected\n\ud83d\udce4 Publishing test notification...\n\ud83c\udfaf Received task update!\n\u2705 End-to-end notification test PASSED!\n</code></pre>"
    },
    {
      "location": "development/websocket-troubleshooting/#4-check-application-logs",
      "title": "4. Check Application Logs",
      "text": "<p>Look for these log messages in your application:</p> <p>WebSocket Connection:</p> <pre><code>WebSocket connected for user anonymous. Total connections: 1\nRedis notification subscriber started on first WebSocket connection\n</code></pre> <p>Task Completion:</p> <pre><code>Published task notification: success for task_run_id 123, subscribers: 1\nForwarded notification to WebSocket clients: success\n</code></pre>"
    },
    {
      "location": "development/websocket-troubleshooting/#5-common-issues-and-solutions",
      "title": "5. Common Issues and Solutions",
      "text": ""
    },
    {
      "location": "development/websocket-troubleshooting/#redis-not-running",
      "title": "Redis Not Running",
      "text": "<p>Symptoms: <code>Redis connection failed</code> error Solution: Start Redis service or check Docker Compose configuration</p>"
    },
    {
      "location": "development/websocket-troubleshooting/#no-subscribers",
      "title": "No Subscribers",
      "text": "<p>Symptoms: <code>subscribers: 0</code> in logs Solution: Ensure WebSocket connection is established before running tasks</p>"
    },
    {
      "location": "development/websocket-troubleshooting/#websocket-not-starting-subscriber",
      "title": "WebSocket Not Starting Subscriber",
      "text": "<p>Symptoms: No \"Redis notification subscriber started\" message Solution: Check for errors in WebSocket endpoint initialization</p>"
    },
    {
      "location": "development/websocket-troubleshooting/#task-not-publishing-notifications",
      "title": "Task Not Publishing Notifications",
      "text": "<p>Symptoms: No \"Published task notification\" messages Solution: Verify <code>update_task_status()</code> is being called in task completion</p>"
    },
    {
      "location": "development/websocket-troubleshooting/#6-debug-mode",
      "title": "6. Debug Mode",
      "text": "<p>Enable debug logging by setting log level to DEBUG in your application configuration.</p>"
    },
    {
      "location": "development/websocket-troubleshooting/#7-manual-redis-test",
      "title": "7. Manual Redis Test",
      "text": "<p>Test Redis pub/sub manually:</p> <p>Terminal 1 (Subscribe):</p> <pre><code>redis-cli SUBSCRIBE task_notifications\n</code></pre> <p>Terminal 2 (Publish):</p> <pre><code>redis-cli PUBLISH task_notifications '{\"type\":\"task_update\",\"data\":{\"status\":\"test\"}}'\n</code></pre>"
    },
    {
      "location": "development/websocket-troubleshooting/#8-docker-environment",
      "title": "8. Docker Environment",
      "text": "<p>If running in Docker, ensure:</p> <ul> <li>Redis container is running: <code>docker ps | grep redis</code></li> <li>Network connectivity between containers</li> <li>Environment variables are correctly set</li> </ul>"
    },
    {
      "location": "development/websocket-troubleshooting/#9-celery-worker-logs",
      "title": "9. Celery Worker Logs",
      "text": "<p>Check Celery worker logs for task execution:</p> <pre><code>docker logs vuls-worker\n</code></pre> <p>Look for:</p> <ul> <li>Task execution messages</li> <li><code>update_task_status</code> calls</li> <li>Redis connection errors</li> </ul>"
    },
    {
      "location": "development/websocket-troubleshooting/#10-browser-developer-tools",
      "title": "10. Browser Developer Tools",
      "text": "<p>In the browser:</p> <ol> <li>Open Developer Tools (F12)</li> <li>Go to Console tab</li> <li>Look for WebSocket connection messages</li> <li>Check for JavaScript errors</li> </ol> <p>Expected console messages:</p> <pre><code>WebSocket connected\nReceived task update: Task Name - success\n</code></pre>"
    },
    {
      "location": "development/websocket-troubleshooting/#testing-checklist",
      "title": "Testing Checklist",
      "text": "<ul> <li> Redis is running and accessible</li> <li> WebSocket connects successfully</li> <li> Manual notifications work</li> <li> Task completion triggers notifications</li> <li> Browser receives and displays updates</li> <li> No errors in application logs</li> <li> No errors in browser console</li> </ul>"
    },
    {
      "location": "development/websocket-troubleshooting/#still-having-issues",
      "title": "Still Having Issues?",
      "text": "<ol> <li>Check all service dependencies are running</li> <li>Verify environment variables are set correctly</li> <li>Ensure firewall/network settings allow connections</li> <li>Check for version compatibility issues</li> <li>Review application startup logs for initialization errors</li> </ol>"
    },
    {
      "location": "getting-started/",
      "title": "Getting Started",
      "text": "<p>Welcome to Vuls! This section will guide you through the initial setup and configuration of your vulnerability management system.</p>"
    },
    {
      "location": "getting-started/#overview",
      "title": "Overview",
      "text": "<p>The Vuls Vulnerability Management System is designed to be easy to deploy and use. Whether you're setting up a development environment or a production system, these guides will help you get started quickly.</p>"
    },
    {
      "location": "getting-started/#what-youll-learn",
      "title": "What You'll Learn",
      "text": "<ul> <li>Installation - Set up Docker, dependencies, and the Vuls system</li> <li>Configuration - Configure databases, SSH keys, and target systems</li> <li>First Scan - Run your first vulnerability scan and generate reports</li> </ul>"
    },
    {
      "location": "getting-started/#prerequisites",
      "title": "Prerequisites",
      "text": "<p>Before you begin, ensure you have:</p> <ul> <li>Docker &amp; Docker Compose: Version 20.10+ recommended</li> <li>SSH Access: To target systems you want to scan</li> <li>System Resources: 4GB RAM, 10GB disk space minimum</li> <li>Network Access: Internet connectivity for database updates</li> </ul>"
    },
    {
      "location": "getting-started/#quick-start-checklist",
      "title": "Quick Start Checklist",
      "text": "<ul> <li> Install Docker and Docker Compose</li> <li> Clone the Vuls repository</li> <li> Configure target systems in <code>config/config.toml</code></li> <li> Set up SSH keys for system access</li> <li> Update vulnerability databases</li> <li> Run your first scan</li> <li> Generate and view reports</li> </ul>"
    },
    {
      "location": "getting-started/#architecture-overview",
      "title": "Architecture Overview",
      "text": "<pre><code>graph LR\n    A[Your Computer] --&gt; B[Vuls Container]\n    B --&gt; C[Target Systems]\n    B --&gt; D[Vulnerability Databases]\n    B --&gt; E[Web Interface]\n    E --&gt; F[Reports &amp; Analytics]</code></pre>"
    },
    {
      "location": "getting-started/#support",
      "title": "Support",
      "text": "<p>If you encounter issues during setup:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review the Configuration Reference</li> <li>Consult the FAQ</li> </ol> <p>Ready to begin? Start with the Installation Guide.</p>"
    },
    {
      "location": "getting-started/installation/",
      "title": "Installation",
      "text": "<p>This guide will walk you through installing and setting up the Vuls Vulnerability Management System.</p>"
    },
    {
      "location": "getting-started/installation/#prerequisites",
      "title": "Prerequisites",
      "text": "<p>Before installing Vuls, ensure your system meets these requirements:</p>"
    },
    {
      "location": "getting-started/installation/#system-requirements",
      "title": "System Requirements",
      "text": "<ul> <li>Operating System: Linux, macOS, or Windows with WSL2</li> <li>RAM: 4GB minimum, 8GB recommended</li> <li>Disk Space: 10GB minimum for databases and results</li> <li>Network: Internet connectivity for database updates</li> </ul>"
    },
    {
      "location": "getting-started/installation/#required-software",
      "title": "Required Software",
      "text": "<ul> <li>Docker: Version 20.10 or later</li> <li>Docker Compose: Version 2.0 or later</li> <li>Git: For cloning the repository</li> </ul>"
    },
    {
      "location": "getting-started/installation/#installation-steps",
      "title": "Installation Steps",
      "text": ""
    },
    {
      "location": "getting-started/installation/#1-install-docker-and-docker-compose",
      "title": "1. Install Docker and Docker Compose",
      "text": ""
    },
    {
      "location": "getting-started/installation/#ubuntudebian",
      "title": "Ubuntu/Debian",
      "text": "<pre><code># Update package index\nsudo apt update\n\n# Install Docker\nsudo apt install -y docker.io docker-compose-plugin\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# Log out and back in, or run:\nnewgrp docker\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#centosrhel",
      "title": "CentOS/RHEL",
      "text": "<pre><code># Install Docker\nsudo yum install -y docker docker-compose-plugin\n\n# Start and enable Docker\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#macos",
      "title": "macOS",
      "text": "<pre><code># Install Docker Desktop from https://docker.com/products/docker-desktop\n# Or use Homebrew:\nbrew install --cask docker\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#2-clone-the-vuls-repository",
      "title": "2. Clone the Vuls Repository",
      "text": "<pre><code># Clone the repository\ngit clone https://github.com/your-org/vuls-vulnerability-scanner.git\ncd vuls-vulnerability-scanner\n\n# Verify the structure\nls -la\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#3-initial-setup",
      "title": "3. Initial Setup",
      "text": "<pre><code># Create necessary directories\nmkdir -p {db,logs,results,config/backups}\n\n# Set proper permissions\nchmod 755 db logs results config\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#4-configure-environment",
      "title": "4. Configure Environment",
      "text": "<pre><code># Copy example configuration\ncp config/config.toml.example config/config.toml\n\n# Edit configuration for your environment\nnano config/config.toml\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#5-download-vulnerability-databases",
      "title": "5. Download Vulnerability Databases",
      "text": "<pre><code># Update all vulnerability databases (this may take 30-60 minutes)\ndocker compose --profile fetch up vuls-nvd\ndocker compose --profile fetch up vuls-ubuntu\ndocker compose --profile fetch up vuls-debian\ndocker compose --profile fetch up vuls-redhat\n\n# Verify database downloads\nls -lh db/\n</code></pre> <p>Expected output:</p> <pre><code>-rw-r--r-- 1 user user 1.2G cve.sqlite3\n-rw-r--r-- 1 user user 350M oval.sqlite3\n-rw-r--r-- 1 user user  45M gost.sqlite3\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#6-test-installation",
      "title": "6. Test Installation",
      "text": "<pre><code># Test configuration\ndocker compose run --rm vuls configtest\n\n# Test database connectivity\ndocker compose run --rm vuls version\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#web-interface-setup-optional",
      "title": "Web Interface Setup (Optional)",
      "text": "<p>To enable the web management interface:</p> <pre><code># Start the web application stack\ndocker compose --profile web up -d\n\n# Access the web interface\nopen http://localhost:8000\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#create-initial-admin-user",
      "title": "Create Initial Admin User",
      "text": "<ol> <li>Navigate to http://localhost:8000</li> <li>Click \"Create Admin\"</li> <li>Use default credentials: <code>admin</code> / <code>admin123</code></li> <li>Change the password after first login</li> </ol>"
    },
    {
      "location": "getting-started/installation/#verification",
      "title": "Verification",
      "text": ""
    },
    {
      "location": "getting-started/installation/#test-basic-functionality",
      "title": "Test Basic Functionality",
      "text": "<pre><code># Test SSH connectivity (replace with your target)\ndocker compose run --rm --entrypoint ssh vuls user@target-system\n\n# Run a test scan (if you have a configured target)\ndocker compose run --rm vuls scan\n\n# Generate a test report\ndocker compose run --rm vuls report -format-list\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#check-service-status",
      "title": "Check Service Status",
      "text": "<pre><code># View running containers\ndocker compose ps\n\n# Check logs\ndocker compose logs vuls\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#troubleshooting",
      "title": "Troubleshooting",
      "text": ""
    },
    {
      "location": "getting-started/installation/#common-issues",
      "title": "Common Issues",
      "text": ""
    },
    {
      "location": "getting-started/installation/#docker-permission-denied",
      "title": "Docker Permission Denied",
      "text": "<pre><code># Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Or run with sudo (not recommended for production)\nsudo docker compose up\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#database-download-failures",
      "title": "Database Download Failures",
      "text": "<pre><code># Check internet connectivity\nping google.com\n\n# Retry specific database\ndocker compose --profile fetch up vuls-nvd --force-recreate\n\n# Check disk space\ndf -h\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#port-conflicts",
      "title": "Port Conflicts",
      "text": "<pre><code># Check what's using port 8000\nsudo lsof -i :8000\n\n# Change port in docker-compose.yml\n# ports:\n#   - \"8001:8000\"  # Change external port\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#ssh-connection-issues",
      "title": "SSH Connection Issues",
      "text": "<pre><code># Test SSH manually\nssh -vvv user@target-system\n\n# Check SSH key permissions\nls -la ~/.ssh/\nchmod 600 ~/.ssh/id_*\nchmod 644 ~/.ssh/*.pub\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#getting-help",
      "title": "Getting Help",
      "text": "<p>If you encounter issues:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review Docker and system logs</li> <li>Verify all prerequisites are met</li> <li>Consult the community forums</li> </ol>"
    },
    {
      "location": "getting-started/installation/#next-steps",
      "title": "Next Steps",
      "text": "<p>Once installation is complete:</p> <ol> <li>Configure your system - Set up target hosts and scanning parameters</li> <li>Run your first scan - Execute a vulnerability assessment</li> <li>Explore the web interface - Use the management dashboard</li> </ol>"
    },
    {
      "location": "getting-started/installation/#security-considerations",
      "title": "Security Considerations",
      "text": ""
    },
    {
      "location": "getting-started/installation/#file-permissions",
      "title": "File Permissions",
      "text": "<pre><code># Secure configuration files\nchmod 600 config/config.toml\nchmod 600 .ssh/id_*\n\n# Secure database files\nchmod 600 db/*.sqlite3\n</code></pre>"
    },
    {
      "location": "getting-started/installation/#network-security",
      "title": "Network Security",
      "text": "<ul> <li>Ensure Docker daemon is properly secured</li> <li>Use SSH keys instead of passwords</li> <li>Consider VPN for remote scanning</li> <li>Implement proper firewall rules</li> </ul>"
    },
    {
      "location": "getting-started/installation/#data-protection",
      "title": "Data Protection",
      "text": "<ul> <li>Encrypt sensitive configuration data</li> <li>Regularly backup scan results</li> <li>Implement log rotation</li> <li>Monitor system access</li> </ul> <p>Installation complete! Continue to Configuration to set up your scanning targets.</p>"
    },
    {
      "location": "user-guide/",
      "title": "User Guide",
      "text": "<p>This section provides comprehensive guides for daily operations and management of your Vuls vulnerability scanning system.</p>"
    },
    {
      "location": "user-guide/#overview",
      "title": "Overview",
      "text": "<p>Once your Vuls system is installed and configured, this user guide will help you:</p> <ul> <li>Establish regular scanning workflows</li> <li>Analyze vulnerability results effectively</li> <li>Generate professional reports</li> <li>Use the web interface efficiently</li> <li>Manage hosts and scan schedules</li> </ul>"
    },
    {
      "location": "user-guide/#what-youll-find-here",
      "title": "What You'll Find Here",
      "text": ""
    },
    {
      "location": "user-guide/#monthly-scanning-workflow",
      "title": "Monthly Scanning Workflow",
      "text": "<p>Complete guide to establishing a regular monthly vulnerability assessment process, including:</p> <ul> <li>Database update procedures</li> <li>System discovery and inventory management</li> <li>Scan execution and verification</li> <li>Results analysis and prioritization</li> <li>Compliance reporting</li> </ul>"
    },
    {
      "location": "user-guide/#vulnerability-analysis",
      "title": "Vulnerability Analysis",
      "text": "<p>Deep dive into understanding and interpreting scan results:</p> <ul> <li>OVAL vs GOST database differences</li> <li>Severity assessment and prioritization</li> <li>False positive identification</li> <li>End-of-life system considerations</li> <li>Risk scoring methodologies</li> </ul>"
    },
    {
      "location": "user-guide/#web-interface-guide",
      "title": "Web Interface Guide",
      "text": "<p>Comprehensive guide to using the web-based management interface:</p> <ul> <li>Dashboard overview and navigation</li> <li>Host management and configuration</li> <li>Scan scheduling and monitoring</li> <li>User management and authentication</li> <li>Real-time status monitoring</li> </ul>"
    },
    {
      "location": "user-guide/#report-generation",
      "title": "Report Generation",
      "text": "<p>Creating professional vulnerability reports:</p> <ul> <li>Interactive HTML reports with charts</li> <li>Export options (PDF, CSV, JSON)</li> <li>Custom report templates</li> <li>Automated report distribution</li> <li>Executive summary generation</li> </ul>"
    },
    {
      "location": "user-guide/#key-concepts",
      "title": "Key Concepts",
      "text": ""
    },
    {
      "location": "user-guide/#vulnerability-databases",
      "title": "Vulnerability Databases",
      "text": "<ul> <li>OVAL: Operating system vendor vulnerability definitions</li> <li>GOST: Go Security Tracker with Ubuntu-specific data</li> <li>CVE: Common Vulnerabilities and Exposures database</li> <li>GOST: Exploit and Metasploit integration</li> </ul>"
    },
    {
      "location": "user-guide/#scanning-modes",
      "title": "Scanning Modes",
      "text": "<ul> <li>Fast Scan: Quick assessment for regular monitoring</li> <li>Deep Scan: Comprehensive analysis with all databases</li> <li>Targeted Scan: Focus on specific packages or systems</li> <li>Scheduled Scan: Automated recurring assessments</li> </ul>"
    },
    {
      "location": "user-guide/#report-types",
      "title": "Report Types",
      "text": "<ul> <li>Executive Summary: High-level overview for management</li> <li>Technical Report: Detailed findings for IT teams</li> <li>Compliance Report: Formatted for audit requirements</li> <li>Trend Analysis: Historical vulnerability tracking</li> </ul>"
    },
    {
      "location": "user-guide/#best-practices",
      "title": "Best Practices",
      "text": ""
    },
    {
      "location": "user-guide/#regular-scanning-schedule",
      "title": "\ud83d\uddd3\ufe0f Regular Scanning Schedule",
      "text": "<ul> <li>Monthly comprehensive scans for all systems</li> <li>Weekly quick scans for critical infrastructure</li> <li>Immediate scans after system changes</li> <li>Database updates before each scan cycle</li> </ul>"
    },
    {
      "location": "user-guide/#effective-prioritization",
      "title": "\ud83c\udfaf Effective Prioritization",
      "text": "<ul> <li>Focus on Critical and High severity vulnerabilities first</li> <li>Consider system exposure and business impact</li> <li>Track remediation progress over time</li> <li>Document risk acceptance decisions</li> </ul>"
    },
    {
      "location": "user-guide/#report-management",
      "title": "\ud83d\udcca Report Management",
      "text": "<ul> <li>Generate reports immediately after scans</li> <li>Archive historical reports for trend analysis</li> <li>Customize reports for different audiences</li> <li>Automate distribution to stakeholders</li> </ul>"
    },
    {
      "location": "user-guide/#system-maintenance",
      "title": "\ud83d\udd27 System Maintenance",
      "text": "<ul> <li>Keep vulnerability databases current</li> <li>Monitor scan execution for errors</li> <li>Validate SSH connectivity regularly</li> <li>Review and update host inventory</li> </ul>"
    },
    {
      "location": "user-guide/#workflow-integration",
      "title": "Workflow Integration",
      "text": ""
    },
    {
      "location": "user-guide/#with-existing-tools",
      "title": "With Existing Tools",
      "text": "<ul> <li>Ticketing Systems: Integrate vulnerability findings</li> <li>Patch Management: Coordinate remediation efforts</li> <li>SIEM/Logging: Forward scan results and alerts</li> <li>Configuration Management: Track system changes</li> </ul>"
    },
    {
      "location": "user-guide/#compliance-frameworks",
      "title": "Compliance Frameworks",
      "text": "<ul> <li>NIST Cybersecurity Framework: Align with Identify, Protect, Detect</li> <li>ISO 27001: Support risk assessment processes</li> <li>PCI DSS: Meet vulnerability scanning requirements</li> <li>SOC 2: Demonstrate continuous monitoring</li> </ul>"
    },
    {
      "location": "user-guide/#getting-help",
      "title": "Getting Help",
      "text": "<ul> <li>Troubleshooting: Common issues and solutions</li> <li>Configuration: System and scan configuration options</li> <li>API Reference: Programmatic access to functionality</li> <li>Community: Discussion forums and support channels</li> </ul> <p>Ready to establish your scanning workflow? Start with the Monthly Scanning Guide.</p>"
    },
    {
      "location": "user-guide/monthly-scanning/",
      "title": "Monthly Vulnerability Scanning Workflow",
      "text": "<p>This guide outlines the process for conducting regular monthly vulnerability scans using Vuls in a containerized environment. The process ensures consistent, automated vulnerability assessments across your infrastructure.</p>"
    },
    {
      "location": "user-guide/monthly-scanning/#prerequisites",
      "title": "Prerequisites",
      "text": "<ul> <li>Docker and Docker Compose installed</li> <li>Vuls container with AWS CLI and GCP CLI</li> <li>SSH access to target systems (direct or via AWS Session Manager)</li> <li>Vulnerability databases configured</li> </ul>"
    },
    {
      "location": "user-guide/monthly-scanning/#phase-1-database-updates-1st-of-each-month",
      "title": "Phase 1: Database Updates (1<sup>st</sup> of each month)",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#11-update-vulnerability-databases",
      "title": "1.1 Update Vulnerability Databases",
      "text": "<p>Frequency: Monthly (or weekly for high-security environments)</p> <p>!!! warning \"OS Version Limitations\" - Ubuntu OVAL: Only covers currently supported LTS versions (20.04, 22.04, 24.04) - Debian OVAL: Only covers currently supported versions (10, 11, 12) - End-of-Life (EOL) systems: Cannot be properly scanned due to missing OVAL data - Recently released versions: May show 0 vulnerabilities if well-patched</p> <p>Supported OS Versions for Vulnerability Scanning:</p> OS Supported Versions Status Ubuntu 20.04 LTS (Focal), 22.04 LTS (Jammy), 24.04 LTS (Noble) \u2705 Fully Supported Debian 10 (Buster), 11 (Bullseye), 12 (Bookworm) \u2705 Fully Supported RHEL/CentOS 7, 8, 9 \u2705 Fully Supported Amazon Linux 1, 2, 2023 \u2705 Fully Supported Ubuntu 16.04/18.04 EOL versions \u274c Limited or no OVAL data Debian 8/9 EOL versions \u274c Limited or no OVAL data <pre><code># Navigate to your Vuls directory\ncd ~/docker/vuls\n\n# Update NVD (CVE) database - most critical\ndocker compose --profile fetch up vuls-nvd\n\n# Update OS-specific databases (only supported versions)\ndocker compose --profile fetch up vuls-ubuntu    # Ubuntu 20.04, 22.04, 24.04\ndocker compose --profile fetch up vuls-debian    # Debian 10, 11, 12\ndocker compose --profile fetch up vuls-redhat    # RHEL/CentOS 7, 8, 9\ndocker compose --profile fetch up vuls-amazon    # Amazon Linux 1, 2, 2023\n\n# Verify database updates\nls -la ./db/\ndu -sh ./db/*\n</code></pre> <p>Expected Database Sizes:</p> <ul> <li><code>cve.sqlite3</code>: 1-2GB (NVD database - ~280K CVEs)</li> <li><code>oval.sqlite3</code>: 200-400MB (OS-specific vulnerabilities - ~200K definitions)</li> </ul> <p>Database Coverage Verification:</p> <pre><code># Check which OS versions are covered\ndocker compose run --rm --entrypoint sqlite3 vuls /vuls/db/oval.sqlite3 \"SELECT DISTINCT substr(title, instr(title, 'Ubuntu'), 20) FROM definitions WHERE title LIKE '%Ubuntu%' LIMIT 5;\"\n\n# Check total definitions count\ndocker compose run --rm --entrypoint sqlite3 vuls /vuls/db/oval.sqlite3 \"SELECT COUNT(*) FROM definitions;\"\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#12-validate-database-updates",
      "title": "1.2 Validate Database Updates",
      "text": "<pre><code># Check database timestamps\nstat ./db/*.sqlite3\n\n# Test database connectivity\ndocker-compose run --rm vuls configtest\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#phase-2-system-discovery-and-inventory",
      "title": "Phase 2: System Discovery and Inventory",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#21-update-target-systems-inventory",
      "title": "2.1 Update Target Systems Inventory",
      "text": "<p>Review and update your <code>config/config.toml</code>:</p> <pre><code>[cveDict]\ntype = \"sqlite3\"\nSQLite3Path = \"/vuls/db/cve.sqlite3\"\n\n[ovalDict]\ntype = \"sqlite3\"\nSQLite3Path = \"/vuls/db/oval.sqlite3\"\n\n[gost]\ntype = \"sqlite3\"\nSQLite3Path = \"/vuls/db/gost.sqlite3\"\n\n[exploit]\ntype = \"sqlite3\"\nSQLite3Path = \"/vuls/db/go-exploitdb.sqlite3\"\n\n[metasploit]\ntype = \"sqlite3\"\nSQLite3Path = \"/vuls/db/go-msfdb.sqlite3\"\n\n[kevuln]\ntype = \"sqlite3\"\nSQLite3Path = \"/vuls/db/go-kev.sqlite3\"\n\n[cti]\ntype = \"sqlite3\"\nSQLite3Path = \"/vuls/db/go-cti.sqlite3\"\n\n[servers]\n\n[servers.icinga2]\nhost = \"icinga2\"\nport = \"22\"\nuser = \"admin\"\nkeypath = \"/root/.ssh/id_aws\"\n\n[servers.anisette-v3]\nhost = \"anisette-v3\"\nport = \"22\"\nuser = \"ubuntu\"\nkeypath = \"/root/.ssh/id_aws\"\n\n[servers.retailaware-u16tbpe]\nhost = \"retailaware-u16tbpe\"\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#22-validate-system-access",
      "title": "2.2 Validate System Access",
      "text": "<pre><code># Test configuration for all systems\ndocker compose run --rm vuls configtest\n\n# Test SSH connectivity to each system\ndocker compose run --rm --entrypoint ssh vuls admin@target-system\n\n# Enter container for manual testing if needed\ndocker compose run --rm --entrypoint /bin/sh vuls\n# Inside container:\n# ssh -vvv admin@target-system\n# aws sts get-caller-identity\n# gcloud auth list\n# exit\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#23-ssh-agent-configuration-for-multiple-keys",
      "title": "2.3 SSH Agent Configuration for Multiple Keys",
      "text": "<p>When scanning multiple systems with different SSH keys, use SSH agent for seamless key management:</p> <p>On Host System (before scanning):</p> <pre><code># Start SSH agent\neval $(ssh-agent)\n\n# Add specific keys for different systems\nssh-add ~/.ssh/id_aws          # AWS EC2 instances\nssh-add ~/.ssh/id_gcp          # GCP instances\nssh-add ~/.ssh/id_ed25519      # On-premise systems\nssh-add ~/.ssh/id_rsa          # Legacy systems\n\n# Verify keys are loaded\nssh-add -l\n\n# Test connectivity with agent\nssh your-target-system         # Should work without specifying key\n</code></pre> <p>Configure SSH agent forwarding in your SSH config:</p> <pre><code>cat &gt;&gt; ~/.ssh/config &lt;&lt; 'EOF'\nhost *\n  IdentityFile ~/.ssh/id_aws\n  IdentitiesOnly yes\n\nhost icinga2\n  User admin\n  Hostname i-0a1347a614cf7cea5\n  ProxyCommand sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"\n  ControlPersist 72h\n\nhost anisette-v3\n  User ubuntu\n  HostName i-022d1ec1b8c62660b\n  ProxyCommand sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"\n\nHost retailaware-u16tbpe\n  User paulb\n  IdentityFile ~/.ssh/id_gcp\n  IdentitiesOnly yes\n  ProxyCommand gcloud compute ssh %h --tunnel-through-iap --zone=us-east1-b --project=thingsboard-210800 -- -W %h:%p\nEOF\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#phase-3-vulnerability-scanning",
      "title": "Phase 3: Vulnerability Scanning",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#31-pre-scan-checklist",
      "title": "3.1 Pre-Scan Checklist",
      "text": "<ul> <li> Vulnerability databases updated</li> <li> All target systems accessible</li> <li> SSH keys properly mounted</li> <li> AWS/GCP credentials configured</li> <li> Previous scan results backed up</li> </ul>"
    },
    {
      "location": "user-guide/monthly-scanning/#32-execute-monthly-scan",
      "title": "3.2 Execute Monthly Scan",
      "text": "<pre><code># Create monthly results directory\nSCAN_DATE=$(date +%Y-%m)\nmkdir -p ./results/monthly-scans/$SCAN_DATE\n\n# Run comprehensive scan\ndocker compose run --rm vuls scan\n\n# Generate detailed reports\ndocker compose run --rm vuls report -format-json\ndocker compose run --rm vuls report -format-full-text\ndocker compose run --rm vuls report -format-csv\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#33-scan-verification",
      "title": "3.3 Scan Verification",
      "text": "<pre><code># Check scan completed successfully\nls -la ./results/$(date +%Y-%m-%d)*\n\n# Verify all systems were scanned\ndocker-compose run --rm vuls report -format-one-line-text\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#phase-4-results-analysis-and-reporting",
      "title": "Phase 4: Results Analysis and Reporting",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#41-generate-management-reports",
      "title": "4.1 Generate Management Reports",
      "text": "<pre><code># Create executive summary\ndocker compose run --rm vuls report -format-list &gt; ./results/monthly-scans/$SCAN_DATE/executive-summary.txt\n\n# Generate detailed CSV for tracking\ndocker compose run --rm vuls report -format-csv &gt; ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv\n\n# Create system-by-system breakdown\ndocker compose run --rm vuls report -format-full-text &gt; ./results/monthly-scans/$SCAN_DATE/full-report.txt\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#42-vulnerability-prioritization-and-interpretation",
      "title": "4.2 Vulnerability Prioritization and Interpretation",
      "text": "<p>Critical Actions Required:</p> <ol> <li>Critical/High vulnerabilities: Immediate action required</li> <li>Medium vulnerabilities: Plan remediation within 30 days</li> <li>Low vulnerabilities: Include in next maintenance window</li> <li>0 vulnerabilities: Verify interpretation (see below)</li> </ol> <p>Understanding Zero Vulnerability Results</p> <p>\u2705 Legitimate Zero Vulnerabilities (Good): - Recent LTS systems: Ubuntu 24.04, Debian 12 (well-patched) - Actively maintained systems: Regular security updates applied - Container images: Recent base images with security patches</p> <p>\u26a0\ufe0f False Zero Vulnerabilities (Concerning): - EOL systems: Ubuntu 16.04/18.04, Debian 8/9 showing 0 CVEs - Scan errors: \"Skip OVAL\" messages in logs - Database issues: Missing OVAL data for target OS version</p> <p>Validation Steps for Zero Vulnerability Results:</p> <pre><code># Check if OVAL database covers your OS version\ndocker compose run --rm --entrypoint sqlite3 vuls /vuls/db/oval.sqlite3 \"SELECT COUNT(*) FROM definitions WHERE title LIKE '%Ubuntu 18.04%';\"\n\n# Look for OVAL skip messages in scan logs\ndocker compose run --rm vuls scan -debug 2&gt;&amp;1 | grep -i \"skip.*oval\"\n\n# Verify system is actually supported\ndocker compose run --rm vuls configtest -debug | grep -i \"detected\"\n</code></pre> <p>Priority Matrix:</p> <ul> <li>CVSS 9.0-10.0 (Critical) \u2192 Patch within 72 hours</li> <li>CVSS 7.0-8.9 (High) \u2192 Patch within 7 days</li> <li>CVSS 4.0-6.9 (Medium) \u2192 Patch within 30 days</li> <li>CVSS 0.1-3.9 (Low) \u2192 Next maintenance cycle</li> <li>0 CVEs on EOL systems \u2192 Urgent OS upgrade required</li> </ul>"
    },
    {
      "location": "user-guide/monthly-scanning/#43-trend-analysis",
      "title": "4.3 Trend Analysis",
      "text": "<pre><code># Compare with previous month\ndiff ./results/monthly-scans/$(date -d \"last month\" +%Y-%m)/executive-summary.txt \\\n     ./results/monthly-scans/$SCAN_DATE/executive-summary.txt\n\n# Track vulnerability counts over time\necho \"$(date +%Y-%m): $(grep -c 'CVE-' ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv)\" &gt;&gt; vulnerability-trends.log\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#phase-5-remediation-tracking",
      "title": "Phase 5: Remediation Tracking",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#51-create-remediation-plan",
      "title": "5.1 Create Remediation Plan",
      "text": "<pre><code># Extract high-priority vulnerabilities\ngrep -E \"(Critical|High)\" ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv &gt; high-priority-vulns.csv\n\n# Create remediation tickets/tasks\n# (Integrate with your ticketing system)\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#52-track-remediation-progress",
      "title": "5.2 Track Remediation Progress",
      "text": "<p>Create a tracking spreadsheet with:</p> <ul> <li>CVE ID</li> <li>Affected System</li> <li>Severity</li> <li>Discovery Date</li> <li>Assigned Owner</li> <li>Target Remediation Date</li> <li>Status</li> <li>Verification Date</li> </ul>"
    },
    {
      "location": "user-guide/monthly-scanning/#phase-6-compliance-and-documentation",
      "title": "Phase 6: Compliance and Documentation",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#61-compliance-reporting",
      "title": "6.1 Compliance Reporting",
      "text": "<pre><code># Generate compliance report\ncat &gt; ./results/monthly-scans/$SCAN_DATE/compliance-report.md &lt;&lt; EOF\n# Monthly Vulnerability Assessment Report - $SCAN_DATE\n\n## Executive Summary\n- Systems Scanned: $(grep -c \"\\[servers\\.\" config/config.toml)\n- Total Vulnerabilities: $(grep -c \"CVE-\" ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv)\n- Critical: $(grep -c \"Critical\" ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv)\n- High: $(grep -c \"High\" ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv)\n- Medium: $(grep -c \"Medium\" ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv)\n- Low: $(grep -c \"Low\" ./results/monthly-scans/$SCAN_DATE/detailed-vulnerabilities.csv)\n\n## Remediation Status\n- Patched This Month: [To be filled]\n- In Progress: [To be filled]\n- Scheduled: [To be filled]\n\n## Next Month Actions\n- [List planned remediation activities]\nEOF\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#62-archive-results",
      "title": "6.2 Archive Results",
      "text": "<pre><code># Compress monthly results\ntar -czf ./archive/vulnerability-scan-$SCAN_DATE.tar.gz ./results/monthly-scans/$SCAN_DATE/\n\n# Clean up old detailed results (keep last 6 months)\nfind ./results/ -type d -name \"20*\" -mtime +180 -exec rm -rf {} \\;\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#automation-scripts",
      "title": "Automation Scripts",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#monthly-scan-script",
      "title": "Monthly Scan Script",
      "text": "<pre><code>#!/bin/bash\n# monthly-vuln-scan.sh\n\nset -e\n\nSCAN_DATE=$(date +%Y-%m)\nLOG_FILE=\"./logs/monthly-scan-$SCAN_DATE.log\"\n\necho \"Starting monthly vulnerability scan for $SCAN_DATE\" | tee -a $LOG_FILE\n\n# Update databases\necho \"Updating vulnerability databases...\" | tee -a $LOG_FILE\ndocker compose --profile fetch up vuls-nvd vuls-ubuntu vuls-debian\n\n# Validate configuration\necho \"Validating configuration...\" | tee -a $LOG_FILE\ndocker compose run --rm vuls configtest\n\n# Run scan\necho \"Executing vulnerability scan...\" | tee -a $LOG_FILE\ndocker compose run --rm vuls scan\n\n# Generate reports\necho \"Generating reports...\" | tee -a $LOG_FILE\nmkdir -p ./results/monthly-scans/$SCAN_DATE\ndocker compose run --rm vuls report -format-csv &gt; ./results/monthly-scans/$SCAN_DATE/vulnerabilities.csv\ndocker compose run --rm vuls report -format-list &gt; ./results/monthly-scans/$SCAN_DATE/summary.txt\n\necho \"Monthly scan completed successfully\" | tee -a $LOG_FILE\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#database-update-script",
      "title": "Database Update Script",
      "text": "<pre><code>#!/bin/bash\n# update-vuln-databases.sh\n\necho \"Updating Vuls vulnerability databases...\"\n\n# Update all databases\ndocker compose --profile fetch up vuls-nvd\ndocker compose --profile fetch up vuls-ubuntu\ndocker compose --profile fetch up vuls-debian\ndocker compose --profile fetch up vuls-redhat\n\n# Log update completion\necho \"$(date): Database update completed\" &gt;&gt; ./logs/database-updates.log\n\n# Check database sizes\ndu -sh ./db/* &gt;&gt; ./logs/database-sizes.log\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#troubleshooting-common-issues",
      "title": "Troubleshooting Common Issues",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#why-oval-scanning-may-be-skipped",
      "title": "Why OVAL Scanning May Be Skipped",
      "text": "<p>If you see \"Skip OVAL and Scan with gost alone\" message, it indicates that OVAL scanning has been programmatically disabled for End-of-Life (EOL) operating systems.</p> <p>Root Cause: Vuls automatically skips OVAL scanning for EOL systems, even when the OVAL database contains vulnerability definitions.</p> <p>Affected Systems:</p> <ul> <li>\u274c Ubuntu 16.04 (Xenial): EOL April 2021 - OVAL scanning skipped</li> <li>\u274c Ubuntu 18.04 (Bionic): EOL May 2023 - OVAL scanning skipped</li> <li>\u274c Debian 8 (Jessie): EOL June 2020 - OVAL scanning skipped</li> <li>\u274c Debian 9 (Stretch): EOL July 2022 - OVAL scanning skipped</li> </ul> <p>What This Means:</p> <ol> <li>Database is OK: Your OVAL database may contain 30,000+ vulnerability definitions for the EOL system</li> <li>Configuration is OK: Vuls correctly detects the target OS version</li> <li>Intentional Behavior: Vuls skips OVAL scanning by design for EOL systems</li> <li>Limited Detection: Only GOST, CPE, and other detection methods are used</li> </ol> <p>Solutions:</p> <ol> <li>Recommended: Upgrade EOL systems to supported versions (Ubuntu 20.04+, Debian 10+)</li> <li>Temporary: Accept limited vulnerability detection and implement compensating controls</li> <li>Documentation: Note the limitation in security assessments and compliance reports</li> </ol>"
    },
    {
      "location": "user-guide/monthly-scanning/#ssh-connection-failures",
      "title": "SSH Connection Failures",
      "text": "<pre><code># Test SSH connectivity\ndocker compose run --rm --entrypoint ssh vuls -vvv target-system\n\n# Check SSH key permissions\nls -la ./.ssh/\n\n# Enter container for manual debugging\ndocker compose run --rm --entrypoint /bin/sh vuls\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#aws-session-manager-issues",
      "title": "AWS Session Manager Issues",
      "text": "<pre><code># Verify AWS credentials\ndocker compose run --rm --entrypoint aws vuls sts get-caller-identity\n\n# Test Session Manager\ndocker compose run --rm --entrypoint aws vuls ssm describe-instance-information\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#database-issues",
      "title": "Database Issues",
      "text": "<pre><code># Verify database integrity\nsqlite3 ./db/cve.sqlite3 \"PRAGMA integrity_check;\"\n\n# Check database sizes\ndu -sh ./db/*\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#compliance-considerations",
      "title": "Compliance Considerations",
      "text": ""
    },
    {
      "location": "user-guide/monthly-scanning/#standards-alignment",
      "title": "Standards Alignment",
      "text": "<ul> <li>NIST Cybersecurity Framework: Identify, Protect, Detect, Respond, Recover</li> <li>ISO 27001: Risk assessment and treatment</li> <li>PCI DSS: Regular vulnerability assessments</li> <li>SOC 2: System monitoring and vulnerability management</li> </ul>"
    },
    {
      "location": "user-guide/monthly-scanning/#documentation-requirements",
      "title": "Documentation Requirements",
      "text": "<ul> <li>Scan frequency and coverage</li> <li>Vulnerability assessment procedures</li> <li>Remediation timelines and tracking</li> <li>Risk acceptance documentation</li> <li>Evidence of continuous monitoring</li> <li>OS version limitations and coverage gaps</li> </ul> <p>Compliance Reporting Considerations</p> <p>Important Compliance Notes: - EOL System Risk: Document that EOL systems (Ubuntu 16.04/18.04, Debian 8/9) cannot be properly scanned - Coverage Gaps: Explicitly note OS versions not covered by vulnerability databases - False Negatives: Acknowledge potential for missed vulnerabilities on unsupported systems - Compensating Controls: Implement additional security measures for EOL systems</p> <p>Sample Compliance Language:</p> <pre><code>\"Vulnerability scanning covers all systems running supported operating system versions\n(Ubuntu 20.04+, Debian 10+, RHEL 7+). End-of-life systems require additional manual\nsecurity review and compensating controls due to limited vulnerability database coverage.\"\n</code></pre>"
    },
    {
      "location": "user-guide/monthly-scanning/#conclusion",
      "title": "Conclusion",
      "text": "<p>Regular monthly vulnerability scanning with Vuls provides continuous visibility into your security posture. This systematic approach ensures vulnerabilities are identified, prioritized, and remediated in a timely manner, supporting your overall cybersecurity strategy and compliance requirements.</p> <p>Key Takeaways:</p> <ul> <li>OS Version Awareness: Ensure target systems run supported OS versions for accurate scanning</li> <li>Zero Vulnerability Validation: Always verify whether 0 CVEs indicates good security or scanning limitations</li> <li>EOL System Management: Plan upgrades for end-of-life systems that cannot be properly scanned</li> <li>Database Coverage: Regularly verify vulnerability database coverage matches your environment</li> </ul> <p>Critical Success Factors:</p> <ol> <li>Maintain supported OS versions across your infrastructure</li> <li>Validate scan results don't just accept zero vulnerability counts</li> <li>Document coverage limitations for compliance and risk management</li> <li>Plan EOL system transitions before vulnerability database support ends</li> </ol> <p>Remember to adapt this process to your organization's specific needs, risk tolerance, compliance requirements, and the reality of OS version limitations in vulnerability scanning tools.</p>"
    },
    {
      "location": "user-guide/reporting/",
      "title": "Report Generation",
      "text": "<p>A comprehensive guide to generating professional vulnerability reports using the Vuls interactive HTML report generator and other reporting formats.</p>"
    },
    {
      "location": "user-guide/reporting/#overview",
      "title": "Overview",
      "text": "<p>The Vuls system provides multiple reporting options:</p> <ul> <li>Interactive HTML Reports: Modern, professional reports with charts and filtering</li> <li>CSV Exports: Structured data for analysis and tracking</li> <li>JSON Outputs: Machine-readable format for integration</li> <li>Text Reports: Simple summaries for quick review</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#interactive-html-reports",
      "title": "Interactive HTML Reports",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#features",
      "title": "Features",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#interactive-dashboard",
      "title": "\ud83d\udcca Interactive Dashboard",
      "text": "<ul> <li>Executive summary with key metrics</li> <li>Real-time vulnerability statistics</li> <li>Color-coded severity indicators</li> <li>Package risk scoring</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#advanced-analytics",
      "title": "\ud83d\udcc8 Advanced Analytics",
      "text": "<ul> <li>Severity Distribution: Donut chart showing vulnerability breakdown</li> <li>Timeline Analysis: Line chart of vulnerability publication dates</li> <li>CVSS Score Distribution: Bar chart of score ranges</li> <li>Package Risk Assessment: Horizontal bar chart of highest-risk packages</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#powerful-filtering",
      "title": "\ud83d\udd0d Powerful Filtering",
      "text": "<ul> <li>Real-time search across CVE IDs, packages, and descriptions</li> <li>Severity level filtering (Critical/High/Medium/Low)</li> <li>CVSS score range sliders</li> <li>Advanced sorting options</li> <li>Filter statistics and clear functionality</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#modern-uiux",
      "title": "\ud83c\udfa8 Modern UI/UX",
      "text": "<ul> <li>Responsive design (mobile/desktop)</li> <li>Dark/light theme toggle</li> <li>TailwindCSS styling with custom enhancements</li> <li>Smooth animations and transitions</li> <li>Print-friendly layout</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#export-capabilities",
      "title": "\ud83d\udce4 Export Capabilities",
      "text": "<ul> <li>PDF export (via browser print)</li> <li>CSV export of filtered results</li> <li>Self-contained HTML reports</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#generating-html-reports",
      "title": "Generating HTML Reports",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#prerequisites",
      "title": "Prerequisites",
      "text": "<pre><code>pip install jinja2  # or uv add jinja2\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#basic-usage",
      "title": "Basic Usage",
      "text": "<pre><code>cd vulnerability-reports\n\npython generate_report.py \\\n  --input ../realistic_vulnerabilities.json \\\n  --output reports/vulnerability_report.html \\\n  --title \"System Vulnerability Assessment Report\"\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#command-line-options",
      "title": "Command Line Options",
      "text": "<pre><code>python generate_report.py [OPTIONS]\n\nOptions:\n  -i, --input PATH        Input JSON file (required)\n  -o, --output PATH       Output HTML file (required)\n  -t, --title TEXT        Report title (default: \"Vulnerability Report\")\n  --theme [light|dark]    Report theme (default: \"light\")\n  --template-dir PATH     Template directory (default: \"templates\")\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#example-commands",
      "title": "Example Commands",
      "text": "<pre><code># Generate a basic report\npython generate_report.py -i ../comprehensive_vulnerabilities.json -o reports/security_report.html\n\n# Generate with custom title and dark theme\npython generate_report.py \\\n  -i ../scan_results.json \\\n  -o reports/monthly_security_audit.html \\\n  -t \"Monthly Security Audit - December 2024\" \\\n  --theme dark\n\n# Use custom template directory\npython generate_report.py \\\n  -i ../vulnerabilities.json \\\n  -o reports/custom_report.html \\\n  --template-dir custom_templates/\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#input-data-format",
      "title": "Input Data Format",
      "text": "<p>The HTML report generator expects JSON data in the following format:</p> <pre><code>{\n  \"total_vulnerabilities\": 36,\n  \"packages_affected\": 8,\n  \"vulnerability_breakdown\": {\n    \"CRITICAL\": 3,\n    \"HIGH\": 8,\n    \"MEDIUM\": 20,\n    \"LOW\": 5,\n    \"unknown\": 0\n  },\n  \"high_risk_packages\": [\n    {\n      \"package\": \"git\",\n      \"total_vulns\": 10,\n      \"critical\": 3,\n      \"high\": 1,\n      \"medium\": 4,\n      \"low\": 2,\n      \"risk_score\": 45\n    }\n  ],\n  \"vulnerabilities\": [\n    {\n      \"cve_id\": \"CVE-2022-4203\",\n      \"definition_id\": \"oval:org.debian:def:...\",\n      \"title\": \"CVE-2022-4203 openssl\",\n      \"description\": \"Vulnerability description...\",\n      \"affected_package\": \"openssl\",\n      \"installed_version\": \"3.0.16-1~deb12u1\",\n      \"cvss_score\": 4.9,\n      \"severity\": \"MEDIUM\",\n      \"summary\": \"Detailed summary...\",\n      \"published_date\": \"2023-02-24 15:15:11.98+00:00\"\n    }\n  ]\n}\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#standard-vuls-reports",
      "title": "Standard Vuls Reports",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#json-reports",
      "title": "JSON Reports",
      "text": "<pre><code># Generate JSON report\ndocker compose run --rm vuls report -format-json\n\n# Save to specific file\ndocker compose run --rm vuls report -format-json &gt; reports/scan-$(date +%Y%m%d).json\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#csv-reports",
      "title": "CSV Reports",
      "text": "<pre><code># Generate CSV report\ndocker compose run --rm vuls report -format-csv\n\n# Save to specific file\ndocker compose run --rm vuls report -format-csv &gt; reports/vulnerabilities-$(date +%Y%m%d).csv\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#text-reports",
      "title": "Text Reports",
      "text": "<pre><code># Generate full text report\ndocker compose run --rm vuls report -format-full-text\n\n# Generate one-line summary\ndocker compose run --rm vuls report -format-one-line-text\n\n# Generate list format\ndocker compose run --rm vuls report -format-list\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#report-automation",
      "title": "Report Automation",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#automated-report-generation-script",
      "title": "Automated Report Generation Script",
      "text": "<pre><code>#!/bin/bash\n# generate-reports.sh\n\nset -e\n\nDATE=$(date +%Y%m%d)\nREPORT_DIR=\"reports/$(date +%Y-%m)\"\nmkdir -p \"$REPORT_DIR\"\n\necho \"Generating vulnerability reports for $DATE...\"\n\n# Generate Vuls native reports\necho \"Generating JSON report...\"\ndocker compose run --rm vuls report -format-json &gt; \"$REPORT_DIR/scan-$DATE.json\"\n\necho \"Generating CSV report...\"\ndocker compose run --rm vuls report -format-csv &gt; \"$REPORT_DIR/vulnerabilities-$DATE.csv\"\n\necho \"Generating text summary...\"\ndocker compose run --rm vuls report -format-list &gt; \"$REPORT_DIR/summary-$DATE.txt\"\n\n# Process with comprehensive vulnerability checker\necho \"Processing with enhanced vulnerability checker...\"\npython comprehensive_vulnerability_checker.py \\\n  --vuls-result \"results/$(ls results/ | tail -1)\" \\\n  --output \"$REPORT_DIR/comprehensive-$DATE.json\"\n\n# Generate interactive HTML report\necho \"Generating interactive HTML report...\"\ncd vulnerability-reports\npython generate_report.py \\\n  -i \"../$REPORT_DIR/comprehensive-$DATE.json\" \\\n  -o \"../$REPORT_DIR/interactive-report-$DATE.html\" \\\n  -t \"Vulnerability Assessment Report - $(date +%B\\ %Y)\"\n\necho \"Reports generated in $REPORT_DIR/\"\nls -la \"$REPORT_DIR/\"\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#integration-with-vulnerability-scanners",
      "title": "Integration with Vulnerability Scanners",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#with-comprehensive_vulnerability_checkerpy",
      "title": "With comprehensive_vulnerability_checker.py",
      "text": "<pre><code># Run vulnerability scan\npython comprehensive_vulnerability_checker.py \\\n  --vuls-result results/scan_result.json \\\n  --output comprehensive_vulnerabilities.json\n\n# Generate HTML report\ncd vulnerability-reports\npython generate_report.py \\\n  -i ../comprehensive_vulnerabilities.json \\\n  -o reports/security_assessment.html \\\n  -t \"Infrastructure Security Assessment\"\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#complete-workflow-example",
      "title": "Complete Workflow Example",
      "text": "<pre><code>#!/bin/bash\n# complete-scan-and-report.sh\n\nDATE=$(date +%Y%m%d)\nSCAN_FILE=\"results/scan_${DATE}.json\"\nVULN_FILE=\"vulnerabilities_${DATE}.json\"\nREPORT_FILE=\"reports/security_report_${DATE}.html\"\n\n# Run Vuls scan\necho \"Running vulnerability scan...\"\ndocker compose run --rm vuls scan\n\n# Process results\necho \"Processing scan results...\"\npython comprehensive_vulnerability_checker.py \\\n  --vuls-result \"$SCAN_FILE\" \\\n  --output \"$VULN_FILE\"\n\n# Generate HTML report\necho \"Generating interactive report...\"\ncd vulnerability-reports\npython generate_report.py \\\n  -i \"../$VULN_FILE\" \\\n  -o \"../$REPORT_FILE\" \\\n  -t \"Security Assessment - $(date +%B\\ %Y)\"\n\necho \"Complete! Report available at: $REPORT_FILE\"\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#report-customization",
      "title": "Report Customization",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#custom-templates",
      "title": "Custom Templates",
      "text": "<p>The HTML report generator uses Jinja2 templates that can be customized:</p> <pre><code>vulnerability-reports/\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 vulnerability_report_template.html  # Main template\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 custom.css                     # Custom styling\n\u2502   \u2514\u2500\u2500 js/\n\u2502       \u2514\u2500\u2500 report.js                      # Interactive functionality\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#modifying-the-template",
      "title": "Modifying the Template",
      "text": "<ol> <li>Edit <code>templates/vulnerability_report_template.html</code></li> <li>Add new sections or charts</li> <li>Customize layout and structure</li> </ol>"
    },
    {
      "location": "user-guide/reporting/#custom-styling",
      "title": "Custom Styling",
      "text": "<ol> <li>Edit <code>static/css/custom.css</code> for custom styles</li> <li>Modify TailwindCSS classes in the template</li> <li>Add custom animations and themes</li> </ol>"
    },
    {
      "location": "user-guide/reporting/#adding-functionality",
      "title": "Adding Functionality",
      "text": "<ol> <li>Edit <code>static/js/report.js</code> for new interactive features</li> <li>Add custom filtering logic</li> <li>Implement additional chart types</li> </ol>"
    },
    {
      "location": "user-guide/reporting/#report-themes",
      "title": "Report Themes",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#light-theme-default",
      "title": "Light Theme (Default)",
      "text": "<pre><code>python generate_report.py \\\n  -i input.json \\\n  -o output.html \\\n  --theme light\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#dark-theme",
      "title": "Dark Theme",
      "text": "<pre><code>python generate_report.py \\\n  -i input.json \\\n  -o output.html \\\n  --theme dark\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#report-distribution",
      "title": "Report Distribution",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#email-distribution",
      "title": "Email Distribution",
      "text": "<pre><code>#!/bin/bash\n# email-reports.sh\n\nREPORT_FILE=\"reports/security_report_$(date +%Y%m%d).html\"\nRECIPIENTS=\"security-team@company.com,management@company.com\"\n\n# Generate report\n./generate-reports.sh\n\n# Email the report\nmail -s \"Monthly Vulnerability Report - $(date +%B\\ %Y)\" \\\n     -a \"$REPORT_FILE\" \\\n     \"$RECIPIENTS\" &lt; email-template.txt\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#web-publishing",
      "title": "Web Publishing",
      "text": "<pre><code>#!/bin/bash\n# publish-reports.sh\n\nREPORT_DIR=\"reports/$(date +%Y-%m)\"\nWEB_DIR=\"/var/www/security-reports\"\n\n# Copy reports to web directory\ncp -r \"$REPORT_DIR\" \"$WEB_DIR/\"\n\n# Set permissions\nchmod -R 644 \"$WEB_DIR/$(date +%Y-%m)\"\nchmod 755 \"$WEB_DIR/$(date +%Y-%m)\"\n\necho \"Reports published to: https://internal.company.com/security-reports/$(date +%Y-%m)/\"\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#automated-archival",
      "title": "Automated Archival",
      "text": "<pre><code>#!/bin/bash\n# archive-reports.sh\n\nARCHIVE_DIR=\"/backup/security-reports\"\nCURRENT_MONTH=$(date +%Y-%m)\n\n# Create archive\ntar -czf \"$ARCHIVE_DIR/reports-$CURRENT_MONTH.tar.gz\" \"reports/$CURRENT_MONTH/\"\n\n# Clean up old reports (keep last 12 months)\nfind reports/ -type d -name \"20*\" -mtime +365 -exec rm -rf {} \\;\n\necho \"Reports archived to: $ARCHIVE_DIR/reports-$CURRENT_MONTH.tar.gz\"\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#report-analysis",
      "title": "Report Analysis",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#key-metrics-to-track",
      "title": "Key Metrics to Track",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#executive-summary-metrics",
      "title": "Executive Summary Metrics",
      "text": "<ul> <li>Total vulnerabilities found</li> <li>Breakdown by severity (Critical/High/Medium/Low)</li> <li>Number of affected packages</li> <li>Systems scanned vs. systems with vulnerabilities</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#trend-analysis",
      "title": "Trend Analysis",
      "text": "<ul> <li>Month-over-month vulnerability counts</li> <li>Time to remediation tracking</li> <li>Recurring vulnerabilities</li> <li>New vs. resolved vulnerabilities</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#risk-assessment",
      "title": "Risk Assessment",
      "text": "<ul> <li>Package risk scores</li> <li>CVSS score distribution</li> <li>Vulnerability age analysis</li> <li>Exposure timeline</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#sample-analysis-queries",
      "title": "Sample Analysis Queries",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#csv-analysis-with-command-line-tools",
      "title": "CSV Analysis with Command Line Tools",
      "text": "<pre><code># Count vulnerabilities by severity\ncut -d',' -f5 vulnerabilities.csv | sort | uniq -c\n\n# Find highest CVSS scores\nsort -t',' -k6 -nr vulnerabilities.csv | head -10\n\n# Count vulnerabilities by package\ncut -d',' -f4 vulnerabilities.csv | sort | uniq -c | sort -nr\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#python-analysis-script",
      "title": "Python Analysis Script",
      "text": "<pre><code>#!/usr/bin/env python3\n# analyze-vulnerabilities.py\n\nimport pandas as pd\nimport json\nfrom datetime import datetime\n\ndef analyze_vulnerabilities(csv_file):\n    \"\"\"Analyze vulnerability data from CSV file.\"\"\"\n    df = pd.read_csv(csv_file)\n\n    print(\"=== Vulnerability Analysis ===\")\n    print(f\"Total vulnerabilities: {len(df)}\")\n    print(f\"Unique packages affected: {df['package'].nunique()}\")\n    print(f\"Average CVSS score: {df['cvss_score'].mean():.2f}\")\n\n    print(\"\\n=== Severity Breakdown ===\")\n    severity_counts = df['severity'].value_counts()\n    for severity, count in severity_counts.items():\n        print(f\"{severity}: {count}\")\n\n    print(\"\\n=== Top 10 Vulnerable Packages ===\")\n    package_counts = df['package'].value_counts().head(10)\n    for package, count in package_counts.items():\n        print(f\"{package}: {count}\")\n\n    print(\"\\n=== High Risk Vulnerabilities (CVSS &gt;= 7.0) ===\")\n    high_risk = df[df['cvss_score'] &gt;= 7.0]\n    print(f\"Count: {len(high_risk)}\")\n    for _, vuln in high_risk.head(5).iterrows():\n        print(f\"  {vuln['cve_id']}: {vuln['package']} (CVSS: {vuln['cvss_score']})\")\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) != 2:\n        print(\"Usage: python analyze-vulnerabilities.py &lt;csv_file&gt;\")\n        sys.exit(1)\n\n    analyze_vulnerabilities(sys.argv[1])\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#browser-compatibility",
      "title": "Browser Compatibility",
      "text": "<p>The interactive HTML reports are compatible with:</p> <ul> <li>Modern Browsers: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+</li> <li>Features: ES6+, CSS Grid, Flexbox, Chart.js</li> <li>Mobile: Responsive design works on all screen sizes</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#performance-considerations",
      "title": "Performance Considerations",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#large-datasets",
      "title": "Large Datasets",
      "text": "<ul> <li>Optimized for: 1000+ vulnerabilities</li> <li>Lazy Loading: Vulnerability details loaded on demand</li> <li>Debounced Search: Smooth filtering experience</li> <li>Virtual Scrolling: Handles large lists efficiently</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#report-size-optimization",
      "title": "Report Size Optimization",
      "text": "<pre><code># Compress large HTML reports\ngzip -9 reports/large-report.html\n\n# Serve compressed reports\npython -m http.server 8080 --directory reports/\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#security-considerations",
      "title": "Security Considerations",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#report-security",
      "title": "Report Security",
      "text": "<ul> <li>Self-Contained: No external dependencies in generated reports</li> <li>No Data Transmission: All processing happens locally</li> <li>Safe HTML: Jinja2 auto-escaping prevents XSS</li> <li>Print Security: Sensitive data can be excluded from print view</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#access-control",
      "title": "Access Control",
      "text": "<pre><code># Set restrictive permissions on report files\nchmod 600 reports/*.html\nchmod 700 reports/\n\n# Use web server authentication for published reports\n# Configure .htaccess or nginx auth for web-published reports\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#troubleshooting",
      "title": "Troubleshooting",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#common-issues",
      "title": "Common Issues",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#template-not-found",
      "title": "Template Not Found",
      "text": "<pre><code># Ensure you're in the correct directory\ncd vulnerability-reports\npython generate_report.py ...\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#json-parse-error",
      "title": "JSON Parse Error",
      "text": "<pre><code># Validate your JSON input\npython -m json.tool ../your_input.json\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#permission-denied",
      "title": "Permission Denied",
      "text": "<pre><code># Check file permissions\nchmod +x generate_report.py\nchmod 755 reports/\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#missing-dependencies",
      "title": "Missing Dependencies",
      "text": "<pre><code># Install required packages\nuv add jinja2\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#debug-mode",
      "title": "Debug Mode",
      "text": "<pre><code># Add debug output\npython -v generate_report.py -i input.json -o output.html\n</code></pre>"
    },
    {
      "location": "user-guide/reporting/#best-practices",
      "title": "Best Practices",
      "text": ""
    },
    {
      "location": "user-guide/reporting/#report-generation_1",
      "title": "Report Generation",
      "text": "<ul> <li>Generate reports immediately after scans</li> <li>Use consistent naming conventions</li> <li>Include timestamps in filenames</li> <li>Archive historical reports</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#report-distribution_1",
      "title": "Report Distribution",
      "text": "<ul> <li>Customize reports for different audiences</li> <li>Use appropriate security measures for sensitive data</li> <li>Automate distribution to stakeholders</li> <li>Provide both summary and detailed versions</li> </ul>"
    },
    {
      "location": "user-guide/reporting/#report-analysis_1",
      "title": "Report Analysis",
      "text": "<ul> <li>Track trends over time</li> <li>Focus on actionable metrics</li> <li>Correlate with remediation efforts</li> <li>Use reports to drive security improvements</li> </ul> <p>The Vuls reporting system provides comprehensive options for generating professional vulnerability reports. Choose the format that best fits your needs and audience, and consider automating the process for regular assessments.</p>"
    },
    {
      "location": "user-guide/scheduling/",
      "title": "Task Scheduling",
      "text": "<p>The Vuls Web application includes a comprehensive task scheduling system that allows you to automate vulnerability scans and database updates. This system is built on Celery and Redis, providing reliable and scalable task execution.</p>"
    },
    {
      "location": "user-guide/scheduling/#overview",
      "title": "Overview",
      "text": "<p>The scheduler supports two main types of tasks:</p> <ol> <li>Vulnerability Scans - Automated scans of your configured hosts</li> <li>Database Updates - Regular updates of vulnerability databases (NVD, OVAL, GOST)</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#architecture",
      "title": "Architecture",
      "text": "<p>The scheduling system uses a secure, multi-component architecture:</p>"
    },
    {
      "location": "user-guide/scheduling/#core-components",
      "title": "Core Components",
      "text": "<ul> <li>Web Application - User interface and API endpoints</li> <li>Celery Worker - Background task processing</li> <li>Celery Beat Scheduler - Cron-based task scheduling</li> <li>Redis - Message broker and result backend</li> <li>PostgreSQL - Task metadata and history storage</li> <li>Docker Executor Sidecar - Secure Docker operations</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#security-architecture",
      "title": "Security Architecture",
      "text": "<p>The system implements a sidecar pattern for enhanced security:</p> <ul> <li>Isolated Execution - All Docker operations run in a separate, dedicated container</li> <li>API-Based Communication - Secure API communication between components using API keys</li> <li>Function-Based Endpoints - Only predefined operations are allowed (no arbitrary command execution)</li> <li>Non-Root Execution - All containers run with minimal privileges</li> <li>Async Operations - Non-blocking task execution with real-time monitoring</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#data-flow",
      "title": "Data Flow",
      "text": "<ol> <li>Task Creation - Users create scheduled tasks via web interface or API</li> <li>Task Scheduling - Celery Beat checks for due tasks every minute</li> <li>Task Execution - Celery Worker processes tasks asynchronously</li> <li>Secure Operations - Worker communicates with Docker Executor Sidecar via secure API</li> <li>Container Execution - Sidecar manages Docker containers for scans and database updates</li> <li>Result Processing - Results are collected and stored in PostgreSQL</li> <li>Status Updates - Real-time status updates available via web interface and API</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#features",
      "title": "Features",
      "text": "<ul> <li>Cron-based Scheduling - Use standard cron expressions for flexible scheduling</li> <li>Manual Execution - Trigger any scheduled task manually</li> <li>Task History - View execution history and results for each task</li> <li>Real-time Status - Monitor task execution status in real-time</li> <li>Error Handling - Comprehensive error logging and notification</li> <li>Web Interface - Easy-to-use web interface for managing tasks</li> <li>Automatic Host Sync - Hosts are automatically synchronized from Vuls configuration when SSH config is updated</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#automatic-host-synchronization",
      "title": "Automatic Host Synchronization",
      "text": "<p>The scheduler automatically synchronizes hosts from your Vuls configuration whenever you update the SSH configuration. This ensures that your scheduled tasks always use the most current host definitions.</p>"
    },
    {
      "location": "user-guide/scheduling/#how-it-works",
      "title": "How It Works",
      "text": "<ol> <li>SSH Config Update - When you save changes to the SSH configuration via the web interface</li> <li>Vuls Config Update - The system automatically updates the <code>config/config.toml</code> file with the new host definitions</li> <li>Host Sync Trigger - A background Celery task is automatically triggered to synchronize the hosts</li> <li>Database Update - The hosts table is updated with the latest host information from the Vuls config</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#benefits",
      "title": "Benefits",
      "text": "<ul> <li>Single Source of Truth - Hosts are defined once in the SSH/Vuls config and automatically synchronized</li> <li>No Manual Entry - No need to manually add hosts to the scheduler interface</li> <li>Consistency - Scan modes and settings match the Vuls configuration exactly</li> <li>Real-time Updates - Changes are synchronized immediately when SSH config is saved</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#synchronized-data",
      "title": "Synchronized Data",
      "text": "<p>The following host information is automatically synchronized:</p> <ul> <li>Host Name - Unique identifier from SSH config</li> <li>Hostname/IP - Target address for scanning</li> <li>Scan Mode - Automatically determined based on connection type:</li> <li>AWS SSM \u2192 Fast scan mode</li> <li>GCP IAP \u2192 Fast scan mode</li> <li>Cloudflare Access \u2192 Offline scan mode</li> <li>Direct SSH \u2192 Fast and offline scan modes</li> <li>Vuls Configuration - Complete Vuls config section for the host</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#manual-synchronization",
      "title": "Manual Synchronization",
      "text": "<p>You can also manually trigger host synchronization using the API:</p> <pre><code>POST /api/hosts/sync-from-vuls-config\n</code></pre> <p>This is useful for:</p> <ul> <li>Troubleshooting synchronization issues</li> <li>Forcing a sync after manual config file changes</li> <li>Initial setup and testing</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#accessing-the-scheduler",
      "title": "Accessing the Scheduler",
      "text": "<p>Navigate to the Scheduler section in the main navigation menu. This will take you to the task management interface where you can:</p> <ul> <li>View all scheduled tasks</li> <li>Create new tasks</li> <li>Edit existing tasks</li> <li>Monitor task execution</li> <li>View task history</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#creating-scheduled-tasks",
      "title": "Creating Scheduled Tasks",
      "text": ""
    },
    {
      "location": "user-guide/scheduling/#vulnerability-scan-tasks",
      "title": "Vulnerability Scan Tasks",
      "text": "<p>To create a scheduled vulnerability scan:</p> <ol> <li>Click Create New Task</li> <li>Enter a descriptive Task Name</li> <li>Select Vulnerability Scan as the task type</li> <li>Choose the Target Host from your configured hosts</li> <li>Select the Scan Type:</li> <li>Fast Scan - Quick vulnerability assessment</li> <li>Full Scan - Comprehensive deep scan</li> <li>Set the Schedule using cron expression</li> <li>Add an optional Description</li> <li>Ensure the task is Active</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#database-update-tasks",
      "title": "Database Update Tasks",
      "text": "<p>To create a scheduled database update:</p> <ol> <li>Click Create New Task</li> <li>Enter a descriptive Task Name</li> <li>Select Database Update as the task type</li> <li>Choose the Database Type:</li> <li>All Databases - Update all vulnerability databases</li> <li>NVD Database - National Vulnerability Database</li> <li>Ubuntu OVAL - Ubuntu vulnerability data</li> <li>Debian OVAL - Debian vulnerability data</li> <li>Red Hat OVAL - Red Hat/CentOS vulnerability data</li> <li>Amazon Linux OVAL - Amazon Linux vulnerability data</li> <li>Alpine OVAL - Alpine Linux vulnerability data</li> <li>GOST Ubuntu - Ubuntu security tracker data</li> <li>GOST Debian - Debian security tracker data</li> <li>GOST Red Hat - Red Hat security tracker data</li> <li>Set the Schedule using cron expression</li> <li>Add an optional Description</li> <li>Ensure the task is Active</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#cron-expressions",
      "title": "Cron Expressions",
      "text": "<p>The scheduler uses standard cron expressions with five fields:</p> <pre><code>* * * * *\n\u2502 \u2502 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500 Day of week (0-7, Sunday = 0 or 7)\n\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500 Month (1-12)\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Day of month (1-31)\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hour (0-23)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Minute (0-59)\n</code></pre>"
    },
    {
      "location": "user-guide/scheduling/#common-examples",
      "title": "Common Examples",
      "text": "Schedule Cron Expression Description Every day at 2 AM <code>0 2 * * *</code> Daily maintenance scans Every Sunday at midnight <code>0 0 * * 0</code> Weekly comprehensive scans Every hour <code>0 * * * *</code> Frequent monitoring Every 15 minutes <code>*/15 * * * *</code> High-frequency checks First day of month at 3 AM <code>0 3 1 * *</code> Monthly database updates Weekdays at 6 AM <code>0 6 * * 1-5</code> Business day scans"
    },
    {
      "location": "user-guide/scheduling/#default-scheduled-tasks",
      "title": "Default Scheduled Tasks",
      "text": "<p>The system comes with some pre-configured scheduled tasks:</p>"
    },
    {
      "location": "user-guide/scheduling/#monthly-database-updates",
      "title": "Monthly Database Updates",
      "text": "<ul> <li>Schedule: <code>0 2 1 * *</code> (1<sup>st</sup> of every month at 2 AM)</li> <li>Type: Database Update (All Databases)</li> <li>Purpose: Keep vulnerability databases current</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#task-scheduler-monitoring",
      "title": "Task Scheduler Monitoring",
      "text": "<ul> <li>Schedule: Every minute</li> <li>Type: Internal system task</li> <li>Purpose: Check for and execute scheduled tasks</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#task-management",
      "title": "Task Management",
      "text": ""
    },
    {
      "location": "user-guide/scheduling/#viewing-tasks",
      "title": "Viewing Tasks",
      "text": "<p>The main scheduler interface shows:</p> <ul> <li>Task Statistics - Overview of total, active, scan, and database update tasks</li> <li>Task List - Detailed view of all scheduled tasks with:</li> <li>Task name and description</li> <li>Task type and target (for scans)</li> <li>Cron schedule</li> <li>Next scheduled run time</li> <li>Last execution status and time</li> <li>Active/inactive status</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#filtering-and-search",
      "title": "Filtering and Search",
      "text": "<p>Use the filter options to find specific tasks:</p> <ul> <li>Task Type Filter - Show only scan tasks or database updates</li> <li>Status Filter - Show only active or inactive tasks</li> <li>Search - Search by task name, description, or host name</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#manual-execution",
      "title": "Manual Execution",
      "text": "<p>You can manually trigger any scheduled task by clicking the Run Now button. This will:</p> <ul> <li>Create a new task run record</li> <li>Execute the task immediately</li> <li>Update the task status</li> <li>Show the execution results</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#task-history",
      "title": "Task History",
      "text": "<p>Click on any task to view its execution history, including:</p> <ul> <li>Execution start and end times</li> <li>Duration</li> <li>Status (success, failed, running)</li> <li>Result data (vulnerabilities found, databases updated)</li> <li>Error messages (if any)</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#monitoring-and-troubleshooting",
      "title": "Monitoring and Troubleshooting",
      "text": ""
    },
    {
      "location": "user-guide/scheduling/#task-status-indicators",
      "title": "Task Status Indicators",
      "text": "<ul> <li>Green (Success) - Task completed successfully</li> <li>Red (Failed) - Task encountered an error</li> <li>Blue (Running) - Task is currently executing</li> <li>Gray (Never run) - Task has not been executed yet</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#common-issues",
      "title": "Common Issues",
      "text": ""
    },
    {
      "location": "user-guide/scheduling/#task-not-running",
      "title": "Task Not Running",
      "text": "<ul> <li>Check if the task is Active</li> <li>Verify the cron expression is valid</li> <li>Ensure the Celery worker and scheduler services are running</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#scan-failures",
      "title": "Scan Failures",
      "text": "<ul> <li>Verify host connectivity and SSH configuration</li> <li>Check if the target host is accessible</li> <li>Review error messages in the task history</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#database-update-failures",
      "title": "Database Update Failures",
      "text": "<ul> <li>Check internet connectivity</li> <li>Verify Docker is running and has access to pull images</li> <li>Review disk space for database storage</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#logs-and-debugging",
      "title": "Logs and Debugging",
      "text": "<p>Task execution logs are available in:</p> <ul> <li>Web interface task history</li> <li>Application logs (<code>/app/logs/</code>)</li> <li>Celery worker logs</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#best-practices",
      "title": "Best Practices",
      "text": ""
    },
    {
      "location": "user-guide/scheduling/#scheduling-guidelines",
      "title": "Scheduling Guidelines",
      "text": "<ol> <li>Avoid Peak Hours - Schedule intensive tasks during off-peak hours</li> <li>Stagger Tasks - Don't schedule multiple heavy tasks at the same time</li> <li>Regular Updates - Keep vulnerability databases updated monthly</li> <li>Monitor Resources - Ensure adequate system resources for scheduled tasks</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#security-considerations",
      "title": "Security Considerations",
      "text": "<ol> <li>SSH Keys - Use SSH keys instead of passwords for host access</li> <li>Network Access - Ensure proper network security for scan targets</li> <li>User Permissions - Limit scheduler access to authorized users</li> <li>Audit Trail - Regularly review task execution history</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#performance-optimization",
      "title": "Performance Optimization",
      "text": "<ol> <li>Fast Scans - Use fast scans for frequent monitoring</li> <li>Full Scans - Reserve full scans for comprehensive assessments</li> <li>Database Updates - Update only necessary databases if storage is limited</li> <li>Cleanup - Old task run records are automatically cleaned up after 30 days</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#api-integration",
      "title": "API Integration",
      "text": "<p>The scheduler provides REST API endpoints for programmatic access:</p> <ul> <li><code>GET /api/scheduled-tasks/</code> - List all scheduled tasks</li> <li><code>POST /api/scheduled-tasks/</code> - Create a new scheduled task</li> <li><code>GET /api/scheduled-tasks/{id}</code> - Get specific task details</li> <li><code>PUT /api/scheduled-tasks/{id}</code> - Update a scheduled task</li> <li><code>DELETE /api/scheduled-tasks/{id}</code> - Delete a scheduled task</li> <li><code>POST /api/scheduled-tasks/{id}/run</code> - Manually trigger a task</li> <li><code>GET /api/scheduled-tasks/{id}/runs</code> - Get task execution history</li> </ul> <p>See the API documentation for detailed request/response formats.</p>"
    },
    {
      "location": "user-guide/scheduling/#docker-executor-sidecar",
      "title": "Docker Executor Sidecar",
      "text": "<p>The Docker Executor Sidecar is a critical security component that handles all Docker operations in an isolated environment.</p>"
    },
    {
      "location": "user-guide/scheduling/#security-features",
      "title": "Security Features",
      "text": "<ul> <li>Isolated Container - Runs in a separate container with minimal privileges</li> <li>API Key Authentication - All communication secured with API keys</li> <li>Function-Based Operations - Only predefined operations allowed (no shell access)</li> <li>Non-Root Execution - Runs as non-root user with Docker group permissions</li> <li>Async Processing - Non-blocking operations with real-time status monitoring</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#supported-operations",
      "title": "Supported Operations",
      "text": "<p>The sidecar provides secure endpoints for:</p> <ul> <li>Database Updates - NVD, OVAL, and GOST database fetching</li> <li>Vulnerability Scans - Host scanning operations</li> <li>Job Monitoring - Real-time status tracking and result collection</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#api-endpoints",
      "title": "API Endpoints",
      "text": "<p>The sidecar exposes the following internal API endpoints:</p> <ul> <li><code>GET /health</code> - Health check endpoint</li> <li><code>POST /database/update</code> - Start database update job</li> <li><code>POST /scan</code> - Start vulnerability scan job</li> <li><code>GET /jobs/{job_id}</code> - Get job status and results</li> <li><code>GET /jobs/{job_id}/logs</code> - Get job execution logs</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#configuration",
      "title": "Configuration",
      "text": "<p>The sidecar is configured via environment variables:</p> <ul> <li><code>EXECUTOR_API_KEY</code> - API key for secure communication</li> <li>Docker socket access for container management</li> <li>Compose project directory mount for accessing configuration</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#monitoring",
      "title": "Monitoring",
      "text": "<p>You can monitor sidecar operations through:</p> <ul> <li>Web Interface - Task status and history in the scheduler</li> <li>API Responses - Real-time job status via REST API</li> <li>Container Logs - Docker logs for the executor container</li> <li>Health Checks - Built-in health monitoring endpoint</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#troubleshooting",
      "title": "Troubleshooting",
      "text": "<p>If you encounter issues with the scheduler:</p> <ol> <li>Check the system status in the dashboard</li> <li>Verify Celery worker and Redis services are running</li> <li>Review task execution logs</li> <li>Ensure proper network connectivity for scans and database updates</li> <li>Check system resources (CPU, memory, disk space)</li> <li>Verify Docker Executor Sidecar is running and accessible</li> <li>Check API key configuration in environment variables</li> </ol>"
    },
    {
      "location": "user-guide/scheduling/#common-sidecar-issues",
      "title": "Common Sidecar Issues",
      "text": ""
    },
    {
      "location": "user-guide/scheduling/#sidecar-not-responding",
      "title": "Sidecar Not Responding",
      "text": "<ul> <li>Check if the <code>vuls-executor</code> container is running</li> <li>Verify API key configuration matches between services</li> <li>Ensure Docker socket permissions are correct</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#database-update-failures_1",
      "title": "Database Update Failures",
      "text": "<ul> <li>Check internet connectivity for downloading vulnerability data</li> <li>Verify sufficient disk space for database storage</li> <li>Review Docker container logs for specific error messages</li> </ul>"
    },
    {
      "location": "user-guide/scheduling/#permission-errors",
      "title": "Permission Errors",
      "text": "<ul> <li>Ensure the executor user has proper Docker group membership</li> <li>Verify Docker socket group ID matches container configuration</li> <li>Check file system permissions for mounted volumes</li> </ul> <p>For additional support, consult the system logs or contact your administrator.</p>"
    }
  ]
}
